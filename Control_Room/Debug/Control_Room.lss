
Control_Room.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  000013cc  00001440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002040  00000000  00000000  0000148c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000162f  00000000  00000000  000034cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_13>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 96 00 	call	0x12c	; 0x12c <main>
      7a:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_13>:
      82:	1f 92       	push	r1
      84:	0f 92       	push	r0
      86:	0f b6       	in	r0, 0x3f	; 63
      88:	0f 92       	push	r0
      8a:	11 24       	eor	r1, r1
      8c:	2f 93       	push	r18
      8e:	3f 93       	push	r19
      90:	4f 93       	push	r20
      92:	5f 93       	push	r21
      94:	6f 93       	push	r22
      96:	7f 93       	push	r23
      98:	8f 93       	push	r24
      9a:	9f 93       	push	r25
      9c:	af 93       	push	r26
      9e:	bf 93       	push	r27
      a0:	ef 93       	push	r30
      a2:	ff 93       	push	r31
      a4:	df 93       	push	r29
      a6:	cf 93       	push	r28
      a8:	0f 92       	push	r0
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
      ae:	ec e2       	ldi	r30, 0x2C	; 44
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	80 81       	ld	r24, Z
      b4:	89 83       	std	Y+1, r24	; 0x01
      b6:	89 81       	ldd	r24, Y+1	; 0x01
      b8:	81 33       	cpi	r24, 0x31	; 49
      ba:	51 f4       	brne	.+20     	; 0xd0 <__vector_13+0x4e>
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 bd 01 	call	0x37a	; 0x37a <Led_Toggle>
      c2:	81 e3       	ldi	r24, 0x31	; 49
      c4:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <SPI_ui8TransmitRecieve>
      c8:	80 e6       	ldi	r24, 0x60	; 96
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	0e 94 a3 03 	call	0x746	; 0x746 <UART_TransmitStr>
      d0:	89 81       	ldd	r24, Y+1	; 0x01
      d2:	82 33       	cpi	r24, 0x32	; 50
      d4:	51 f4       	brne	.+20     	; 0xea <__vector_13+0x68>
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	0e 94 bd 01 	call	0x37a	; 0x37a <Led_Toggle>
      dc:	82 e3       	ldi	r24, 0x32	; 50
      de:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <SPI_ui8TransmitRecieve>
      e2:	80 e8       	ldi	r24, 0x80	; 128
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 a3 03 	call	0x746	; 0x746 <UART_TransmitStr>
      ea:	89 81       	ldd	r24, Y+1	; 0x01
      ec:	83 33       	cpi	r24, 0x33	; 51
      ee:	51 f4       	brne	.+20     	; 0x104 <__vector_13+0x82>
      f0:	82 e0       	ldi	r24, 0x02	; 2
      f2:	0e 94 bd 01 	call	0x37a	; 0x37a <Led_Toggle>
      f6:	83 e3       	ldi	r24, 0x33	; 51
      f8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <SPI_ui8TransmitRecieve>
      fc:	87 e9       	ldi	r24, 0x97	; 151
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	0e 94 a3 03 	call	0x746	; 0x746 <UART_TransmitStr>
     104:	0f 90       	pop	r0
     106:	cf 91       	pop	r28
     108:	df 91       	pop	r29
     10a:	ff 91       	pop	r31
     10c:	ef 91       	pop	r30
     10e:	bf 91       	pop	r27
     110:	af 91       	pop	r26
     112:	9f 91       	pop	r25
     114:	8f 91       	pop	r24
     116:	7f 91       	pop	r23
     118:	6f 91       	pop	r22
     11a:	5f 91       	pop	r21
     11c:	4f 91       	pop	r20
     11e:	3f 91       	pop	r19
     120:	2f 91       	pop	r18
     122:	0f 90       	pop	r0
     124:	0f be       	out	0x3f, r0	; 63
     126:	0f 90       	pop	r0
     128:	1f 90       	pop	r1
     12a:	18 95       	reti

0000012c <main>:
		UART_TransmitStr("TV turned on/off  \n");

	}
}

int main(void) {
     12c:	cf 92       	push	r12
     12e:	ef 92       	push	r14
     130:	0f 93       	push	r16
     132:	df 93       	push	r29
     134:	cf 93       	push	r28
     136:	0f 92       	push	r0
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62

	Led_INIT();
     13c:	0e 94 a7 01 	call	0x34e	; 0x34e <Led_INIT>
	Button_INIT();
     140:	0e 94 2f 02 	call	0x45e	; 0x45e <Button_INIT>
	UART_Init(ASYNC, 9600, INTERRUPT_ON, UART_8_BIT_DATA, UART_1_STOP_BIT,
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	60 e8       	ldi	r22, 0x80	; 128
     148:	75 e2       	ldi	r23, 0x25	; 37
     14a:	41 e0       	ldi	r20, 0x01	; 1
     14c:	23 e0       	ldi	r18, 0x03	; 3
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	ee 24       	eor	r14, r14
     152:	cc 24       	eor	r12, r12
     154:	68 94       	set
     156:	c1 f8       	bld	r12, 1
     158:	0e 94 45 02 	call	0x48a	; 0x48a <UART_Init>
			UART_NO_PARITY, UART_TRANSCIEVE);

//	//initialize this node as a master
	SPI_vInitMaster();
     15c:	0e 94 ce 03 	call	0x79c	; 0x79c <SPI_vInitMaster>
     160:	ff cf       	rjmp	.-2      	; 0x160 <main+0x34>

00000162 <Motors_Init>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : void
* \Return value:   : None
*******************************************************************************/
void Motors_Init(void){
     162:	df 93       	push	r29
     164:	cf 93       	push	r28
     166:	cd b7       	in	r28, 0x3d	; 61
     168:	de b7       	in	r29, 0x3e	; 62
	Dio_CONFIGChannel(ENA_Port, ENA_Channel, OUTPUT);
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	41 e0       	ldi	r20, 0x01	; 1
     170:	0e 94 c8 05 	call	0xb90	; 0xb90 <Dio_CONFIGChannel>
	Dio_CONFIGChannel(ENB_Port, ENB_Channel, OUTPUT);
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	61 e0       	ldi	r22, 0x01	; 1
     178:	41 e0       	ldi	r20, 0x01	; 1
     17a:	0e 94 c8 05 	call	0xb90	; 0xb90 <Dio_CONFIGChannel>
	Dio_CONFIGChannel(IN1_Port, IN1_Channel, OUTPUT);
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	63 e0       	ldi	r22, 0x03	; 3
     182:	41 e0       	ldi	r20, 0x01	; 1
     184:	0e 94 c8 05 	call	0xb90	; 0xb90 <Dio_CONFIGChannel>
	Dio_CONFIGChannel(IN2_Port, IN2_Channel, OUTPUT);
     188:	83 e0       	ldi	r24, 0x03	; 3
     18a:	64 e0       	ldi	r22, 0x04	; 4
     18c:	41 e0       	ldi	r20, 0x01	; 1
     18e:	0e 94 c8 05 	call	0xb90	; 0xb90 <Dio_CONFIGChannel>
	Dio_CONFIGChannel(IN3_Port, IN3_Channel, OUTPUT);
     192:	83 e0       	ldi	r24, 0x03	; 3
     194:	65 e0       	ldi	r22, 0x05	; 5
     196:	41 e0       	ldi	r20, 0x01	; 1
     198:	0e 94 c8 05 	call	0xb90	; 0xb90 <Dio_CONFIGChannel>
	Dio_CONFIGChannel(IN4_Port, IN4_Channel, OUTPUT);
     19c:	83 e0       	ldi	r24, 0x03	; 3
     19e:	67 e0       	ldi	r22, 0x07	; 7
     1a0:	41 e0       	ldi	r20, 0x01	; 1
     1a2:	0e 94 c8 05 	call	0xb90	; 0xb90 <Dio_CONFIGChannel>
}
     1a6:	cf 91       	pop	r28
     1a8:	df 91       	pop	r29
     1aa:	08 95       	ret

000001ac <Motors_Forward>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : void
* \Return value:   : None
*******************************************************************************/
void Motors_Forward(void){
     1ac:	df 93       	push	r29
     1ae:	cf 93       	push	r28
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
	Dio_WRITEChannel(ENA_Port, ENA_Channel, STD_HIGH);
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	41 e0       	ldi	r20, 0x01	; 1
     1ba:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>
	Dio_WRITEChannel(IN1_Port, IN1_Channel, STD_HIGH);
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	63 e0       	ldi	r22, 0x03	; 3
     1c2:	41 e0       	ldi	r20, 0x01	; 1
     1c4:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>
	Dio_WRITEChannel(IN2_Port, IN2_Channel, STD_LOW);
     1c8:	83 e0       	ldi	r24, 0x03	; 3
     1ca:	64 e0       	ldi	r22, 0x04	; 4
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>

	Dio_WRITEChannel(ENB_Port, ENB_Channel, STD_HIGH);
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	61 e0       	ldi	r22, 0x01	; 1
     1d6:	41 e0       	ldi	r20, 0x01	; 1
     1d8:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>
	Dio_WRITEChannel(IN3_Port, IN3_Channel, STD_HIGH);
     1dc:	83 e0       	ldi	r24, 0x03	; 3
     1de:	65 e0       	ldi	r22, 0x05	; 5
     1e0:	41 e0       	ldi	r20, 0x01	; 1
     1e2:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>
	Dio_WRITEChannel(IN4_Port, IN4_Channel, STD_LOW);
     1e6:	83 e0       	ldi	r24, 0x03	; 3
     1e8:	67 e0       	ldi	r22, 0x07	; 7
     1ea:	40 e0       	ldi	r20, 0x00	; 0
     1ec:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>


}
     1f0:	cf 91       	pop	r28
     1f2:	df 91       	pop	r29
     1f4:	08 95       	ret

000001f6 <Motors_Backward>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : void
* \Return value:   : None
*******************************************************************************/
void Motors_Backward(void){
     1f6:	df 93       	push	r29
     1f8:	cf 93       	push	r28
     1fa:	cd b7       	in	r28, 0x3d	; 61
     1fc:	de b7       	in	r29, 0x3e	; 62
	Dio_WRITEChannel(ENA_Port, ENA_Channel, STD_HIGH);
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	60 e0       	ldi	r22, 0x00	; 0
     202:	41 e0       	ldi	r20, 0x01	; 1
     204:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>
	Dio_WRITEChannel(IN1_Port, IN1_Channel, STD_LOW);
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	63 e0       	ldi	r22, 0x03	; 3
     20c:	40 e0       	ldi	r20, 0x00	; 0
     20e:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>
	Dio_WRITEChannel(IN2_Port, IN2_Channel, STD_HIGH);
     212:	83 e0       	ldi	r24, 0x03	; 3
     214:	64 e0       	ldi	r22, 0x04	; 4
     216:	41 e0       	ldi	r20, 0x01	; 1
     218:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>

	Dio_WRITEChannel(ENB_Port, ENB_Channel, STD_HIGH);
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	61 e0       	ldi	r22, 0x01	; 1
     220:	41 e0       	ldi	r20, 0x01	; 1
     222:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>
	Dio_WRITEChannel(IN3_Port, IN3_Channel, STD_LOW);
     226:	83 e0       	ldi	r24, 0x03	; 3
     228:	65 e0       	ldi	r22, 0x05	; 5
     22a:	40 e0       	ldi	r20, 0x00	; 0
     22c:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>
	Dio_WRITEChannel(IN4_Port, IN4_Channel, STD_HIGH);
     230:	83 e0       	ldi	r24, 0x03	; 3
     232:	67 e0       	ldi	r22, 0x07	; 7
     234:	41 e0       	ldi	r20, 0x01	; 1
     236:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>

}
     23a:	cf 91       	pop	r28
     23c:	df 91       	pop	r29
     23e:	08 95       	ret

00000240 <Motors_Stop>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : void
* \Return value:   : None
*******************************************************************************/
void Motors_Stop(void){
     240:	df 93       	push	r29
     242:	cf 93       	push	r28
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
	Dio_WRITEChannel(ENA_Port, ENA_Channel, STD_HIGH);
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	60 e0       	ldi	r22, 0x00	; 0
     24c:	41 e0       	ldi	r20, 0x01	; 1
     24e:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>
	Dio_WRITEChannel(IN1_Port, IN1_Channel, STD_HIGH);
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	63 e0       	ldi	r22, 0x03	; 3
     256:	41 e0       	ldi	r20, 0x01	; 1
     258:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>
	Dio_WRITEChannel(IN2_Port, IN2_Channel, STD_HIGH);
     25c:	83 e0       	ldi	r24, 0x03	; 3
     25e:	64 e0       	ldi	r22, 0x04	; 4
     260:	41 e0       	ldi	r20, 0x01	; 1
     262:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>

	Dio_WRITEChannel(ENB_Port, ENB_Channel, STD_HIGH);
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	61 e0       	ldi	r22, 0x01	; 1
     26a:	41 e0       	ldi	r20, 0x01	; 1
     26c:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>
	Dio_WRITEChannel(IN3_Port, IN3_Channel, STD_HIGH);
     270:	83 e0       	ldi	r24, 0x03	; 3
     272:	65 e0       	ldi	r22, 0x05	; 5
     274:	41 e0       	ldi	r20, 0x01	; 1
     276:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>
	Dio_WRITEChannel(IN4_Port, IN4_Channel, STD_HIGH);
     27a:	83 e0       	ldi	r24, 0x03	; 3
     27c:	67 e0       	ldi	r22, 0x07	; 7
     27e:	41 e0       	ldi	r20, 0x01	; 1
     280:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>

}
     284:	cf 91       	pop	r28
     286:	df 91       	pop	r29
     288:	08 95       	ret

0000028a <Led_TurnON>:
* \Parameters (in) : LedID
* \Return value:   : None
*
*******************************************************************************/

void Led_TurnON(LED_ID LedID){
     28a:	df 93       	push	r29
     28c:	cf 93       	push	r28
     28e:	00 d0       	rcall	.+0      	; 0x290 <Led_TurnON+0x6>
     290:	0f 92       	push	r0
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID){
     298:	89 81       	ldd	r24, Y+1	; 0x01
     29a:	28 2f       	mov	r18, r24
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	3b 83       	std	Y+3, r19	; 0x03
     2a0:	2a 83       	std	Y+2, r18	; 0x02
     2a2:	8a 81       	ldd	r24, Y+2	; 0x02
     2a4:	9b 81       	ldd	r25, Y+3	; 0x03
     2a6:	81 30       	cpi	r24, 0x01	; 1
     2a8:	91 05       	cpc	r25, r1
     2aa:	79 f0       	breq	.+30     	; 0x2ca <Led_TurnON+0x40>
     2ac:	2a 81       	ldd	r18, Y+2	; 0x02
     2ae:	3b 81       	ldd	r19, Y+3	; 0x03
     2b0:	22 30       	cpi	r18, 0x02	; 2
     2b2:	31 05       	cpc	r19, r1
     2b4:	81 f0       	breq	.+32     	; 0x2d6 <Led_TurnON+0x4c>
     2b6:	8a 81       	ldd	r24, Y+2	; 0x02
     2b8:	9b 81       	ldd	r25, Y+3	; 0x03
     2ba:	00 97       	sbiw	r24, 0x00	; 0
     2bc:	89 f4       	brne	.+34     	; 0x2e0 <Led_TurnON+0x56>
		case LED0:
		Dio_WRITEChannel(LED0_PORT,LED0_CHANNEL,STD_HIGH);
     2be:	82 e0       	ldi	r24, 0x02	; 2
     2c0:	62 e0       	ldi	r22, 0x02	; 2
     2c2:	41 e0       	ldi	r20, 0x01	; 1
     2c4:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>
     2c8:	0b c0       	rjmp	.+22     	; 0x2e0 <Led_TurnON+0x56>
		break;

		case LED1:
		Dio_WRITEChannel(LED1_PORT,LED1_CHANNEL,STD_HIGH);
     2ca:	82 e0       	ldi	r24, 0x02	; 2
     2cc:	67 e0       	ldi	r22, 0x07	; 7
     2ce:	41 e0       	ldi	r20, 0x01	; 1
     2d0:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>
     2d4:	05 c0       	rjmp	.+10     	; 0x2e0 <Led_TurnON+0x56>
		break;

		case LED2:
		Dio_WRITEChannel(LED2_PORT,LED2_CHANNEL,STD_HIGH);
     2d6:	83 e0       	ldi	r24, 0x03	; 3
     2d8:	63 e0       	ldi	r22, 0x03	; 3
     2da:	41 e0       	ldi	r20, 0x01	; 1
     2dc:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>
		break;
	}
}
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
     2e4:	0f 90       	pop	r0
     2e6:	cf 91       	pop	r28
     2e8:	df 91       	pop	r29
     2ea:	08 95       	ret

000002ec <Led_TurnOFF>:
* \Parameters (in) : LedID
* \Return value:   : None
*
*******************************************************************************/

void Led_TurnOFF(LED_ID LedID){
     2ec:	df 93       	push	r29
     2ee:	cf 93       	push	r28
     2f0:	00 d0       	rcall	.+0      	; 0x2f2 <Led_TurnOFF+0x6>
     2f2:	0f 92       	push	r0
     2f4:	cd b7       	in	r28, 0x3d	; 61
     2f6:	de b7       	in	r29, 0x3e	; 62
     2f8:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID){
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	28 2f       	mov	r18, r24
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	3b 83       	std	Y+3, r19	; 0x03
     302:	2a 83       	std	Y+2, r18	; 0x02
     304:	8a 81       	ldd	r24, Y+2	; 0x02
     306:	9b 81       	ldd	r25, Y+3	; 0x03
     308:	81 30       	cpi	r24, 0x01	; 1
     30a:	91 05       	cpc	r25, r1
     30c:	79 f0       	breq	.+30     	; 0x32c <Led_TurnOFF+0x40>
     30e:	2a 81       	ldd	r18, Y+2	; 0x02
     310:	3b 81       	ldd	r19, Y+3	; 0x03
     312:	22 30       	cpi	r18, 0x02	; 2
     314:	31 05       	cpc	r19, r1
     316:	81 f0       	breq	.+32     	; 0x338 <Led_TurnOFF+0x4c>
     318:	8a 81       	ldd	r24, Y+2	; 0x02
     31a:	9b 81       	ldd	r25, Y+3	; 0x03
     31c:	00 97       	sbiw	r24, 0x00	; 0
     31e:	89 f4       	brne	.+34     	; 0x342 <Led_TurnOFF+0x56>
		case LED0:
		Dio_WRITEChannel(LED0_PORT,LED0_CHANNEL,STD_LOW);
     320:	82 e0       	ldi	r24, 0x02	; 2
     322:	62 e0       	ldi	r22, 0x02	; 2
     324:	40 e0       	ldi	r20, 0x00	; 0
     326:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>
     32a:	0b c0       	rjmp	.+22     	; 0x342 <Led_TurnOFF+0x56>
		break;

		case LED1:
		Dio_WRITEChannel(LED1_PORT,LED1_CHANNEL,STD_LOW);
     32c:	82 e0       	ldi	r24, 0x02	; 2
     32e:	67 e0       	ldi	r22, 0x07	; 7
     330:	40 e0       	ldi	r20, 0x00	; 0
     332:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>
     336:	05 c0       	rjmp	.+10     	; 0x342 <Led_TurnOFF+0x56>
		break;

		case LED2:
		Dio_WRITEChannel(LED2_PORT,LED2_CHANNEL,STD_LOW);
     338:	83 e0       	ldi	r24, 0x03	; 3
     33a:	63 e0       	ldi	r22, 0x03	; 3
     33c:	40 e0       	ldi	r20, 0x00	; 0
     33e:	0e 94 ab 06 	call	0xd56	; 0xd56 <Dio_WRITEChannel>
		break;
	}
}
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	cf 91       	pop	r28
     34a:	df 91       	pop	r29
     34c:	08 95       	ret

0000034e <Led_INIT>:
* \Parameters (in) : void
* \Return value:   : None
*
*******************************************************************************/

void Led_INIT(void){
     34e:	df 93       	push	r29
     350:	cf 93       	push	r28
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
	Dio_CONFIGChannel(LED0_PORT,LED0_CHANNEL,OUTPUT);
     356:	82 e0       	ldi	r24, 0x02	; 2
     358:	62 e0       	ldi	r22, 0x02	; 2
     35a:	41 e0       	ldi	r20, 0x01	; 1
     35c:	0e 94 c8 05 	call	0xb90	; 0xb90 <Dio_CONFIGChannel>
	Dio_CONFIGChannel(LED1_PORT,LED1_CHANNEL,OUTPUT);
     360:	82 e0       	ldi	r24, 0x02	; 2
     362:	67 e0       	ldi	r22, 0x07	; 7
     364:	41 e0       	ldi	r20, 0x01	; 1
     366:	0e 94 c8 05 	call	0xb90	; 0xb90 <Dio_CONFIGChannel>
	Dio_CONFIGChannel(LED2_PORT,LED2_CHANNEL,OUTPUT);
     36a:	83 e0       	ldi	r24, 0x03	; 3
     36c:	63 e0       	ldi	r22, 0x03	; 3
     36e:	41 e0       	ldi	r20, 0x01	; 1
     370:	0e 94 c8 05 	call	0xb90	; 0xb90 <Dio_CONFIGChannel>

}
     374:	cf 91       	pop	r28
     376:	df 91       	pop	r29
     378:	08 95       	ret

0000037a <Led_Toggle>:
* \Parameters (in) : LedID
* \Return value:   : None
*
*******************************************************************************/

void Led_Toggle(LED_ID LedID){
     37a:	df 93       	push	r29
     37c:	cf 93       	push	r28
     37e:	00 d0       	rcall	.+0      	; 0x380 <Led_Toggle+0x6>
     380:	0f 92       	push	r0
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
     386:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID){
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	28 2f       	mov	r18, r24
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	3b 83       	std	Y+3, r19	; 0x03
     390:	2a 83       	std	Y+2, r18	; 0x02
     392:	8a 81       	ldd	r24, Y+2	; 0x02
     394:	9b 81       	ldd	r25, Y+3	; 0x03
     396:	81 30       	cpi	r24, 0x01	; 1
     398:	91 05       	cpc	r25, r1
     39a:	71 f0       	breq	.+28     	; 0x3b8 <Led_Toggle+0x3e>
     39c:	2a 81       	ldd	r18, Y+2	; 0x02
     39e:	3b 81       	ldd	r19, Y+3	; 0x03
     3a0:	22 30       	cpi	r18, 0x02	; 2
     3a2:	31 05       	cpc	r19, r1
     3a4:	71 f0       	breq	.+28     	; 0x3c2 <Led_Toggle+0x48>
     3a6:	8a 81       	ldd	r24, Y+2	; 0x02
     3a8:	9b 81       	ldd	r25, Y+3	; 0x03
     3aa:	00 97       	sbiw	r24, 0x00	; 0
     3ac:	71 f4       	brne	.+28     	; 0x3ca <Led_Toggle+0x50>
		case LED0:
		Dio_TOGGLEChannel(LED0_PORT,LED0_CHANNEL);
     3ae:	82 e0       	ldi	r24, 0x02	; 2
     3b0:	62 e0       	ldi	r22, 0x02	; 2
     3b2:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Dio_TOGGLEChannel>
     3b6:	09 c0       	rjmp	.+18     	; 0x3ca <Led_Toggle+0x50>
		break;

		case LED1:
		Dio_TOGGLEChannel(LED1_PORT,LED1_CHANNEL);
     3b8:	82 e0       	ldi	r24, 0x02	; 2
     3ba:	67 e0       	ldi	r22, 0x07	; 7
     3bc:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Dio_TOGGLEChannel>
     3c0:	04 c0       	rjmp	.+8      	; 0x3ca <Led_Toggle+0x50>
		break;

		case LED2:
		Dio_TOGGLEChannel(LED2_PORT,LED2_CHANNEL);
     3c2:	83 e0       	ldi	r24, 0x03	; 3
     3c4:	63 e0       	ldi	r22, 0x03	; 3
     3c6:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Dio_TOGGLEChannel>
		break;

	}

}
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	cf 91       	pop	r28
     3d2:	df 91       	pop	r29
     3d4:	08 95       	ret

000003d6 <Button_READ>:
* \Parameters (in) : ButtonID
* \Return value:   : PRESSED or NOT_PRESSED
*
*******************************************************************************/

Button_Status Button_READ(BUTTON_ID ButtonID){
     3d6:	df 93       	push	r29
     3d8:	cf 93       	push	r28
     3da:	00 d0       	rcall	.+0      	; 0x3dc <Button_READ+0x6>
     3dc:	00 d0       	rcall	.+0      	; 0x3de <Button_READ+0x8>
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	8a 83       	std	Y+2, r24	; 0x02
	Button_Status status= NOT_PRESSED;
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	89 83       	std	Y+1, r24	; 0x01
	switch(ButtonID){
     3e8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ea:	28 2f       	mov	r18, r24
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	3c 83       	std	Y+4, r19	; 0x04
     3f0:	2b 83       	std	Y+3, r18	; 0x03
     3f2:	8b 81       	ldd	r24, Y+3	; 0x03
     3f4:	9c 81       	ldd	r25, Y+4	; 0x04
     3f6:	81 30       	cpi	r24, 0x01	; 1
     3f8:	91 05       	cpc	r25, r1
     3fa:	a1 f0       	breq	.+40     	; 0x424 <Button_READ+0x4e>
     3fc:	2b 81       	ldd	r18, Y+3	; 0x03
     3fe:	3c 81       	ldd	r19, Y+4	; 0x04
     400:	22 30       	cpi	r18, 0x02	; 2
     402:	31 05       	cpc	r19, r1
     404:	d1 f0       	breq	.+52     	; 0x43a <Button_READ+0x64>
     406:	8b 81       	ldd	r24, Y+3	; 0x03
     408:	9c 81       	ldd	r25, Y+4	; 0x04
     40a:	00 97       	sbiw	r24, 0x00	; 0
     40c:	01 f5       	brne	.+64     	; 0x44e <Button_READ+0x78>
		case BUTTON0:
		if(Dio_ReadChannel(BUTTON0_PORT,BUTTON0_CHANNEL)==STD_HIGH){
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	0e 94 0b 08 	call	0x1016	; 0x1016 <Dio_ReadChannel>
     416:	81 30       	cpi	r24, 0x01	; 1
     418:	11 f4       	brne	.+4      	; 0x41e <Button_READ+0x48>
			status = PRESSED;
     41a:	19 82       	std	Y+1, r1	; 0x01
     41c:	18 c0       	rjmp	.+48     	; 0x44e <Button_READ+0x78>
		}
		else{
			status= NOT_PRESSED;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	89 83       	std	Y+1, r24	; 0x01
     422:	15 c0       	rjmp	.+42     	; 0x44e <Button_READ+0x78>
		}
		break;

		case BUTTON1:
		if(Dio_ReadChannel(BUTTON1_PORT,BUTTON1_CHANNEL)==STD_HIGH){
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	64 e0       	ldi	r22, 0x04	; 4
     428:	0e 94 0b 08 	call	0x1016	; 0x1016 <Dio_ReadChannel>
     42c:	81 30       	cpi	r24, 0x01	; 1
     42e:	11 f4       	brne	.+4      	; 0x434 <Button_READ+0x5e>
			status = PRESSED;
     430:	19 82       	std	Y+1, r1	; 0x01
     432:	0d c0       	rjmp	.+26     	; 0x44e <Button_READ+0x78>
		}
		else{
			status= NOT_PRESSED;
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	89 83       	std	Y+1, r24	; 0x01
     438:	0a c0       	rjmp	.+20     	; 0x44e <Button_READ+0x78>
		}
		break;

		case BUTTON2:
		if(Dio_ReadChannel(BUTTON2_PORT,BUTTON2_CHANNEL)==STD_HIGH){
     43a:	83 e0       	ldi	r24, 0x03	; 3
     43c:	62 e0       	ldi	r22, 0x02	; 2
     43e:	0e 94 0b 08 	call	0x1016	; 0x1016 <Dio_ReadChannel>
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	11 f4       	brne	.+4      	; 0x44a <Button_READ+0x74>
			status = PRESSED;
     446:	19 82       	std	Y+1, r1	; 0x01
     448:	02 c0       	rjmp	.+4      	; 0x44e <Button_READ+0x78>
		}
		else{
			status= NOT_PRESSED;
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
	}
	return status;
     44e:	89 81       	ldd	r24, Y+1	; 0x01
}
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	cf 91       	pop	r28
     45a:	df 91       	pop	r29
     45c:	08 95       	ret

0000045e <Button_INIT>:
* \Parameters (in) : void
* \Return value:   : None
*
*******************************************************************************/

void Button_INIT(void){
     45e:	df 93       	push	r29
     460:	cf 93       	push	r28
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
	Dio_CONFIGChannel(BUTTON0_PORT,BUTTON0_CHANNEL,INPUT);
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	40 e0       	ldi	r20, 0x00	; 0
     46c:	0e 94 c8 05 	call	0xb90	; 0xb90 <Dio_CONFIGChannel>
	Dio_CONFIGChannel(BUTTON1_PORT,BUTTON1_CHANNEL,INPUT);
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	64 e0       	ldi	r22, 0x04	; 4
     474:	40 e0       	ldi	r20, 0x00	; 0
     476:	0e 94 c8 05 	call	0xb90	; 0xb90 <Dio_CONFIGChannel>
	Dio_CONFIGChannel(BUTTON2_PORT,BUTTON2_CHANNEL,INPUT);
     47a:	83 e0       	ldi	r24, 0x03	; 3
     47c:	62 e0       	ldi	r22, 0x02	; 2
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	0e 94 c8 05 	call	0xb90	; 0xb90 <Dio_CONFIGChannel>

}
     484:	cf 91       	pop	r28
     486:	df 91       	pop	r29
     488:	08 95       	ret

0000048a <UART_Init>:
* \Return value:   : void
*
*******************************************************************************/


void UART_Init(Uart_Mode uart_mode, u16 baud_rate, Uart_Interrupt_Mode interrupt_mode, Uart_Data_Bit data_size, Uart_Stop_Bit stop_bit, Uart_Parity_Mode parity_mode, Uart_Device_Mode device_mode){
     48a:	cf 92       	push	r12
     48c:	ef 92       	push	r14
     48e:	0f 93       	push	r16
     490:	df 93       	push	r29
     492:	cf 93       	push	r28
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
     498:	60 97       	sbiw	r28, 0x10	; 16
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	cd bf       	out	0x3d, r28	; 61
     4a4:	89 83       	std	Y+1, r24	; 0x01
     4a6:	7b 83       	std	Y+3, r23	; 0x03
     4a8:	6a 83       	std	Y+2, r22	; 0x02
     4aa:	4c 83       	std	Y+4, r20	; 0x04
     4ac:	2d 83       	std	Y+5, r18	; 0x05
     4ae:	0e 83       	std	Y+6, r16	; 0x06
     4b0:	ef 82       	std	Y+7, r14	; 0x07
     4b2:	c8 86       	std	Y+8, r12	; 0x08


	/* Enable receiver and transmitter */
	switch(device_mode){
     4b4:	88 85       	ldd	r24, Y+8	; 0x08
     4b6:	28 2f       	mov	r18, r24
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	38 8b       	std	Y+16, r19	; 0x10
     4bc:	2f 87       	std	Y+15, r18	; 0x0f
     4be:	8f 85       	ldd	r24, Y+15	; 0x0f
     4c0:	98 89       	ldd	r25, Y+16	; 0x10
     4c2:	81 30       	cpi	r24, 0x01	; 1
     4c4:	91 05       	cpc	r25, r1
     4c6:	89 f0       	breq	.+34     	; 0x4ea <UART_Init+0x60>
     4c8:	2f 85       	ldd	r18, Y+15	; 0x0f
     4ca:	38 89       	ldd	r19, Y+16	; 0x10
     4cc:	22 30       	cpi	r18, 0x02	; 2
     4ce:	31 05       	cpc	r19, r1
     4d0:	a1 f0       	breq	.+40     	; 0x4fa <UART_Init+0x70>
     4d2:	8f 85       	ldd	r24, Y+15	; 0x0f
     4d4:	98 89       	ldd	r25, Y+16	; 0x10
     4d6:	00 97       	sbiw	r24, 0x00	; 0
     4d8:	f1 f4       	brne	.+60     	; 0x516 <UART_Init+0x8c>
		case UART_RECEIVE:
			SET_BIT(USART_CONTROL_STATUS_REG_B,RXEN);
     4da:	aa e2       	ldi	r26, 0x2A	; 42
     4dc:	b0 e0       	ldi	r27, 0x00	; 0
     4de:	ea e2       	ldi	r30, 0x2A	; 42
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	80 81       	ld	r24, Z
     4e4:	80 61       	ori	r24, 0x10	; 16
     4e6:	8c 93       	st	X, r24
     4e8:	16 c0       	rjmp	.+44     	; 0x516 <UART_Init+0x8c>
			break;
		case UART_TRANSMIT:
			SET_BIT(USART_CONTROL_STATUS_REG_B,TXEN);
     4ea:	aa e2       	ldi	r26, 0x2A	; 42
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	ea e2       	ldi	r30, 0x2A	; 42
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	80 81       	ld	r24, Z
     4f4:	88 60       	ori	r24, 0x08	; 8
     4f6:	8c 93       	st	X, r24
     4f8:	0e c0       	rjmp	.+28     	; 0x516 <UART_Init+0x8c>
			break;
		case UART_TRANSCIEVE:
			SET_BIT(USART_CONTROL_STATUS_REG_B,TXEN);
     4fa:	aa e2       	ldi	r26, 0x2A	; 42
     4fc:	b0 e0       	ldi	r27, 0x00	; 0
     4fe:	ea e2       	ldi	r30, 0x2A	; 42
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	80 81       	ld	r24, Z
     504:	88 60       	ori	r24, 0x08	; 8
     506:	8c 93       	st	X, r24
			SET_BIT(USART_CONTROL_STATUS_REG_B,RXEN);
     508:	aa e2       	ldi	r26, 0x2A	; 42
     50a:	b0 e0       	ldi	r27, 0x00	; 0
     50c:	ea e2       	ldi	r30, 0x2A	; 42
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	80 81       	ld	r24, Z
     512:	80 61       	ori	r24, 0x10	; 16
     514:	8c 93       	st	X, r24
			break;
	}


	/* Set frame format data, stop bit, parity bits */
	SET_BIT(USART_CONTROL_STATUS_REG_C,URSEL);
     516:	a0 e4       	ldi	r26, 0x40	; 64
     518:	b0 e0       	ldi	r27, 0x00	; 0
     51a:	e0 e4       	ldi	r30, 0x40	; 64
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	80 81       	ld	r24, Z
     520:	80 68       	ori	r24, 0x80	; 128
     522:	8c 93       	st	X, r24

	switch(data_size){
     524:	8d 81       	ldd	r24, Y+5	; 0x05
     526:	28 2f       	mov	r18, r24
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	3e 87       	std	Y+14, r19	; 0x0e
     52c:	2d 87       	std	Y+13, r18	; 0x0d
     52e:	8d 85       	ldd	r24, Y+13	; 0x0d
     530:	9e 85       	ldd	r25, Y+14	; 0x0e
     532:	81 30       	cpi	r24, 0x01	; 1
     534:	91 05       	cpc	r25, r1
     536:	21 f1       	breq	.+72     	; 0x580 <UART_Init+0xf6>
     538:	2d 85       	ldd	r18, Y+13	; 0x0d
     53a:	3e 85       	ldd	r19, Y+14	; 0x0e
     53c:	22 30       	cpi	r18, 0x02	; 2
     53e:	31 05       	cpc	r19, r1
     540:	2c f4       	brge	.+10     	; 0x54c <UART_Init+0xc2>
     542:	8d 85       	ldd	r24, Y+13	; 0x0d
     544:	9e 85       	ldd	r25, Y+14	; 0x0e
     546:	00 97       	sbiw	r24, 0x00	; 0
     548:	61 f0       	breq	.+24     	; 0x562 <UART_Init+0xd8>
     54a:	46 c0       	rjmp	.+140    	; 0x5d8 <UART_Init+0x14e>
     54c:	2d 85       	ldd	r18, Y+13	; 0x0d
     54e:	3e 85       	ldd	r19, Y+14	; 0x0e
     550:	22 30       	cpi	r18, 0x02	; 2
     552:	31 05       	cpc	r19, r1
     554:	21 f1       	breq	.+72     	; 0x59e <UART_Init+0x114>
     556:	8d 85       	ldd	r24, Y+13	; 0x0d
     558:	9e 85       	ldd	r25, Y+14	; 0x0e
     55a:	83 30       	cpi	r24, 0x03	; 3
     55c:	91 05       	cpc	r25, r1
     55e:	71 f1       	breq	.+92     	; 0x5bc <UART_Init+0x132>
     560:	3b c0       	rjmp	.+118    	; 0x5d8 <UART_Init+0x14e>
		case UART_5_BIT_DATA:
			CLEAR_BIT(USART_CONTROL_STATUS_REG_C,UCSZ0);
     562:	a0 e4       	ldi	r26, 0x40	; 64
     564:	b0 e0       	ldi	r27, 0x00	; 0
     566:	e0 e4       	ldi	r30, 0x40	; 64
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	80 81       	ld	r24, Z
     56c:	8d 7f       	andi	r24, 0xFD	; 253
     56e:	8c 93       	st	X, r24
			CLEAR_BIT(USART_CONTROL_STATUS_REG_C,UCSZ1);
     570:	a0 e4       	ldi	r26, 0x40	; 64
     572:	b0 e0       	ldi	r27, 0x00	; 0
     574:	e0 e4       	ldi	r30, 0x40	; 64
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	80 81       	ld	r24, Z
     57a:	8b 7f       	andi	r24, 0xFB	; 251
     57c:	8c 93       	st	X, r24
     57e:	2c c0       	rjmp	.+88     	; 0x5d8 <UART_Init+0x14e>
			break;
		case UART_6_BIT_DATA:
			SET_BIT(USART_CONTROL_STATUS_REG_C,UCSZ0);
     580:	a0 e4       	ldi	r26, 0x40	; 64
     582:	b0 e0       	ldi	r27, 0x00	; 0
     584:	e0 e4       	ldi	r30, 0x40	; 64
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	80 81       	ld	r24, Z
     58a:	82 60       	ori	r24, 0x02	; 2
     58c:	8c 93       	st	X, r24
			CLEAR_BIT(USART_CONTROL_STATUS_REG_C,UCSZ1);
     58e:	a0 e4       	ldi	r26, 0x40	; 64
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	e0 e4       	ldi	r30, 0x40	; 64
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	80 81       	ld	r24, Z
     598:	8b 7f       	andi	r24, 0xFB	; 251
     59a:	8c 93       	st	X, r24
     59c:	1d c0       	rjmp	.+58     	; 0x5d8 <UART_Init+0x14e>
			break;
		case UART_7_BIT_DATA:
			CLEAR_BIT(USART_CONTROL_STATUS_REG_C,UCSZ0);
     59e:	a0 e4       	ldi	r26, 0x40	; 64
     5a0:	b0 e0       	ldi	r27, 0x00	; 0
     5a2:	e0 e4       	ldi	r30, 0x40	; 64
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	80 81       	ld	r24, Z
     5a8:	8d 7f       	andi	r24, 0xFD	; 253
     5aa:	8c 93       	st	X, r24
			SET_BIT(USART_CONTROL_STATUS_REG_C,UCSZ1);
     5ac:	a0 e4       	ldi	r26, 0x40	; 64
     5ae:	b0 e0       	ldi	r27, 0x00	; 0
     5b0:	e0 e4       	ldi	r30, 0x40	; 64
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	80 81       	ld	r24, Z
     5b6:	84 60       	ori	r24, 0x04	; 4
     5b8:	8c 93       	st	X, r24
     5ba:	0e c0       	rjmp	.+28     	; 0x5d8 <UART_Init+0x14e>
			break;
		case UART_8_BIT_DATA:
			SET_BIT(USART_CONTROL_STATUS_REG_C,UCSZ0);
     5bc:	a0 e4       	ldi	r26, 0x40	; 64
     5be:	b0 e0       	ldi	r27, 0x00	; 0
     5c0:	e0 e4       	ldi	r30, 0x40	; 64
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	80 81       	ld	r24, Z
     5c6:	82 60       	ori	r24, 0x02	; 2
     5c8:	8c 93       	st	X, r24
			SET_BIT(USART_CONTROL_STATUS_REG_C,UCSZ1);
     5ca:	a0 e4       	ldi	r26, 0x40	; 64
     5cc:	b0 e0       	ldi	r27, 0x00	; 0
     5ce:	e0 e4       	ldi	r30, 0x40	; 64
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 81       	ld	r24, Z
     5d4:	84 60       	ori	r24, 0x04	; 4
     5d6:	8c 93       	st	X, r24
			break;
	}

	switch(stop_bit){
     5d8:	8e 81       	ldd	r24, Y+6	; 0x06
     5da:	28 2f       	mov	r18, r24
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	3c 87       	std	Y+12, r19	; 0x0c
     5e0:	2b 87       	std	Y+11, r18	; 0x0b
     5e2:	8b 85       	ldd	r24, Y+11	; 0x0b
     5e4:	9c 85       	ldd	r25, Y+12	; 0x0c
     5e6:	00 97       	sbiw	r24, 0x00	; 0
     5e8:	31 f0       	breq	.+12     	; 0x5f6 <UART_Init+0x16c>
     5ea:	2b 85       	ldd	r18, Y+11	; 0x0b
     5ec:	3c 85       	ldd	r19, Y+12	; 0x0c
     5ee:	21 30       	cpi	r18, 0x01	; 1
     5f0:	31 05       	cpc	r19, r1
     5f2:	49 f0       	breq	.+18     	; 0x606 <UART_Init+0x17c>
     5f4:	0f c0       	rjmp	.+30     	; 0x614 <UART_Init+0x18a>
		case UART_1_STOP_BIT:
			CLEAR_BIT(USART_CONTROL_STATUS_REG_C,USBS);
     5f6:	a0 e4       	ldi	r26, 0x40	; 64
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e0 e4       	ldi	r30, 0x40	; 64
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	80 81       	ld	r24, Z
     600:	87 7f       	andi	r24, 0xF7	; 247
     602:	8c 93       	st	X, r24
     604:	07 c0       	rjmp	.+14     	; 0x614 <UART_Init+0x18a>
			break;
		case UART_2_STOP_BIT:
			SET_BIT(USART_CONTROL_STATUS_REG_C,USBS);
     606:	a0 e4       	ldi	r26, 0x40	; 64
     608:	b0 e0       	ldi	r27, 0x00	; 0
     60a:	e0 e4       	ldi	r30, 0x40	; 64
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	80 81       	ld	r24, Z
     610:	88 60       	ori	r24, 0x08	; 8
     612:	8c 93       	st	X, r24
			break;
	}

	switch(parity_mode){
     614:	8f 81       	ldd	r24, Y+7	; 0x07
     616:	28 2f       	mov	r18, r24
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	3a 87       	std	Y+10, r19	; 0x0a
     61c:	29 87       	std	Y+9, r18	; 0x09
     61e:	89 85       	ldd	r24, Y+9	; 0x09
     620:	9a 85       	ldd	r25, Y+10	; 0x0a
     622:	81 30       	cpi	r24, 0x01	; 1
     624:	91 05       	cpc	r25, r1
     626:	c1 f0       	breq	.+48     	; 0x658 <UART_Init+0x1ce>
     628:	29 85       	ldd	r18, Y+9	; 0x09
     62a:	3a 85       	ldd	r19, Y+10	; 0x0a
     62c:	22 30       	cpi	r18, 0x02	; 2
     62e:	31 05       	cpc	r19, r1
     630:	11 f1       	breq	.+68     	; 0x676 <UART_Init+0x1ec>
     632:	89 85       	ldd	r24, Y+9	; 0x09
     634:	9a 85       	ldd	r25, Y+10	; 0x0a
     636:	00 97       	sbiw	r24, 0x00	; 0
     638:	61 f5       	brne	.+88     	; 0x692 <UART_Init+0x208>
		case UART_NO_PARITY:
			CLEAR_BIT(USART_CONTROL_STATUS_REG_C,UPM0);
     63a:	a0 e4       	ldi	r26, 0x40	; 64
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	e0 e4       	ldi	r30, 0x40	; 64
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	80 81       	ld	r24, Z
     644:	8f 7e       	andi	r24, 0xEF	; 239
     646:	8c 93       	st	X, r24
			CLEAR_BIT(USART_CONTROL_STATUS_REG_C,UPM1);
     648:	a0 e4       	ldi	r26, 0x40	; 64
     64a:	b0 e0       	ldi	r27, 0x00	; 0
     64c:	e0 e4       	ldi	r30, 0x40	; 64
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	80 81       	ld	r24, Z
     652:	8f 7d       	andi	r24, 0xDF	; 223
     654:	8c 93       	st	X, r24
     656:	1d c0       	rjmp	.+58     	; 0x692 <UART_Init+0x208>
			break;
		case UART_EVEN_PARITY:
			CLEAR_BIT(USART_CONTROL_STATUS_REG_C,UPM0);
     658:	a0 e4       	ldi	r26, 0x40	; 64
     65a:	b0 e0       	ldi	r27, 0x00	; 0
     65c:	e0 e4       	ldi	r30, 0x40	; 64
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 81       	ld	r24, Z
     662:	8f 7e       	andi	r24, 0xEF	; 239
     664:	8c 93       	st	X, r24
			SET_BIT(USART_CONTROL_STATUS_REG_C,UPM1);
     666:	a0 e4       	ldi	r26, 0x40	; 64
     668:	b0 e0       	ldi	r27, 0x00	; 0
     66a:	e0 e4       	ldi	r30, 0x40	; 64
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	80 81       	ld	r24, Z
     670:	80 62       	ori	r24, 0x20	; 32
     672:	8c 93       	st	X, r24
     674:	0e c0       	rjmp	.+28     	; 0x692 <UART_Init+0x208>
			break;
		case UART_ODD_PARITY:
			SET_BIT(USART_CONTROL_STATUS_REG_C,UPM0);
     676:	a0 e4       	ldi	r26, 0x40	; 64
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e0 e4       	ldi	r30, 0x40	; 64
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	80 81       	ld	r24, Z
     680:	80 61       	ori	r24, 0x10	; 16
     682:	8c 93       	st	X, r24
			SET_BIT(USART_CONTROL_STATUS_REG_C,UPM1);
     684:	a0 e4       	ldi	r26, 0x40	; 64
     686:	b0 e0       	ldi	r27, 0x00	; 0
     688:	e0 e4       	ldi	r30, 0x40	; 64
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	80 81       	ld	r24, Z
     68e:	80 62       	ori	r24, 0x20	; 32
     690:	8c 93       	st	X, r24
			break;
	}


	/* Choose between using polling mode or interrupt*/
	switch(interrupt_mode){
     692:	8c 81       	ldd	r24, Y+4	; 0x04
     694:	88 2f       	mov	r24, r24
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	81 30       	cpi	r24, 0x01	; 1
     69a:	91 05       	cpc	r25, r1
     69c:	a9 f4       	brne	.+42     	; 0x6c8 <UART_Init+0x23e>
		case INTERRUPT_ON:
			SET_BIT(STATUS_REG,GLOBAL_INT_EN);
     69e:	af e5       	ldi	r26, 0x5F	; 95
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	ef e5       	ldi	r30, 0x5F	; 95
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	80 81       	ld	r24, Z
     6a8:	80 68       	ori	r24, 0x80	; 128
     6aa:	8c 93       	st	X, r24
			SET_BIT(USART_CONTROL_STATUS_REG_B,TXCIE);
     6ac:	aa e2       	ldi	r26, 0x2A	; 42
     6ae:	b0 e0       	ldi	r27, 0x00	; 0
     6b0:	ea e2       	ldi	r30, 0x2A	; 42
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	80 81       	ld	r24, Z
     6b6:	80 64       	ori	r24, 0x40	; 64
     6b8:	8c 93       	st	X, r24
			SET_BIT(USART_CONTROL_STATUS_REG_B,RXCIE);
     6ba:	aa e2       	ldi	r26, 0x2A	; 42
     6bc:	b0 e0       	ldi	r27, 0x00	; 0
     6be:	ea e2       	ldi	r30, 0x2A	; 42
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	80 81       	ld	r24, Z
     6c4:	80 68       	ori	r24, 0x80	; 128
     6c6:	8c 93       	st	X, r24
			break;
		case INTERRUPT_OFF:
			break;
	}

	if(uart_mode == SYNC){
     6c8:	89 81       	ldd	r24, Y+1	; 0x01
     6ca:	81 30       	cpi	r24, 0x01	; 1
     6cc:	41 f4       	brne	.+16     	; 0x6de <UART_Init+0x254>
		SET_BIT(USART_CONTROL_STATUS_REG_C,UMSEL);
     6ce:	a0 e4       	ldi	r26, 0x40	; 64
     6d0:	b0 e0       	ldi	r27, 0x00	; 0
     6d2:	e0 e4       	ldi	r30, 0x40	; 64
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	80 81       	ld	r24, Z
     6d8:	80 64       	ori	r24, 0x40	; 64
     6da:	8c 93       	st	X, r24
     6dc:	0a c0       	rjmp	.+20     	; 0x6f2 <UART_Init+0x268>
	}
	else if(uart_mode == ASYNC){
     6de:	89 81       	ldd	r24, Y+1	; 0x01
     6e0:	88 23       	and	r24, r24
     6e2:	39 f4       	brne	.+14     	; 0x6f2 <UART_Init+0x268>
		CLEAR_BIT(USART_CONTROL_STATUS_REG_C,UMSEL);
     6e4:	a0 e4       	ldi	r26, 0x40	; 64
     6e6:	b0 e0       	ldi	r27, 0x00	; 0
     6e8:	e0 e4       	ldi	r30, 0x40	; 64
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	80 81       	ld	r24, Z
     6ee:	8f 7b       	andi	r24, 0xBF	; 191
     6f0:	8c 93       	st	X, r24

	}


	/* Set baud rate */
	USART_BAUD_RATE_REGISTER_H = (u8)(BAUD_PRESCALE>>8);
     6f2:	e0 e4       	ldi	r30, 0x40	; 64
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	10 82       	st	Z, r1
	USART_BAUD_RATE_REGISTER_L = (u8)BAUD_PRESCALE;
     6f8:	e9 e2       	ldi	r30, 0x29	; 41
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	83 e3       	ldi	r24, 0x33	; 51
     6fe:	80 83       	st	Z, r24

}
     700:	60 96       	adiw	r28, 0x10	; 16
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	f8 94       	cli
     706:	de bf       	out	0x3e, r29	; 62
     708:	0f be       	out	0x3f, r0	; 63
     70a:	cd bf       	out	0x3d, r28	; 61
     70c:	cf 91       	pop	r28
     70e:	df 91       	pop	r29
     710:	0f 91       	pop	r16
     712:	ef 90       	pop	r14
     714:	cf 90       	pop	r12
     716:	08 95       	ret

00000718 <UART_TransmitChr>:
* \Parameters (in) : data
* \Return value:   : void
*
*******************************************************************************/

void UART_TransmitChr(u8 data){
     718:	df 93       	push	r29
     71a:	cf 93       	push	r28
     71c:	0f 92       	push	r0
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
     722:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for empty transmit buffer */
	while (! CHECK_BIT(USART_CONTROL_STATUS_REG_A,UDRE))
     724:	eb e2       	ldi	r30, 0x2B	; 43
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	80 81       	ld	r24, Z
     72a:	88 2f       	mov	r24, r24
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	80 72       	andi	r24, 0x20	; 32
     730:	90 70       	andi	r25, 0x00	; 0
     732:	00 97       	sbiw	r24, 0x00	; 0
     734:	b9 f3       	breq	.-18     	; 0x724 <UART_TransmitChr+0xc>
	;
	/* Put data into buffer, sends the data */
	USART_DATA_REG = data;
     736:	ec e2       	ldi	r30, 0x2C	; 44
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	89 81       	ldd	r24, Y+1	; 0x01
     73c:	80 83       	st	Z, r24

}
     73e:	0f 90       	pop	r0
     740:	cf 91       	pop	r28
     742:	df 91       	pop	r29
     744:	08 95       	ret

00000746 <UART_TransmitStr>:
* \Return value:   : void
*
*******************************************************************************/

void UART_TransmitStr(u8 *str)
{
     746:	df 93       	push	r29
     748:	cf 93       	push	r28
     74a:	00 d0       	rcall	.+0      	; 0x74c <UART_TransmitStr+0x6>
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
     750:	9a 83       	std	Y+2, r25	; 0x02
     752:	89 83       	std	Y+1, r24	; 0x01
     754:	0a c0       	rjmp	.+20     	; 0x76a <UART_TransmitStr+0x24>
	/* Wait for empty transmit buffer */
	while (*str != '\0')
	{
		UART_TransmitChr(*str);
     756:	e9 81       	ldd	r30, Y+1	; 0x01
     758:	fa 81       	ldd	r31, Y+2	; 0x02
     75a:	80 81       	ld	r24, Z
     75c:	0e 94 8c 03 	call	0x718	; 0x718 <UART_TransmitChr>
		str++;
     760:	89 81       	ldd	r24, Y+1	; 0x01
     762:	9a 81       	ldd	r25, Y+2	; 0x02
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	9a 83       	std	Y+2, r25	; 0x02
     768:	89 83       	std	Y+1, r24	; 0x01
*******************************************************************************/

void UART_TransmitStr(u8 *str)
{
	/* Wait for empty transmit buffer */
	while (*str != '\0')
     76a:	e9 81       	ldd	r30, Y+1	; 0x01
     76c:	fa 81       	ldd	r31, Y+2	; 0x02
     76e:	80 81       	ld	r24, Z
     770:	88 23       	and	r24, r24
     772:	89 f7       	brne	.-30     	; 0x756 <UART_TransmitStr+0x10>
	{
		UART_TransmitChr(*str);
		str++;
	}
}
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	cf 91       	pop	r28
     77a:	df 91       	pop	r29
     77c:	08 95       	ret

0000077e <UART_ReceiveChr>:
* \Parameters (in) : void
* \Return value:   : u8
*
*******************************************************************************/

u8 UART_ReceiveChr(void){
     77e:	df 93       	push	r29
     780:	cf 93       	push	r28
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while (! CHECK_BIT(USART_CONTROL_STATUS_REG_A,RXC))
     786:	eb e2       	ldi	r30, 0x2B	; 43
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	88 23       	and	r24, r24
     78e:	dc f7       	brge	.-10     	; 0x786 <UART_ReceiveChr+0x8>
	;
	/* Get and return received data from buffer */
	return USART_DATA_REG;
     790:	ec e2       	ldi	r30, 0x2C	; 44
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	80 81       	ld	r24, Z

}
     796:	cf 91       	pop	r28
     798:	df 91       	pop	r29
     79a:	08 95       	ret

0000079c <SPI_vInitMaster>:
#include <avr/io.h>
#include "Spi.h"
#include "Std_Types.h"

void SPI_vInitMaster (void)
{
     79c:	df 93       	push	r29
     79e:	cf 93       	push	r28
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
	DDRB |=(1<<SPI_MOSI) |(1<<SPI_SS)|(1<<SPI_SCK);//Set the port B mosi(master out slave in ) ,port B ss(slave select),sck(spi clock)  pins as output
     7a4:	a7 e3       	ldi	r26, 0x37	; 55
     7a6:	b0 e0       	ldi	r27, 0x00	; 0
     7a8:	e7 e3       	ldi	r30, 0x37	; 55
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	80 81       	ld	r24, Z
     7ae:	80 6b       	ori	r24, 0xB0	; 176
     7b0:	8c 93       	st	X, r24
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//Enable the SPI,master mode ,Set the clock speed to F/16
     7b2:	ad e2       	ldi	r26, 0x2D	; 45
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ed e2       	ldi	r30, 0x2D	; 45
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 81       	ld	r24, Z
     7bc:	81 65       	ori	r24, 0x51	; 81
     7be:	8c 93       	st	X, r24
}
     7c0:	cf 91       	pop	r28
     7c2:	df 91       	pop	r29
     7c4:	08 95       	ret

000007c6 <SPI_vInitSlave>:

void SPI_vInitSlave (void)
{
     7c6:	df 93       	push	r29
     7c8:	cf 93       	push	r28
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
     7ce:	a7 e3       	ldi	r26, 0x37	; 55
     7d0:	b0 e0       	ldi	r27, 0x00	; 0
     7d2:	e7 e3       	ldi	r30, 0x37	; 55
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
     7d6:	80 81       	ld	r24, Z
     7d8:	80 64       	ori	r24, 0x40	; 64
     7da:	8c 93       	st	X, r24
	SPCR |= (1<<SPE);//Enable the SPI
     7dc:	ad e2       	ldi	r26, 0x2D	; 45
     7de:	b0 e0       	ldi	r27, 0x00	; 0
     7e0:	ed e2       	ldi	r30, 0x2D	; 45
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	80 81       	ld	r24, Z
     7e6:	80 64       	ori	r24, 0x40	; 64
     7e8:	8c 93       	st	X, r24
}
     7ea:	cf 91       	pop	r28
     7ec:	df 91       	pop	r29
     7ee:	08 95       	ret

000007f0 <SPI_ui8TransmitRecieve>:

u8 SPI_ui8TransmitRecieve (u8 data)
{
     7f0:	df 93       	push	r29
     7f2:	cf 93       	push	r28
     7f4:	0f 92       	push	r0
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
     7fa:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;//move the given data to SPI Data register
     7fc:	ef e2       	ldi	r30, 0x2F	; 47
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	80 83       	st	Z, r24

	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
     804:	ee e2       	ldi	r30, 0x2E	; 46
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	80 81       	ld	r24, Z
     80a:	88 1f       	adc	r24, r24
     80c:	88 27       	eor	r24, r24
     80e:	88 1f       	adc	r24, r24
     810:	88 2f       	mov	r24, r24
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	90 70       	andi	r25, 0x00	; 0
     816:	00 97       	sbiw	r24, 0x00	; 0
     818:	a9 f3       	breq	.-22     	; 0x804 <SPI_ui8TransmitRecieve+0x14>
	;									//SPI flag is set to one if the transmission is done

	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
     81a:	ef e2       	ldi	r30, 0x2F	; 47
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	80 81       	ld	r24, Z
}
     820:	0f 90       	pop	r0
     822:	cf 91       	pop	r28
     824:	df 91       	pop	r29
     826:	08 95       	ret

00000828 <Global_Interrupt_En>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : void
* \Return value:   : None
*******************************************************************************/
void Global_Interrupt_En(void){
     828:	df 93       	push	r29
     82a:	cf 93       	push	r28
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(STATUS_REG,GLOBAL_INT_EN);
     830:	af e5       	ldi	r26, 0x5F	; 95
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	ef e5       	ldi	r30, 0x5F	; 95
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	80 81       	ld	r24, Z
     83a:	80 68       	ori	r24, 0x80	; 128
     83c:	8c 93       	st	X, r24
}
     83e:	cf 91       	pop	r28
     840:	df 91       	pop	r29
     842:	08 95       	ret

00000844 <Global_Interrupt_Dis>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : void
* \Return value:   : None
*******************************************************************************/
void Global_Interrupt_Dis(void){
     844:	df 93       	push	r29
     846:	cf 93       	push	r28
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(STATUS_REG,GLOBAL_INT_EN);
     84c:	af e5       	ldi	r26, 0x5F	; 95
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	ef e5       	ldi	r30, 0x5F	; 95
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	80 81       	ld	r24, Z
     856:	8f 77       	andi	r24, 0x7F	; 127
     858:	8c 93       	st	X, r24
}
     85a:	cf 91       	pop	r28
     85c:	df 91       	pop	r29
     85e:	08 95       	ret

00000860 <Ext_Interrupt_Enable>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : interruptID
* \Return value:   : None
*******************************************************************************/
void Ext_Interrupt_Enable(Ext_InterruptID interruptID){
     860:	df 93       	push	r29
     862:	cf 93       	push	r28
     864:	00 d0       	rcall	.+0      	; 0x866 <Ext_Interrupt_Enable+0x6>
     866:	0f 92       	push	r0
     868:	cd b7       	in	r28, 0x3d	; 61
     86a:	de b7       	in	r29, 0x3e	; 62
     86c:	89 83       	std	Y+1, r24	; 0x01
	switch(interruptID){
     86e:	89 81       	ldd	r24, Y+1	; 0x01
     870:	28 2f       	mov	r18, r24
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	3b 83       	std	Y+3, r19	; 0x03
     876:	2a 83       	std	Y+2, r18	; 0x02
     878:	8a 81       	ldd	r24, Y+2	; 0x02
     87a:	9b 81       	ldd	r25, Y+3	; 0x03
     87c:	81 30       	cpi	r24, 0x01	; 1
     87e:	91 05       	cpc	r25, r1
     880:	89 f0       	breq	.+34     	; 0x8a4 <Ext_Interrupt_Enable+0x44>
     882:	2a 81       	ldd	r18, Y+2	; 0x02
     884:	3b 81       	ldd	r19, Y+3	; 0x03
     886:	22 30       	cpi	r18, 0x02	; 2
     888:	31 05       	cpc	r19, r1
     88a:	a1 f0       	breq	.+40     	; 0x8b4 <Ext_Interrupt_Enable+0x54>
     88c:	8a 81       	ldd	r24, Y+2	; 0x02
     88e:	9b 81       	ldd	r25, Y+3	; 0x03
     890:	00 97       	sbiw	r24, 0x00	; 0
     892:	b9 f4       	brne	.+46     	; 0x8c2 <Ext_Interrupt_Enable+0x62>
	case INTERRUPT_0:
		SET_BIT(GENERAL_INTERRUPT_CONTROL_REG,INTERRUPT0);
     894:	ab e5       	ldi	r26, 0x5B	; 91
     896:	b0 e0       	ldi	r27, 0x00	; 0
     898:	eb e5       	ldi	r30, 0x5B	; 91
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	80 81       	ld	r24, Z
     89e:	80 64       	ori	r24, 0x40	; 64
     8a0:	8c 93       	st	X, r24
     8a2:	0f c0       	rjmp	.+30     	; 0x8c2 <Ext_Interrupt_Enable+0x62>
		break;
	case INTERRUPT_1:
		SET_BIT(GENERAL_INTERRUPT_CONTROL_REG,INTERRUPT1);
     8a4:	ab e5       	ldi	r26, 0x5B	; 91
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	eb e5       	ldi	r30, 0x5B	; 91
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 81       	ld	r24, Z
     8ae:	80 68       	ori	r24, 0x80	; 128
     8b0:	8c 93       	st	X, r24
     8b2:	07 c0       	rjmp	.+14     	; 0x8c2 <Ext_Interrupt_Enable+0x62>
		break;
	case INTERRUPT_2:
		SET_BIT(GENERAL_INTERRUPT_CONTROL_REG,INTERRUPT2);
     8b4:	ab e5       	ldi	r26, 0x5B	; 91
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	eb e5       	ldi	r30, 0x5B	; 91
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	80 81       	ld	r24, Z
     8be:	80 62       	ori	r24, 0x20	; 32
     8c0:	8c 93       	st	X, r24
		break;
	}
}
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	cf 91       	pop	r28
     8ca:	df 91       	pop	r29
     8cc:	08 95       	ret

000008ce <Ext_Interrupt_Disable>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : interruptID
* \Return value:   : None
*******************************************************************************/
void Ext_Interrupt_Disable(Ext_InterruptID interruptID){
     8ce:	df 93       	push	r29
     8d0:	cf 93       	push	r28
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <Ext_Interrupt_Disable+0x6>
     8d4:	0f 92       	push	r0
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	89 83       	std	Y+1, r24	; 0x01
	switch(interruptID){
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
     8de:	28 2f       	mov	r18, r24
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	3b 83       	std	Y+3, r19	; 0x03
     8e4:	2a 83       	std	Y+2, r18	; 0x02
     8e6:	8a 81       	ldd	r24, Y+2	; 0x02
     8e8:	9b 81       	ldd	r25, Y+3	; 0x03
     8ea:	81 30       	cpi	r24, 0x01	; 1
     8ec:	91 05       	cpc	r25, r1
     8ee:	89 f0       	breq	.+34     	; 0x912 <Ext_Interrupt_Disable+0x44>
     8f0:	2a 81       	ldd	r18, Y+2	; 0x02
     8f2:	3b 81       	ldd	r19, Y+3	; 0x03
     8f4:	22 30       	cpi	r18, 0x02	; 2
     8f6:	31 05       	cpc	r19, r1
     8f8:	a1 f0       	breq	.+40     	; 0x922 <Ext_Interrupt_Disable+0x54>
     8fa:	8a 81       	ldd	r24, Y+2	; 0x02
     8fc:	9b 81       	ldd	r25, Y+3	; 0x03
     8fe:	00 97       	sbiw	r24, 0x00	; 0
     900:	b9 f4       	brne	.+46     	; 0x930 <Ext_Interrupt_Disable+0x62>
	case INTERRUPT_0:
		CLEAR_BIT(GENERAL_INTERRUPT_CONTROL_REG,INTERRUPT0);
     902:	ab e5       	ldi	r26, 0x5B	; 91
     904:	b0 e0       	ldi	r27, 0x00	; 0
     906:	eb e5       	ldi	r30, 0x5B	; 91
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	80 81       	ld	r24, Z
     90c:	8f 7b       	andi	r24, 0xBF	; 191
     90e:	8c 93       	st	X, r24
     910:	0f c0       	rjmp	.+30     	; 0x930 <Ext_Interrupt_Disable+0x62>
		break;
	case INTERRUPT_1:
		CLEAR_BIT(GENERAL_INTERRUPT_CONTROL_REG,INTERRUPT1);
     912:	ab e5       	ldi	r26, 0x5B	; 91
     914:	b0 e0       	ldi	r27, 0x00	; 0
     916:	eb e5       	ldi	r30, 0x5B	; 91
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	8f 77       	andi	r24, 0x7F	; 127
     91e:	8c 93       	st	X, r24
     920:	07 c0       	rjmp	.+14     	; 0x930 <Ext_Interrupt_Disable+0x62>
		break;
	case INTERRUPT_2:
		CLEAR_BIT(GENERAL_INTERRUPT_CONTROL_REG,INTERRUPT2);
     922:	ab e5       	ldi	r26, 0x5B	; 91
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	eb e5       	ldi	r30, 0x5B	; 91
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	80 81       	ld	r24, Z
     92c:	8f 7d       	andi	r24, 0xDF	; 223
     92e:	8c 93       	st	X, r24
		break;
	}
}
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	cf 91       	pop	r28
     938:	df 91       	pop	r29
     93a:	08 95       	ret

0000093c <Ext_Interrupt_Config>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : interruptID mode
* \Return value:   : None
*******************************************************************************/

void Ext_Interrupt_Config(Ext_InterruptID interruptID,Ext_Interrupt_Mode mode){
     93c:	df 93       	push	r29
     93e:	cf 93       	push	r28
     940:	00 d0       	rcall	.+0      	; 0x942 <Ext_Interrupt_Config+0x6>
     942:	00 d0       	rcall	.+0      	; 0x944 <Ext_Interrupt_Config+0x8>
     944:	cd b7       	in	r28, 0x3d	; 61
     946:	de b7       	in	r29, 0x3e	; 62
     948:	89 83       	std	Y+1, r24	; 0x01
     94a:	6a 83       	std	Y+2, r22	; 0x02
	switch(interruptID){
     94c:	89 81       	ldd	r24, Y+1	; 0x01
     94e:	28 2f       	mov	r18, r24
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	3c 83       	std	Y+4, r19	; 0x04
     954:	2b 83       	std	Y+3, r18	; 0x03
     956:	8b 81       	ldd	r24, Y+3	; 0x03
     958:	9c 81       	ldd	r25, Y+4	; 0x04
     95a:	81 30       	cpi	r24, 0x01	; 1
     95c:	91 05       	cpc	r25, r1
     95e:	09 f4       	brne	.+2      	; 0x962 <Ext_Interrupt_Config+0x26>
     960:	54 c0       	rjmp	.+168    	; 0xa0a <Ext_Interrupt_Config+0xce>
     962:	2b 81       	ldd	r18, Y+3	; 0x03
     964:	3c 81       	ldd	r19, Y+4	; 0x04
     966:	22 30       	cpi	r18, 0x02	; 2
     968:	31 05       	cpc	r19, r1
     96a:	09 f4       	brne	.+2      	; 0x96e <Ext_Interrupt_Config+0x32>
     96c:	96 c0       	rjmp	.+300    	; 0xa9a <Ext_Interrupt_Config+0x15e>
     96e:	8b 81       	ldd	r24, Y+3	; 0x03
     970:	9c 81       	ldd	r25, Y+4	; 0x04
     972:	00 97       	sbiw	r24, 0x00	; 0
     974:	09 f0       	breq	.+2      	; 0x978 <Ext_Interrupt_Config+0x3c>
     976:	a6 c0       	rjmp	.+332    	; 0xac4 <Ext_Interrupt_Config+0x188>
			case INTERRUPT_0:
				if(mode==LOW_LEVEL){
     978:	8a 81       	ldd	r24, Y+2	; 0x02
     97a:	83 30       	cpi	r24, 0x03	; 3
     97c:	79 f4       	brne	.+30     	; 0x99c <Ext_Interrupt_Config+0x60>
					CLEAR_BIT(MCU_CONTROL_REG,ISC00);
     97e:	a5 e5       	ldi	r26, 0x55	; 85
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	e5 e5       	ldi	r30, 0x55	; 85
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 81       	ld	r24, Z
     988:	8e 7f       	andi	r24, 0xFE	; 254
     98a:	8c 93       	st	X, r24
					CLEAR_BIT(MCU_CONTROL_REG,ISC01);
     98c:	a5 e5       	ldi	r26, 0x55	; 85
     98e:	b0 e0       	ldi	r27, 0x00	; 0
     990:	e5 e5       	ldi	r30, 0x55	; 85
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	80 81       	ld	r24, Z
     996:	8d 7f       	andi	r24, 0xFD	; 253
     998:	8c 93       	st	X, r24
     99a:	94 c0       	rjmp	.+296    	; 0xac4 <Ext_Interrupt_Config+0x188>
				}
				else if(mode==FALLING_EDGE){
     99c:	8a 81       	ldd	r24, Y+2	; 0x02
     99e:	88 23       	and	r24, r24
     9a0:	79 f4       	brne	.+30     	; 0x9c0 <Ext_Interrupt_Config+0x84>
					CLEAR_BIT(MCU_CONTROL_REG,ISC00);
     9a2:	a5 e5       	ldi	r26, 0x55	; 85
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	e5 e5       	ldi	r30, 0x55	; 85
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	8e 7f       	andi	r24, 0xFE	; 254
     9ae:	8c 93       	st	X, r24
					SET_BIT(MCU_CONTROL_REG,ISC01);
     9b0:	a5 e5       	ldi	r26, 0x55	; 85
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	e5 e5       	ldi	r30, 0x55	; 85
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	80 81       	ld	r24, Z
     9ba:	82 60       	ori	r24, 0x02	; 2
     9bc:	8c 93       	st	X, r24
     9be:	82 c0       	rjmp	.+260    	; 0xac4 <Ext_Interrupt_Config+0x188>
				}
				else if(mode==RISING_EDGE){
     9c0:	8a 81       	ldd	r24, Y+2	; 0x02
     9c2:	82 30       	cpi	r24, 0x02	; 2
     9c4:	79 f4       	brne	.+30     	; 0x9e4 <Ext_Interrupt_Config+0xa8>
					SET_BIT(MCU_CONTROL_REG,ISC00);
     9c6:	a5 e5       	ldi	r26, 0x55	; 85
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e5 e5       	ldi	r30, 0x55	; 85
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	80 81       	ld	r24, Z
     9d0:	81 60       	ori	r24, 0x01	; 1
     9d2:	8c 93       	st	X, r24
					SET_BIT(MCU_CONTROL_REG,ISC01);
     9d4:	a5 e5       	ldi	r26, 0x55	; 85
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	e5 e5       	ldi	r30, 0x55	; 85
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	80 81       	ld	r24, Z
     9de:	82 60       	ori	r24, 0x02	; 2
     9e0:	8c 93       	st	X, r24
     9e2:	70 c0       	rjmp	.+224    	; 0xac4 <Ext_Interrupt_Config+0x188>
				}
				else if(mode==ANY_CHANGE){
     9e4:	8a 81       	ldd	r24, Y+2	; 0x02
     9e6:	81 30       	cpi	r24, 0x01	; 1
     9e8:	09 f0       	breq	.+2      	; 0x9ec <Ext_Interrupt_Config+0xb0>
     9ea:	6c c0       	rjmp	.+216    	; 0xac4 <Ext_Interrupt_Config+0x188>
					SET_BIT(MCU_CONTROL_REG,ISC00);
     9ec:	a5 e5       	ldi	r26, 0x55	; 85
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	e5 e5       	ldi	r30, 0x55	; 85
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	81 60       	ori	r24, 0x01	; 1
     9f8:	8c 93       	st	X, r24
					CLEAR_BIT(MCU_CONTROL_REG,ISC01);
     9fa:	a5 e5       	ldi	r26, 0x55	; 85
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e5 e5       	ldi	r30, 0x55	; 85
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	8d 7f       	andi	r24, 0xFD	; 253
     a06:	8c 93       	st	X, r24
     a08:	5d c0       	rjmp	.+186    	; 0xac4 <Ext_Interrupt_Config+0x188>
				}
				break;

			case INTERRUPT_1:
				if(mode==LOW_LEVEL){
     a0a:	8a 81       	ldd	r24, Y+2	; 0x02
     a0c:	83 30       	cpi	r24, 0x03	; 3
     a0e:	79 f4       	brne	.+30     	; 0xa2e <Ext_Interrupt_Config+0xf2>
					CLEAR_BIT(MCU_CONTROL_REG,ISC10);
     a10:	a5 e5       	ldi	r26, 0x55	; 85
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e5 e5       	ldi	r30, 0x55	; 85
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	8b 7f       	andi	r24, 0xFB	; 251
     a1c:	8c 93       	st	X, r24
					CLEAR_BIT(MCU_CONTROL_REG,ISC11);
     a1e:	a5 e5       	ldi	r26, 0x55	; 85
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	e5 e5       	ldi	r30, 0x55	; 85
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	87 7f       	andi	r24, 0xF7	; 247
     a2a:	8c 93       	st	X, r24
     a2c:	4b c0       	rjmp	.+150    	; 0xac4 <Ext_Interrupt_Config+0x188>
				}
				else if(mode==FALLING_EDGE){
     a2e:	8a 81       	ldd	r24, Y+2	; 0x02
     a30:	88 23       	and	r24, r24
     a32:	79 f4       	brne	.+30     	; 0xa52 <Ext_Interrupt_Config+0x116>
					CLEAR_BIT(MCU_CONTROL_REG,ISC10);
     a34:	a5 e5       	ldi	r26, 0x55	; 85
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	e5 e5       	ldi	r30, 0x55	; 85
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	80 81       	ld	r24, Z
     a3e:	8b 7f       	andi	r24, 0xFB	; 251
     a40:	8c 93       	st	X, r24
					SET_BIT(MCU_CONTROL_REG,ISC11);
     a42:	a5 e5       	ldi	r26, 0x55	; 85
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e5 e5       	ldi	r30, 0x55	; 85
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	88 60       	ori	r24, 0x08	; 8
     a4e:	8c 93       	st	X, r24
     a50:	39 c0       	rjmp	.+114    	; 0xac4 <Ext_Interrupt_Config+0x188>
				}
				else if(mode==RISING_EDGE){
     a52:	8a 81       	ldd	r24, Y+2	; 0x02
     a54:	82 30       	cpi	r24, 0x02	; 2
     a56:	79 f4       	brne	.+30     	; 0xa76 <Ext_Interrupt_Config+0x13a>
					SET_BIT(MCU_CONTROL_REG,ISC10);
     a58:	a5 e5       	ldi	r26, 0x55	; 85
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	e5 e5       	ldi	r30, 0x55	; 85
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z
     a62:	84 60       	ori	r24, 0x04	; 4
     a64:	8c 93       	st	X, r24
					SET_BIT(MCU_CONTROL_REG,ISC11);
     a66:	a5 e5       	ldi	r26, 0x55	; 85
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e5 e5       	ldi	r30, 0x55	; 85
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	88 60       	ori	r24, 0x08	; 8
     a72:	8c 93       	st	X, r24
     a74:	27 c0       	rjmp	.+78     	; 0xac4 <Ext_Interrupt_Config+0x188>
				}
				else if(mode==ANY_CHANGE){
     a76:	8a 81       	ldd	r24, Y+2	; 0x02
     a78:	81 30       	cpi	r24, 0x01	; 1
     a7a:	21 f5       	brne	.+72     	; 0xac4 <Ext_Interrupt_Config+0x188>
					SET_BIT(MCU_CONTROL_REG,ISC10);
     a7c:	a5 e5       	ldi	r26, 0x55	; 85
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	e5 e5       	ldi	r30, 0x55	; 85
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	84 60       	ori	r24, 0x04	; 4
     a88:	8c 93       	st	X, r24
					CLEAR_BIT(MCU_CONTROL_REG,ISC11);
     a8a:	a5 e5       	ldi	r26, 0x55	; 85
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e5 e5       	ldi	r30, 0x55	; 85
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	80 81       	ld	r24, Z
     a94:	87 7f       	andi	r24, 0xF7	; 247
     a96:	8c 93       	st	X, r24
     a98:	15 c0       	rjmp	.+42     	; 0xac4 <Ext_Interrupt_Config+0x188>
				}
				break;

			case INTERRUPT_2:
				if(mode==FALLING_EDGE){
     a9a:	8a 81       	ldd	r24, Y+2	; 0x02
     a9c:	88 23       	and	r24, r24
     a9e:	41 f4       	brne	.+16     	; 0xab0 <Ext_Interrupt_Config+0x174>
					CLEAR_BIT(MCU_CONTROL_REG,ISC2);
     aa0:	a5 e5       	ldi	r26, 0x55	; 85
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	e5 e5       	ldi	r30, 0x55	; 85
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	80 81       	ld	r24, Z
     aaa:	8f 7b       	andi	r24, 0xBF	; 191
     aac:	8c 93       	st	X, r24
     aae:	0a c0       	rjmp	.+20     	; 0xac4 <Ext_Interrupt_Config+0x188>
				}
				else if(mode==RISING_EDGE){
     ab0:	8a 81       	ldd	r24, Y+2	; 0x02
     ab2:	82 30       	cpi	r24, 0x02	; 2
     ab4:	39 f4       	brne	.+14     	; 0xac4 <Ext_Interrupt_Config+0x188>
					SET_BIT(MCU_CONTROL_REG,ISC2);
     ab6:	a5 e5       	ldi	r26, 0x55	; 85
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	e5 e5       	ldi	r30, 0x55	; 85
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	80 81       	ld	r24, Z
     ac0:	80 64       	ori	r24, 0x40	; 64
     ac2:	8c 93       	st	X, r24
				break;
			}



}
     ac4:	0f 90       	pop	r0
     ac6:	0f 90       	pop	r0
     ac8:	0f 90       	pop	r0
     aca:	0f 90       	pop	r0
     acc:	cf 91       	pop	r28
     ace:	df 91       	pop	r29
     ad0:	08 95       	ret

00000ad2 <EEPROM_Write>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : address data
* \Return value:   : None
*******************************************************************************/

void EEPROM_Write(u16 address, u8 data){
     ad2:	df 93       	push	r29
     ad4:	cf 93       	push	r28
     ad6:	00 d0       	rcall	.+0      	; 0xad8 <EEPROM_Write+0x6>
     ad8:	0f 92       	push	r0
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
     ade:	9a 83       	std	Y+2, r25	; 0x02
     ae0:	89 83       	std	Y+1, r24	; 0x01
     ae2:	6b 83       	std	Y+3, r22	; 0x03

	/* Wait for completion of previous write */
	while(CHECK_BIT(EEPROM_CONTROL_REG,EEWE))
     ae4:	ec e3       	ldi	r30, 0x3C	; 60
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	80 81       	ld	r24, Z
     aea:	88 2f       	mov	r24, r24
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	82 70       	andi	r24, 0x02	; 2
     af0:	90 70       	andi	r25, 0x00	; 0
     af2:	00 97       	sbiw	r24, 0x00	; 0
     af4:	b9 f7       	brne	.-18     	; 0xae4 <EEPROM_Write+0x12>
	;
	/* Set up address and data registers */
	EEPROM_ADDRESS_REG_L = address;
     af6:	ee e3       	ldi	r30, 0x3E	; 62
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	89 81       	ldd	r24, Y+1	; 0x01
     afc:	80 83       	st	Z, r24
	EEPROM_ADDRESS_REG_H = address>>8;
     afe:	ef e3       	ldi	r30, 0x3F	; 63
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	9a 81       	ldd	r25, Y+2	; 0x02
     b06:	89 2f       	mov	r24, r25
     b08:	99 27       	eor	r25, r25
     b0a:	80 83       	st	Z, r24

	EEPROM_DATA_REG = data;
     b0c:	ed e3       	ldi	r30, 0x3D	; 61
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	8b 81       	ldd	r24, Y+3	; 0x03
     b12:	80 83       	st	Z, r24
	/* Write logical one to EEMWE */
	SET_BIT(EEPROM_CONTROL_REG,EEMWE);
     b14:	ac e3       	ldi	r26, 0x3C	; 60
     b16:	b0 e0       	ldi	r27, 0x00	; 0
     b18:	ec e3       	ldi	r30, 0x3C	; 60
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	80 81       	ld	r24, Z
     b1e:	84 60       	ori	r24, 0x04	; 4
     b20:	8c 93       	st	X, r24
	/* Start eeprom write by setting EEWE */
	SET_BIT(EEPROM_CONTROL_REG,EEWE);
     b22:	ac e3       	ldi	r26, 0x3C	; 60
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	ec e3       	ldi	r30, 0x3C	; 60
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	80 81       	ld	r24, Z
     b2c:	82 60       	ori	r24, 0x02	; 2
     b2e:	8c 93       	st	X, r24

}
     b30:	0f 90       	pop	r0
     b32:	0f 90       	pop	r0
     b34:	0f 90       	pop	r0
     b36:	cf 91       	pop	r28
     b38:	df 91       	pop	r29
     b3a:	08 95       	ret

00000b3c <EEPROM_Read>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : address
* \Return value:   : None
*******************************************************************************/
u8 EEPROM_Read(u16 address){
     b3c:	df 93       	push	r29
     b3e:	cf 93       	push	r28
     b40:	00 d0       	rcall	.+0      	; 0xb42 <EEPROM_Read+0x6>
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	9a 83       	std	Y+2, r25	; 0x02
     b48:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for completion of previous write */
	while(CHECK_BIT(EEPROM_CONTROL_REG,EEWE))
     b4a:	ec e3       	ldi	r30, 0x3C	; 60
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	88 2f       	mov	r24, r24
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	82 70       	andi	r24, 0x02	; 2
     b56:	90 70       	andi	r25, 0x00	; 0
     b58:	00 97       	sbiw	r24, 0x00	; 0
     b5a:	b9 f7       	brne	.-18     	; 0xb4a <EEPROM_Read+0xe>
		;
	/* Set up address register */
	EEPROM_ADDRESS_REG_L = address;
     b5c:	ee e3       	ldi	r30, 0x3E	; 62
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	80 83       	st	Z, r24
	EEPROM_ADDRESS_REG_H = address>>8;
     b64:	ef e3       	ldi	r30, 0x3F	; 63
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	9a 81       	ldd	r25, Y+2	; 0x02
     b6c:	89 2f       	mov	r24, r25
     b6e:	99 27       	eor	r25, r25
     b70:	80 83       	st	Z, r24
	/* Start eeprom read by writing EERE */
	SET_BIT(EEPROM_CONTROL_REG,EERE);
     b72:	ac e3       	ldi	r26, 0x3C	; 60
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	ec e3       	ldi	r30, 0x3C	; 60
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	81 60       	ori	r24, 0x01	; 1
     b7e:	8c 93       	st	X, r24
	/* Return data from data register */
	return EEPROM_DATA_REG;
     b80:	ed e3       	ldi	r30, 0x3D	; 61
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z

}
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	cf 91       	pop	r28
     b8c:	df 91       	pop	r29
     b8e:	08 95       	ret

00000b90 <Dio_CONFIGChannel>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : portID channelID ChannelDir
* \Return value:   : None
*******************************************************************************/
void Dio_CONFIGChannel(DIO_PortID portID, DIO_ChannelID channelID, DIO_DirectionType ChannelDir){
     b90:	df 93       	push	r29
     b92:	cf 93       	push	r28
     b94:	00 d0       	rcall	.+0      	; 0xb96 <Dio_CONFIGChannel+0x6>
     b96:	00 d0       	rcall	.+0      	; 0xb98 <Dio_CONFIGChannel+0x8>
     b98:	0f 92       	push	r0
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	89 83       	std	Y+1, r24	; 0x01
     ba0:	6a 83       	std	Y+2, r22	; 0x02
     ba2:	4b 83       	std	Y+3, r20	; 0x03
	switch(portID){
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	28 2f       	mov	r18, r24
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	3d 83       	std	Y+5, r19	; 0x05
     bac:	2c 83       	std	Y+4, r18	; 0x04
     bae:	8c 81       	ldd	r24, Y+4	; 0x04
     bb0:	9d 81       	ldd	r25, Y+5	; 0x05
     bb2:	81 30       	cpi	r24, 0x01	; 1
     bb4:	91 05       	cpc	r25, r1
     bb6:	09 f4       	brne	.+2      	; 0xbba <Dio_CONFIGChannel+0x2a>
     bb8:	43 c0       	rjmp	.+134    	; 0xc40 <Dio_CONFIGChannel+0xb0>
     bba:	2c 81       	ldd	r18, Y+4	; 0x04
     bbc:	3d 81       	ldd	r19, Y+5	; 0x05
     bbe:	22 30       	cpi	r18, 0x02	; 2
     bc0:	31 05       	cpc	r19, r1
     bc2:	2c f4       	brge	.+10     	; 0xbce <Dio_CONFIGChannel+0x3e>
     bc4:	8c 81       	ldd	r24, Y+4	; 0x04
     bc6:	9d 81       	ldd	r25, Y+5	; 0x05
     bc8:	00 97       	sbiw	r24, 0x00	; 0
     bca:	71 f0       	breq	.+28     	; 0xbe8 <Dio_CONFIGChannel+0x58>
     bcc:	bc c0       	rjmp	.+376    	; 0xd46 <Dio_CONFIGChannel+0x1b6>
     bce:	2c 81       	ldd	r18, Y+4	; 0x04
     bd0:	3d 81       	ldd	r19, Y+5	; 0x05
     bd2:	22 30       	cpi	r18, 0x02	; 2
     bd4:	31 05       	cpc	r19, r1
     bd6:	09 f4       	brne	.+2      	; 0xbda <Dio_CONFIGChannel+0x4a>
     bd8:	5f c0       	rjmp	.+190    	; 0xc98 <Dio_CONFIGChannel+0x108>
     bda:	8c 81       	ldd	r24, Y+4	; 0x04
     bdc:	9d 81       	ldd	r25, Y+5	; 0x05
     bde:	83 30       	cpi	r24, 0x03	; 3
     be0:	91 05       	cpc	r25, r1
     be2:	09 f4       	brne	.+2      	; 0xbe6 <Dio_CONFIGChannel+0x56>
     be4:	85 c0       	rjmp	.+266    	; 0xcf0 <Dio_CONFIGChannel+0x160>
     be6:	af c0       	rjmp	.+350    	; 0xd46 <Dio_CONFIGChannel+0x1b6>
		case DIO_PORTA:
			if(ChannelDir==OUTPUT){
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	a1 f4       	brne	.+40     	; 0xc16 <Dio_CONFIGChannel+0x86>
				SET_BIT(DIO_PORTA_DDR,channelID);
     bee:	aa e3       	ldi	r26, 0x3A	; 58
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	ea e3       	ldi	r30, 0x3A	; 58
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	48 2f       	mov	r20, r24
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	28 2f       	mov	r18, r24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	02 2e       	mov	r0, r18
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <Dio_CONFIGChannel+0x7c>
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	0a 94       	dec	r0
     c0e:	e2 f7       	brpl	.-8      	; 0xc08 <Dio_CONFIGChannel+0x78>
     c10:	84 2b       	or	r24, r20
     c12:	8c 93       	st	X, r24
     c14:	98 c0       	rjmp	.+304    	; 0xd46 <Dio_CONFIGChannel+0x1b6>
			}
			else{
				CLEAR_BIT(DIO_PORTA_DDR,channelID);
     c16:	aa e3       	ldi	r26, 0x3A	; 58
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	ea e3       	ldi	r30, 0x3A	; 58
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	48 2f       	mov	r20, r24
     c22:	8a 81       	ldd	r24, Y+2	; 0x02
     c24:	28 2f       	mov	r18, r24
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	02 2e       	mov	r0, r18
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <Dio_CONFIGChannel+0xa4>
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	0a 94       	dec	r0
     c36:	e2 f7       	brpl	.-8      	; 0xc30 <Dio_CONFIGChannel+0xa0>
     c38:	80 95       	com	r24
     c3a:	84 23       	and	r24, r20
     c3c:	8c 93       	st	X, r24
     c3e:	83 c0       	rjmp	.+262    	; 0xd46 <Dio_CONFIGChannel+0x1b6>
			}
			break;
		case DIO_PORTB:
			if(ChannelDir==OUTPUT){
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	81 30       	cpi	r24, 0x01	; 1
     c44:	a1 f4       	brne	.+40     	; 0xc6e <Dio_CONFIGChannel+0xde>
				SET_BIT(DIO_PORTB_DDR,channelID);
     c46:	a7 e3       	ldi	r26, 0x37	; 55
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e7 e3       	ldi	r30, 0x37	; 55
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	48 2f       	mov	r20, r24
     c52:	8a 81       	ldd	r24, Y+2	; 0x02
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	02 2e       	mov	r0, r18
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <Dio_CONFIGChannel+0xd4>
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	0a 94       	dec	r0
     c66:	e2 f7       	brpl	.-8      	; 0xc60 <Dio_CONFIGChannel+0xd0>
     c68:	84 2b       	or	r24, r20
     c6a:	8c 93       	st	X, r24
     c6c:	6c c0       	rjmp	.+216    	; 0xd46 <Dio_CONFIGChannel+0x1b6>
			}
			else{
				CLEAR_BIT(DIO_PORTB_DDR,channelID);
     c6e:	a7 e3       	ldi	r26, 0x37	; 55
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e7 e3       	ldi	r30, 0x37	; 55
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	48 2f       	mov	r20, r24
     c7a:	8a 81       	ldd	r24, Y+2	; 0x02
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	02 2e       	mov	r0, r18
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <Dio_CONFIGChannel+0xfc>
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	0a 94       	dec	r0
     c8e:	e2 f7       	brpl	.-8      	; 0xc88 <Dio_CONFIGChannel+0xf8>
     c90:	80 95       	com	r24
     c92:	84 23       	and	r24, r20
     c94:	8c 93       	st	X, r24
     c96:	57 c0       	rjmp	.+174    	; 0xd46 <Dio_CONFIGChannel+0x1b6>
			}
			break;
		case DIO_PORTC:
			if(ChannelDir==OUTPUT){
     c98:	8b 81       	ldd	r24, Y+3	; 0x03
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	a1 f4       	brne	.+40     	; 0xcc6 <Dio_CONFIGChannel+0x136>
				SET_BIT(DIO_PORTC_DDR,channelID);
     c9e:	a4 e3       	ldi	r26, 0x34	; 52
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e4 e3       	ldi	r30, 0x34	; 52
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	48 2f       	mov	r20, r24
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	02 2e       	mov	r0, r18
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <Dio_CONFIGChannel+0x12c>
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	0a 94       	dec	r0
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <Dio_CONFIGChannel+0x128>
     cc0:	84 2b       	or	r24, r20
     cc2:	8c 93       	st	X, r24
     cc4:	40 c0       	rjmp	.+128    	; 0xd46 <Dio_CONFIGChannel+0x1b6>
			}
			else{
				CLEAR_BIT(DIO_PORTC_DDR,channelID);
     cc6:	a4 e3       	ldi	r26, 0x34	; 52
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e4 e3       	ldi	r30, 0x34	; 52
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	48 2f       	mov	r20, r24
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	02 2e       	mov	r0, r18
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <Dio_CONFIGChannel+0x154>
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	0a 94       	dec	r0
     ce6:	e2 f7       	brpl	.-8      	; 0xce0 <Dio_CONFIGChannel+0x150>
     ce8:	80 95       	com	r24
     cea:	84 23       	and	r24, r20
     cec:	8c 93       	st	X, r24
     cee:	2b c0       	rjmp	.+86     	; 0xd46 <Dio_CONFIGChannel+0x1b6>
			}
			break;
		case DIO_PORTD:
			if(ChannelDir==OUTPUT){
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	a1 f4       	brne	.+40     	; 0xd1e <Dio_CONFIGChannel+0x18e>
				SET_BIT(DIO_PORTD_DDR,channelID);
     cf6:	a1 e3       	ldi	r26, 0x31	; 49
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e1 e3       	ldi	r30, 0x31	; 49
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <Dio_CONFIGChannel+0x184>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <Dio_CONFIGChannel+0x180>
     d18:	84 2b       	or	r24, r20
     d1a:	8c 93       	st	X, r24
     d1c:	14 c0       	rjmp	.+40     	; 0xd46 <Dio_CONFIGChannel+0x1b6>
			}
			else{
				CLEAR_BIT(DIO_PORTD_DDR,channelID);
     d1e:	a1 e3       	ldi	r26, 0x31	; 49
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e1 e3       	ldi	r30, 0x31	; 49
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	48 2f       	mov	r20, r24
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	02 2e       	mov	r0, r18
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <Dio_CONFIGChannel+0x1ac>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	0a 94       	dec	r0
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <Dio_CONFIGChannel+0x1a8>
     d40:	80 95       	com	r24
     d42:	84 23       	and	r24, r20
     d44:	8c 93       	st	X, r24
			}
			break;
	}

}
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <Dio_WRITEChannel>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : portID channelID channelLevel
* \Return value:   : None
*******************************************************************************/

void Dio_WRITEChannel(DIO_PortID portID, DIO_ChannelID channelID, DIO_LevelType channelLevel){
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <Dio_WRITEChannel+0x6>
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <Dio_WRITEChannel+0x8>
     d5e:	0f 92       	push	r0
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	89 83       	std	Y+1, r24	; 0x01
     d66:	6a 83       	std	Y+2, r22	; 0x02
     d68:	4b 83       	std	Y+3, r20	; 0x03
	switch(portID){
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	3d 83       	std	Y+5, r19	; 0x05
     d72:	2c 83       	std	Y+4, r18	; 0x04
     d74:	8c 81       	ldd	r24, Y+4	; 0x04
     d76:	9d 81       	ldd	r25, Y+5	; 0x05
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	91 05       	cpc	r25, r1
     d7c:	09 f4       	brne	.+2      	; 0xd80 <Dio_WRITEChannel+0x2a>
     d7e:	43 c0       	rjmp	.+134    	; 0xe06 <Dio_WRITEChannel+0xb0>
     d80:	2c 81       	ldd	r18, Y+4	; 0x04
     d82:	3d 81       	ldd	r19, Y+5	; 0x05
     d84:	22 30       	cpi	r18, 0x02	; 2
     d86:	31 05       	cpc	r19, r1
     d88:	2c f4       	brge	.+10     	; 0xd94 <Dio_WRITEChannel+0x3e>
     d8a:	8c 81       	ldd	r24, Y+4	; 0x04
     d8c:	9d 81       	ldd	r25, Y+5	; 0x05
     d8e:	00 97       	sbiw	r24, 0x00	; 0
     d90:	71 f0       	breq	.+28     	; 0xdae <Dio_WRITEChannel+0x58>
     d92:	bc c0       	rjmp	.+376    	; 0xf0c <Dio_WRITEChannel+0x1b6>
     d94:	2c 81       	ldd	r18, Y+4	; 0x04
     d96:	3d 81       	ldd	r19, Y+5	; 0x05
     d98:	22 30       	cpi	r18, 0x02	; 2
     d9a:	31 05       	cpc	r19, r1
     d9c:	09 f4       	brne	.+2      	; 0xda0 <Dio_WRITEChannel+0x4a>
     d9e:	5f c0       	rjmp	.+190    	; 0xe5e <Dio_WRITEChannel+0x108>
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	9d 81       	ldd	r25, Y+5	; 0x05
     da4:	83 30       	cpi	r24, 0x03	; 3
     da6:	91 05       	cpc	r25, r1
     da8:	09 f4       	brne	.+2      	; 0xdac <Dio_WRITEChannel+0x56>
     daa:	85 c0       	rjmp	.+266    	; 0xeb6 <Dio_WRITEChannel+0x160>
     dac:	af c0       	rjmp	.+350    	; 0xf0c <Dio_WRITEChannel+0x1b6>
		case DIO_PORTA:
			if(channelLevel==STD_HIGH){
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	81 30       	cpi	r24, 0x01	; 1
     db2:	a1 f4       	brne	.+40     	; 0xddc <Dio_WRITEChannel+0x86>
				SET_BIT(DIO_PORTA_DATA_OUT,channelID);
     db4:	ab e3       	ldi	r26, 0x3B	; 59
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	eb e3       	ldi	r30, 0x3B	; 59
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	02 2e       	mov	r0, r18
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <Dio_WRITEChannel+0x7c>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <Dio_WRITEChannel+0x78>
     dd6:	84 2b       	or	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	98 c0       	rjmp	.+304    	; 0xf0c <Dio_WRITEChannel+0x1b6>
			}
			else{
				CLEAR_BIT(DIO_PORTA_DATA_OUT,channelID);
     ddc:	ab e3       	ldi	r26, 0x3B	; 59
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	eb e3       	ldi	r30, 0x3B	; 59
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	48 2f       	mov	r20, r24
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	02 2e       	mov	r0, r18
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <Dio_WRITEChannel+0xa4>
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	0a 94       	dec	r0
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <Dio_WRITEChannel+0xa0>
     dfe:	80 95       	com	r24
     e00:	84 23       	and	r24, r20
     e02:	8c 93       	st	X, r24
     e04:	83 c0       	rjmp	.+262    	; 0xf0c <Dio_WRITEChannel+0x1b6>
			}
			break;
		case DIO_PORTB:
			if(channelLevel==STD_HIGH){
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	81 30       	cpi	r24, 0x01	; 1
     e0a:	a1 f4       	brne	.+40     	; 0xe34 <Dio_WRITEChannel+0xde>
				SET_BIT(DIO_PORTB_DATA_OUT,channelID);
     e0c:	a8 e3       	ldi	r26, 0x38	; 56
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e8 e3       	ldi	r30, 0x38	; 56
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	48 2f       	mov	r20, r24
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 2e       	mov	r0, r18
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <Dio_WRITEChannel+0xd4>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	0a 94       	dec	r0
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <Dio_WRITEChannel+0xd0>
     e2e:	84 2b       	or	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	6c c0       	rjmp	.+216    	; 0xf0c <Dio_WRITEChannel+0x1b6>
			}
			else{
				CLEAR_BIT(DIO_PORTB_DATA_OUT,channelID);
     e34:	a8 e3       	ldi	r26, 0x38	; 56
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e8 e3       	ldi	r30, 0x38	; 56
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <Dio_WRITEChannel+0xfc>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <Dio_WRITEChannel+0xf8>
     e56:	80 95       	com	r24
     e58:	84 23       	and	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	57 c0       	rjmp	.+174    	; 0xf0c <Dio_WRITEChannel+0x1b6>
			}
			break;
		case DIO_PORTC:
			if(channelLevel==STD_HIGH){
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	a1 f4       	brne	.+40     	; 0xe8c <Dio_WRITEChannel+0x136>
				SET_BIT(DIO_PORTC_DATA_OUT,channelID);
     e64:	a5 e3       	ldi	r26, 0x35	; 53
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e5 e3       	ldi	r30, 0x35	; 53
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <Dio_WRITEChannel+0x12c>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <Dio_WRITEChannel+0x128>
     e86:	84 2b       	or	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	40 c0       	rjmp	.+128    	; 0xf0c <Dio_WRITEChannel+0x1b6>
			}
			else{
				CLEAR_BIT(DIO_PORTC_DATA_OUT,channelID);
     e8c:	a5 e3       	ldi	r26, 0x35	; 53
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e5 e3       	ldi	r30, 0x35	; 53
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <Dio_WRITEChannel+0x154>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <Dio_WRITEChannel+0x150>
     eae:	80 95       	com	r24
     eb0:	84 23       	and	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	2b c0       	rjmp	.+86     	; 0xf0c <Dio_WRITEChannel+0x1b6>
			}
			break;
		case DIO_PORTD:
			if(channelLevel==STD_HIGH){
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	a1 f4       	brne	.+40     	; 0xee4 <Dio_WRITEChannel+0x18e>
				SET_BIT(DIO_PORTD_DATA_OUT,channelID);
     ebc:	a2 e3       	ldi	r26, 0x32	; 50
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e2 e3       	ldi	r30, 0x32	; 50
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 2e       	mov	r0, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <Dio_WRITEChannel+0x184>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <Dio_WRITEChannel+0x180>
     ede:	84 2b       	or	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	14 c0       	rjmp	.+40     	; 0xf0c <Dio_WRITEChannel+0x1b6>
			}
			else{
				CLEAR_BIT(DIO_PORTD_DATA_OUT,channelID);
     ee4:	a2 e3       	ldi	r26, 0x32	; 50
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e2 e3       	ldi	r30, 0x32	; 50
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <Dio_WRITEChannel+0x1ac>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <Dio_WRITEChannel+0x1a8>
     f06:	80 95       	com	r24
     f08:	84 23       	and	r24, r20
     f0a:	8c 93       	st	X, r24
			}
			break;
	}

}
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <Dio_TOGGLEChannel>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : portID channelID
* \Return value:   : None
*******************************************************************************/

void Dio_TOGGLEChannel(DIO_PortID portID, DIO_ChannelID channelID){
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	00 d0       	rcall	.+0      	; 0xf22 <Dio_TOGGLEChannel+0x6>
     f22:	00 d0       	rcall	.+0      	; 0xf24 <Dio_TOGGLEChannel+0x8>
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	89 83       	std	Y+1, r24	; 0x01
     f2a:	6a 83       	std	Y+2, r22	; 0x02
	switch(portID){
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	3c 83       	std	Y+4, r19	; 0x04
     f34:	2b 83       	std	Y+3, r18	; 0x03
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	9c 81       	ldd	r25, Y+4	; 0x04
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	91 05       	cpc	r25, r1
     f3e:	49 f1       	breq	.+82     	; 0xf92 <Dio_TOGGLEChannel+0x76>
     f40:	2b 81       	ldd	r18, Y+3	; 0x03
     f42:	3c 81       	ldd	r19, Y+4	; 0x04
     f44:	22 30       	cpi	r18, 0x02	; 2
     f46:	31 05       	cpc	r19, r1
     f48:	2c f4       	brge	.+10     	; 0xf54 <Dio_TOGGLEChannel+0x38>
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	9c 81       	ldd	r25, Y+4	; 0x04
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	61 f0       	breq	.+24     	; 0xf6a <Dio_TOGGLEChannel+0x4e>
     f52:	5a c0       	rjmp	.+180    	; 0x1008 <Dio_TOGGLEChannel+0xec>
     f54:	2b 81       	ldd	r18, Y+3	; 0x03
     f56:	3c 81       	ldd	r19, Y+4	; 0x04
     f58:	22 30       	cpi	r18, 0x02	; 2
     f5a:	31 05       	cpc	r19, r1
     f5c:	71 f1       	breq	.+92     	; 0xfba <Dio_TOGGLEChannel+0x9e>
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	9c 81       	ldd	r25, Y+4	; 0x04
     f62:	83 30       	cpi	r24, 0x03	; 3
     f64:	91 05       	cpc	r25, r1
     f66:	e9 f1       	breq	.+122    	; 0xfe2 <Dio_TOGGLEChannel+0xc6>
     f68:	4f c0       	rjmp	.+158    	; 0x1008 <Dio_TOGGLEChannel+0xec>
		case DIO_PORTA:
			FLIP_BIT(DIO_PORTA_DATA_OUT,channelID);
     f6a:	ab e3       	ldi	r26, 0x3B	; 59
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	eb e3       	ldi	r30, 0x3B	; 59
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <Dio_TOGGLEChannel+0x6c>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <Dio_TOGGLEChannel+0x68>
     f8c:	84 27       	eor	r24, r20
     f8e:	8c 93       	st	X, r24
     f90:	3b c0       	rjmp	.+118    	; 0x1008 <Dio_TOGGLEChannel+0xec>
			break;
		case DIO_PORTB:
			FLIP_BIT(DIO_PORTB_DATA_OUT,channelID);
     f92:	a8 e3       	ldi	r26, 0x38	; 56
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e8 e3       	ldi	r30, 0x38	; 56
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 2e       	mov	r0, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <Dio_TOGGLEChannel+0x94>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <Dio_TOGGLEChannel+0x90>
     fb4:	84 27       	eor	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	27 c0       	rjmp	.+78     	; 0x1008 <Dio_TOGGLEChannel+0xec>
			break;
		case DIO_PORTC:
			FLIP_BIT(DIO_PORTC_DATA_OUT,channelID);
     fba:	a5 e3       	ldi	r26, 0x35	; 53
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e5 e3       	ldi	r30, 0x35	; 53
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	02 2e       	mov	r0, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <Dio_TOGGLEChannel+0xbc>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	0a 94       	dec	r0
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <Dio_TOGGLEChannel+0xb8>
     fdc:	84 27       	eor	r24, r20
     fde:	8c 93       	st	X, r24
     fe0:	13 c0       	rjmp	.+38     	; 0x1008 <Dio_TOGGLEChannel+0xec>
			break;
		case DIO_PORTD:
			FLIP_BIT(DIO_PORTD_DATA_OUT,channelID);
     fe2:	a2 e3       	ldi	r26, 0x32	; 50
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e2 e3       	ldi	r30, 0x32	; 50
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <Dio_TOGGLEChannel+0xe4>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <Dio_TOGGLEChannel+0xe0>
    1004:	84 27       	eor	r24, r20
    1006:	8c 93       	st	X, r24
			break;
		}


}
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <Dio_ReadChannel>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : portID channelID
* \Return value:   : DIO_LevelType
*******************************************************************************/

DIO_LevelType Dio_ReadChannel(DIO_PortID portID, DIO_ChannelID channelID){
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	00 d0       	rcall	.+0      	; 0x101c <Dio_ReadChannel+0x6>
    101c:	00 d0       	rcall	.+0      	; 0x101e <Dio_ReadChannel+0x8>
    101e:	00 d0       	rcall	.+0      	; 0x1020 <Dio_ReadChannel+0xa>
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	6a 83       	std	Y+2, r22	; 0x02
	switch(portID){
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	3d 83       	std	Y+5, r19	; 0x05
    1030:	2c 83       	std	Y+4, r18	; 0x04
    1032:	4c 81       	ldd	r20, Y+4	; 0x04
    1034:	5d 81       	ldd	r21, Y+5	; 0x05
    1036:	41 30       	cpi	r20, 0x01	; 1
    1038:	51 05       	cpc	r21, r1
    103a:	79 f1       	breq	.+94     	; 0x109a <Dio_ReadChannel+0x84>
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	9d 81       	ldd	r25, Y+5	; 0x05
    1040:	82 30       	cpi	r24, 0x02	; 2
    1042:	91 05       	cpc	r25, r1
    1044:	34 f4       	brge	.+12     	; 0x1052 <Dio_ReadChannel+0x3c>
    1046:	2c 81       	ldd	r18, Y+4	; 0x04
    1048:	3d 81       	ldd	r19, Y+5	; 0x05
    104a:	21 15       	cp	r18, r1
    104c:	31 05       	cpc	r19, r1
    104e:	69 f0       	breq	.+26     	; 0x106a <Dio_ReadChannel+0x54>
    1050:	6c c0       	rjmp	.+216    	; 0x112a <Dio_ReadChannel+0x114>
    1052:	4c 81       	ldd	r20, Y+4	; 0x04
    1054:	5d 81       	ldd	r21, Y+5	; 0x05
    1056:	42 30       	cpi	r20, 0x02	; 2
    1058:	51 05       	cpc	r21, r1
    105a:	b9 f1       	breq	.+110    	; 0x10ca <Dio_ReadChannel+0xb4>
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	9d 81       	ldd	r25, Y+5	; 0x05
    1060:	83 30       	cpi	r24, 0x03	; 3
    1062:	91 05       	cpc	r25, r1
    1064:	09 f4       	brne	.+2      	; 0x1068 <Dio_ReadChannel+0x52>
    1066:	49 c0       	rjmp	.+146    	; 0x10fa <Dio_ReadChannel+0xe4>
    1068:	60 c0       	rjmp	.+192    	; 0x112a <Dio_ReadChannel+0x114>
		case DIO_PORTA:
			if(CHECK_BIT(DIO_PORTA_DATA_IN,channelID)){
    106a:	e9 e3       	ldi	r30, 0x39	; 57
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	a9 01       	movw	r20, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <Dio_ReadChannel+0x6c>
    107e:	55 95       	asr	r21
    1080:	47 95       	ror	r20
    1082:	8a 95       	dec	r24
    1084:	e2 f7       	brpl	.-8      	; 0x107e <Dio_ReadChannel+0x68>
    1086:	ca 01       	movw	r24, r20
    1088:	81 70       	andi	r24, 0x01	; 1
    108a:	90 70       	andi	r25, 0x00	; 0
    108c:	88 23       	and	r24, r24
    108e:	19 f0       	breq	.+6      	; 0x1096 <Dio_ReadChannel+0x80>
				return STD_HIGH;
    1090:	51 e0       	ldi	r21, 0x01	; 1
    1092:	5b 83       	std	Y+3, r21	; 0x03
    1094:	4b c0       	rjmp	.+150    	; 0x112c <Dio_ReadChannel+0x116>
			}
			else{
				return STD_LOW;
    1096:	1b 82       	std	Y+3, r1	; 0x03
    1098:	49 c0       	rjmp	.+146    	; 0x112c <Dio_ReadChannel+0x116>
			}
			break;
		case DIO_PORTB:
			if(CHECK_BIT(DIO_PORTB_DATA_IN,channelID)){
    109a:	e6 e3       	ldi	r30, 0x36	; 54
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	88 2f       	mov	r24, r24
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	a9 01       	movw	r20, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <Dio_ReadChannel+0x9c>
    10ae:	55 95       	asr	r21
    10b0:	47 95       	ror	r20
    10b2:	8a 95       	dec	r24
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <Dio_ReadChannel+0x98>
    10b6:	ca 01       	movw	r24, r20
    10b8:	81 70       	andi	r24, 0x01	; 1
    10ba:	90 70       	andi	r25, 0x00	; 0
    10bc:	88 23       	and	r24, r24
    10be:	19 f0       	breq	.+6      	; 0x10c6 <Dio_ReadChannel+0xb0>
				return STD_HIGH;
    10c0:	51 e0       	ldi	r21, 0x01	; 1
    10c2:	5b 83       	std	Y+3, r21	; 0x03
    10c4:	33 c0       	rjmp	.+102    	; 0x112c <Dio_ReadChannel+0x116>
			}
			else{
				return STD_LOW;
    10c6:	1b 82       	std	Y+3, r1	; 0x03
    10c8:	31 c0       	rjmp	.+98     	; 0x112c <Dio_ReadChannel+0x116>
			}
			break;
		case DIO_PORTC:
			if(CHECK_BIT(DIO_PORTC_DATA_IN,channelID)){
    10ca:	e3 e3       	ldi	r30, 0x33	; 51
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	88 2f       	mov	r24, r24
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	a9 01       	movw	r20, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <Dio_ReadChannel+0xcc>
    10de:	55 95       	asr	r21
    10e0:	47 95       	ror	r20
    10e2:	8a 95       	dec	r24
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <Dio_ReadChannel+0xc8>
    10e6:	ca 01       	movw	r24, r20
    10e8:	81 70       	andi	r24, 0x01	; 1
    10ea:	90 70       	andi	r25, 0x00	; 0
    10ec:	88 23       	and	r24, r24
    10ee:	19 f0       	breq	.+6      	; 0x10f6 <Dio_ReadChannel+0xe0>
				return STD_HIGH;
    10f0:	51 e0       	ldi	r21, 0x01	; 1
    10f2:	5b 83       	std	Y+3, r21	; 0x03
    10f4:	1b c0       	rjmp	.+54     	; 0x112c <Dio_ReadChannel+0x116>
			}
			else{
				return STD_LOW;
    10f6:	1b 82       	std	Y+3, r1	; 0x03
    10f8:	19 c0       	rjmp	.+50     	; 0x112c <Dio_ReadChannel+0x116>
			}
			break;
		case DIO_PORTD:
			if(CHECK_BIT(DIO_PORTD_DATA_IN,channelID)){
    10fa:	e0 e3       	ldi	r30, 0x30	; 48
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	88 2f       	mov	r24, r24
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	a9 01       	movw	r20, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <Dio_ReadChannel+0xfc>
    110e:	55 95       	asr	r21
    1110:	47 95       	ror	r20
    1112:	8a 95       	dec	r24
    1114:	e2 f7       	brpl	.-8      	; 0x110e <Dio_ReadChannel+0xf8>
    1116:	ca 01       	movw	r24, r20
    1118:	81 70       	andi	r24, 0x01	; 1
    111a:	90 70       	andi	r25, 0x00	; 0
    111c:	88 23       	and	r24, r24
    111e:	19 f0       	breq	.+6      	; 0x1126 <Dio_ReadChannel+0x110>
				return STD_HIGH;
    1120:	51 e0       	ldi	r21, 0x01	; 1
    1122:	5b 83       	std	Y+3, r21	; 0x03
    1124:	03 c0       	rjmp	.+6      	; 0x112c <Dio_ReadChannel+0x116>
			}
			else{
				return STD_LOW;
    1126:	1b 82       	std	Y+3, r1	; 0x03
    1128:	01 c0       	rjmp	.+2      	; 0x112c <Dio_ReadChannel+0x116>
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <Dio_ReadChannel+0x11a>
			}
			break;
		}

}
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	8e 83       	std	Y+6, r24	; 0x06
    1130:	8e 81       	ldd	r24, Y+6	; 0x06
    1132:	26 96       	adiw	r28, 0x06	; 6
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <Dio_CONFIGChannelGroup>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : portID mask ChannelDir
* \Return value:   : DIO_LevelType
*******************************************************************************/

void Dio_CONFIGChannelGroup(DIO_PortID portID, u8 mask, DIO_DirectionType ChannelDir){
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	00 d0       	rcall	.+0      	; 0x114a <Dio_CONFIGChannelGroup+0x6>
    114a:	00 d0       	rcall	.+0      	; 0x114c <Dio_CONFIGChannelGroup+0x8>
    114c:	0f 92       	push	r0
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	89 83       	std	Y+1, r24	; 0x01
    1154:	6a 83       	std	Y+2, r22	; 0x02
    1156:	4b 83       	std	Y+3, r20	; 0x03
	switch(portID){
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	3d 83       	std	Y+5, r19	; 0x05
    1160:	2c 83       	std	Y+4, r18	; 0x04
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	9d 81       	ldd	r25, Y+5	; 0x05
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	91 05       	cpc	r25, r1
    116a:	69 f1       	breq	.+90     	; 0x11c6 <Dio_CONFIGChannelGroup+0x82>
    116c:	2c 81       	ldd	r18, Y+4	; 0x04
    116e:	3d 81       	ldd	r19, Y+5	; 0x05
    1170:	22 30       	cpi	r18, 0x02	; 2
    1172:	31 05       	cpc	r19, r1
    1174:	2c f4       	brge	.+10     	; 0x1180 <Dio_CONFIGChannelGroup+0x3c>
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	9d 81       	ldd	r25, Y+5	; 0x05
    117a:	00 97       	sbiw	r24, 0x00	; 0
    117c:	69 f0       	breq	.+26     	; 0x1198 <Dio_CONFIGChannelGroup+0x54>
    117e:	67 c0       	rjmp	.+206    	; 0x124e <Dio_CONFIGChannelGroup+0x10a>
    1180:	2c 81       	ldd	r18, Y+4	; 0x04
    1182:	3d 81       	ldd	r19, Y+5	; 0x05
    1184:	22 30       	cpi	r18, 0x02	; 2
    1186:	31 05       	cpc	r19, r1
    1188:	a9 f1       	breq	.+106    	; 0x11f4 <Dio_CONFIGChannelGroup+0xb0>
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	9d 81       	ldd	r25, Y+5	; 0x05
    118e:	83 30       	cpi	r24, 0x03	; 3
    1190:	91 05       	cpc	r25, r1
    1192:	09 f4       	brne	.+2      	; 0x1196 <Dio_CONFIGChannelGroup+0x52>
    1194:	46 c0       	rjmp	.+140    	; 0x1222 <Dio_CONFIGChannelGroup+0xde>
    1196:	5b c0       	rjmp	.+182    	; 0x124e <Dio_CONFIGChannelGroup+0x10a>
		case DIO_PORTA:
			if(ChannelDir==INPUT){
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	88 23       	and	r24, r24
    119c:	59 f4       	brne	.+22     	; 0x11b4 <Dio_CONFIGChannelGroup+0x70>
				DIO_PORTA_DDR &= ~(mask);
    119e:	aa e3       	ldi	r26, 0x3A	; 58
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	ea e3       	ldi	r30, 0x3A	; 58
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	98 2f       	mov	r25, r24
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	80 95       	com	r24
    11ae:	89 23       	and	r24, r25
    11b0:	8c 93       	st	X, r24
    11b2:	4d c0       	rjmp	.+154    	; 0x124e <Dio_CONFIGChannelGroup+0x10a>
			}
			else{
				DIO_PORTA_DDR |= mask;
    11b4:	aa e3       	ldi	r26, 0x3A	; 58
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	ea e3       	ldi	r30, 0x3A	; 58
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	90 81       	ld	r25, Z
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	89 2b       	or	r24, r25
    11c2:	8c 93       	st	X, r24
    11c4:	44 c0       	rjmp	.+136    	; 0x124e <Dio_CONFIGChannelGroup+0x10a>
			}
			break;
		case DIO_PORTB:
			if(ChannelDir==INPUT){
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	88 23       	and	r24, r24
    11ca:	59 f4       	brne	.+22     	; 0x11e2 <Dio_CONFIGChannelGroup+0x9e>
				DIO_PORTB_DDR &= ~(mask);
    11cc:	a7 e3       	ldi	r26, 0x37	; 55
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e7 e3       	ldi	r30, 0x37	; 55
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	98 2f       	mov	r25, r24
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	80 95       	com	r24
    11dc:	89 23       	and	r24, r25
    11de:	8c 93       	st	X, r24
    11e0:	36 c0       	rjmp	.+108    	; 0x124e <Dio_CONFIGChannelGroup+0x10a>
			}
			else{
				DIO_PORTB_DDR |= mask;
    11e2:	a7 e3       	ldi	r26, 0x37	; 55
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e7 e3       	ldi	r30, 0x37	; 55
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	90 81       	ld	r25, Z
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	89 2b       	or	r24, r25
    11f0:	8c 93       	st	X, r24
    11f2:	2d c0       	rjmp	.+90     	; 0x124e <Dio_CONFIGChannelGroup+0x10a>
			}
			break;
		case DIO_PORTC:
			if(ChannelDir==INPUT){
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	88 23       	and	r24, r24
    11f8:	59 f4       	brne	.+22     	; 0x1210 <Dio_CONFIGChannelGroup+0xcc>
				DIO_PORTC_DDR &= ~(mask);
    11fa:	a4 e3       	ldi	r26, 0x34	; 52
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e4 e3       	ldi	r30, 0x34	; 52
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	98 2f       	mov	r25, r24
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	80 95       	com	r24
    120a:	89 23       	and	r24, r25
    120c:	8c 93       	st	X, r24
    120e:	1f c0       	rjmp	.+62     	; 0x124e <Dio_CONFIGChannelGroup+0x10a>
			}
			else{
				DIO_PORTC_DDR |= mask;
    1210:	a4 e3       	ldi	r26, 0x34	; 52
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e4 e3       	ldi	r30, 0x34	; 52
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	90 81       	ld	r25, Z
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	89 2b       	or	r24, r25
    121e:	8c 93       	st	X, r24
    1220:	16 c0       	rjmp	.+44     	; 0x124e <Dio_CONFIGChannelGroup+0x10a>
			}
			break;
		case DIO_PORTD:
			if(ChannelDir==INPUT){
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	88 23       	and	r24, r24
    1226:	59 f4       	brne	.+22     	; 0x123e <Dio_CONFIGChannelGroup+0xfa>
				DIO_PORTD_DDR &= ~(mask);
    1228:	a1 e3       	ldi	r26, 0x31	; 49
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e1 e3       	ldi	r30, 0x31	; 49
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	98 2f       	mov	r25, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	80 95       	com	r24
    1238:	89 23       	and	r24, r25
    123a:	8c 93       	st	X, r24
    123c:	08 c0       	rjmp	.+16     	; 0x124e <Dio_CONFIGChannelGroup+0x10a>
			}
			else{
				DIO_PORTD_DDR |= mask;
    123e:	a1 e3       	ldi	r26, 0x31	; 49
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e1 e3       	ldi	r30, 0x31	; 49
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	90 81       	ld	r25, Z
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	89 2b       	or	r24, r25
    124c:	8c 93       	st	X, r24
			}
			break;
		}

}
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <Dio_WRITEChannelGroup>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : portID mask position data
* \Return value:   : DIO_LevelType
*******************************************************************************/

void Dio_WRITEChannelGroup(DIO_PortID portID, u8 mask, u8 position, u8 data){
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	00 d0       	rcall	.+0      	; 0x1264 <Dio_WRITEChannelGroup+0x6>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <Dio_WRITEChannelGroup+0x8>
    1266:	00 d0       	rcall	.+0      	; 0x1268 <Dio_WRITEChannelGroup+0xa>
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	89 83       	std	Y+1, r24	; 0x01
    126e:	6a 83       	std	Y+2, r22	; 0x02
    1270:	4b 83       	std	Y+3, r20	; 0x03
    1272:	2c 83       	std	Y+4, r18	; 0x04
	switch(portID){
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	3e 83       	std	Y+6, r19	; 0x06
    127c:	2d 83       	std	Y+5, r18	; 0x05
    127e:	6d 81       	ldd	r22, Y+5	; 0x05
    1280:	7e 81       	ldd	r23, Y+6	; 0x06
    1282:	61 30       	cpi	r22, 0x01	; 1
    1284:	71 05       	cpc	r23, r1
    1286:	c1 f1       	breq	.+112    	; 0x12f8 <Dio_WRITEChannelGroup+0x9a>
    1288:	8d 81       	ldd	r24, Y+5	; 0x05
    128a:	9e 81       	ldd	r25, Y+6	; 0x06
    128c:	82 30       	cpi	r24, 0x02	; 2
    128e:	91 05       	cpc	r25, r1
    1290:	34 f4       	brge	.+12     	; 0x129e <Dio_WRITEChannelGroup+0x40>
    1292:	2d 81       	ldd	r18, Y+5	; 0x05
    1294:	3e 81       	ldd	r19, Y+6	; 0x06
    1296:	21 15       	cp	r18, r1
    1298:	31 05       	cpc	r19, r1
    129a:	71 f0       	breq	.+28     	; 0x12b8 <Dio_WRITEChannelGroup+0x5a>
    129c:	8c c0       	rjmp	.+280    	; 0x13b6 <Dio_WRITEChannelGroup+0x158>
    129e:	6d 81       	ldd	r22, Y+5	; 0x05
    12a0:	7e 81       	ldd	r23, Y+6	; 0x06
    12a2:	62 30       	cpi	r22, 0x02	; 2
    12a4:	71 05       	cpc	r23, r1
    12a6:	09 f4       	brne	.+2      	; 0x12aa <Dio_WRITEChannelGroup+0x4c>
    12a8:	47 c0       	rjmp	.+142    	; 0x1338 <Dio_WRITEChannelGroup+0xda>
    12aa:	8d 81       	ldd	r24, Y+5	; 0x05
    12ac:	9e 81       	ldd	r25, Y+6	; 0x06
    12ae:	83 30       	cpi	r24, 0x03	; 3
    12b0:	91 05       	cpc	r25, r1
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <Dio_WRITEChannelGroup+0x58>
    12b4:	61 c0       	rjmp	.+194    	; 0x1378 <Dio_WRITEChannelGroup+0x11a>
    12b6:	7f c0       	rjmp	.+254    	; 0x13b6 <Dio_WRITEChannelGroup+0x158>
		case DIO_PORTA:
			DIO_PORTA_DDR &= ~(mask);
    12b8:	aa e3       	ldi	r26, 0x3A	; 58
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	ea e3       	ldi	r30, 0x3A	; 58
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	98 2f       	mov	r25, r24
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	80 95       	com	r24
    12c8:	89 23       	and	r24, r25
    12ca:	8c 93       	st	X, r24
			DIO_PORTA_DDR |= data<<position;
    12cc:	aa e3       	ldi	r26, 0x3A	; 58
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	ea e3       	ldi	r30, 0x3A	; 58
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8c 81       	ldd	r24, Y+4	; 0x04
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	88 2f       	mov	r24, r24
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	b9 01       	movw	r22, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <Dio_WRITEChannelGroup+0x8e>
    12e8:	66 0f       	add	r22, r22
    12ea:	77 1f       	adc	r23, r23
    12ec:	8a 95       	dec	r24
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <Dio_WRITEChannelGroup+0x8a>
    12f0:	cb 01       	movw	r24, r22
    12f2:	84 2b       	or	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	5f c0       	rjmp	.+190    	; 0x13b6 <Dio_WRITEChannelGroup+0x158>
			break;
		case DIO_PORTB:
			DIO_PORTB_DDR &= ~(mask);
    12f8:	a7 e3       	ldi	r26, 0x37	; 55
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e7 e3       	ldi	r30, 0x37	; 55
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	98 2f       	mov	r25, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	80 95       	com	r24
    1308:	89 23       	and	r24, r25
    130a:	8c 93       	st	X, r24
			DIO_PORTB_DDR |= data<<position;
    130c:	a7 e3       	ldi	r26, 0x37	; 55
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e7 e3       	ldi	r30, 0x37	; 55
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	b9 01       	movw	r22, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <Dio_WRITEChannelGroup+0xce>
    1328:	66 0f       	add	r22, r22
    132a:	77 1f       	adc	r23, r23
    132c:	8a 95       	dec	r24
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <Dio_WRITEChannelGroup+0xca>
    1330:	cb 01       	movw	r24, r22
    1332:	84 2b       	or	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	3f c0       	rjmp	.+126    	; 0x13b6 <Dio_WRITEChannelGroup+0x158>
			break;
		case DIO_PORTC:
			DIO_PORTC_DDR &= ~(mask);
    1338:	a4 e3       	ldi	r26, 0x34	; 52
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e4 e3       	ldi	r30, 0x34	; 52
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	98 2f       	mov	r25, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	80 95       	com	r24
    1348:	89 23       	and	r24, r25
    134a:	8c 93       	st	X, r24
			DIO_PORTC_DDR |= data<<position;
    134c:	a4 e3       	ldi	r26, 0x34	; 52
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e4 e3       	ldi	r30, 0x34	; 52
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8c 81       	ldd	r24, Y+4	; 0x04
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	88 2f       	mov	r24, r24
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	b9 01       	movw	r22, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <Dio_WRITEChannelGroup+0x10e>
    1368:	66 0f       	add	r22, r22
    136a:	77 1f       	adc	r23, r23
    136c:	8a 95       	dec	r24
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <Dio_WRITEChannelGroup+0x10a>
    1370:	cb 01       	movw	r24, r22
    1372:	84 2b       	or	r24, r20
    1374:	8c 93       	st	X, r24
    1376:	1f c0       	rjmp	.+62     	; 0x13b6 <Dio_WRITEChannelGroup+0x158>
			break;
		case DIO_PORTD:
			DIO_PORTD_DDR &= ~(mask);
    1378:	a1 e3       	ldi	r26, 0x31	; 49
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e1 e3       	ldi	r30, 0x31	; 49
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	98 2f       	mov	r25, r24
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	80 95       	com	r24
    1388:	89 23       	and	r24, r25
    138a:	8c 93       	st	X, r24
			DIO_PORTD_DDR |= data<<position;
    138c:	a1 e3       	ldi	r26, 0x31	; 49
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e1 e3       	ldi	r30, 0x31	; 49
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	48 2f       	mov	r20, r24
    1398:	8c 81       	ldd	r24, Y+4	; 0x04
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	88 2f       	mov	r24, r24
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	b9 01       	movw	r22, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <Dio_WRITEChannelGroup+0x14e>
    13a8:	66 0f       	add	r22, r22
    13aa:	77 1f       	adc	r23, r23
    13ac:	8a 95       	dec	r24
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <Dio_WRITEChannelGroup+0x14a>
    13b0:	cb 01       	movw	r24, r22
    13b2:	84 2b       	or	r24, r20
    13b4:	8c 93       	st	X, r24
			break;
		}
}
    13b6:	26 96       	adiw	r28, 0x06	; 6
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <_exit>:
    13c8:	f8 94       	cli

000013ca <__stop_program>:
    13ca:	ff cf       	rjmp	.-2      	; 0x13ca <__stop_program>
