
Smart_Room.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001224  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001f5c  00000000  00000000  00001278  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00001736  00000000  00000000  000031d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61
      60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
      64:	0c 94 10 09 	jmp	0x1220	; 0x1220 <_exit>

00000068 <__bad_interrupt>:
      68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
      6c:	df 93       	push	r29
      6e:	cf 93       	push	r28
      70:	0f 92       	push	r0
      72:	cd b7       	in	r28, 0x3d	; 61
      74:	de b7       	in	r29, 0x3e	; 62
      76:	0e 94 38 01 	call	0x270	; 0x270 <Led_Init>
      7a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <Button_Init>
      7e:	0e 94 0f 03 	call	0x61e	; 0x61e <SPI_vInitSlave>
      82:	8f ef       	ldi	r24, 0xFF	; 255
      84:	0e 94 24 03 	call	0x648	; 0x648 <SPI_ui8TransmitRecieve>
      88:	89 83       	std	Y+1, r24	; 0x01
      8a:	89 81       	ldd	r24, Y+1	; 0x01
      8c:	8d 36       	cpi	r24, 0x6D	; 109
      8e:	19 f4       	brne	.+6      	; 0x96 <main+0x2a>
      90:	80 e0       	ldi	r24, 0x00	; 0
      92:	0e 94 20 01 	call	0x240	; 0x240 <Led_Toggle>
      96:	89 81       	ldd	r24, Y+1	; 0x01
      98:	87 36       	cpi	r24, 0x67	; 103
      9a:	19 f4       	brne	.+6      	; 0xa2 <main+0x36>
      9c:	80 e0       	ldi	r24, 0x00	; 0
      9e:	0e 94 20 01 	call	0x240	; 0x240 <Led_Toggle>
      a2:	89 81       	ldd	r24, Y+1	; 0x01
      a4:	82 36       	cpi	r24, 0x62	; 98
      a6:	69 f7       	brne	.-38     	; 0x82 <main+0x16>
      a8:	80 e0       	ldi	r24, 0x00	; 0
      aa:	0e 94 20 01 	call	0x240	; 0x240 <Led_Toggle>
      ae:	e9 cf       	rjmp	.-46     	; 0x82 <main+0x16>

000000b0 <Motors_Init>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : void
* \Return value:   : None
*******************************************************************************/
void Motors_Init(void){
      b0:	df 93       	push	r29
      b2:	cf 93       	push	r28
      b4:	cd b7       	in	r28, 0x3d	; 61
      b6:	de b7       	in	r29, 0x3e	; 62
	Dio_CONFIGChannel(ENA_Port, ENA_Channel, OUTPUT);
      b8:	80 e0       	ldi	r24, 0x00	; 0
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	41 e0       	ldi	r20, 0x01	; 1
      be:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Dio_CONFIGChannel>
	Dio_CONFIGChannel(ENB_Port, ENB_Channel, OUTPUT);
      c2:	80 e0       	ldi	r24, 0x00	; 0
      c4:	61 e0       	ldi	r22, 0x01	; 1
      c6:	41 e0       	ldi	r20, 0x01	; 1
      c8:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Dio_CONFIGChannel>
	Dio_CONFIGChannel(IN1_Port, IN1_Channel, OUTPUT);
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	63 e0       	ldi	r22, 0x03	; 3
      d0:	41 e0       	ldi	r20, 0x01	; 1
      d2:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Dio_CONFIGChannel>
	Dio_CONFIGChannel(IN2_Port, IN2_Channel, OUTPUT);
      d6:	83 e0       	ldi	r24, 0x03	; 3
      d8:	64 e0       	ldi	r22, 0x04	; 4
      da:	41 e0       	ldi	r20, 0x01	; 1
      dc:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Dio_CONFIGChannel>
	Dio_CONFIGChannel(IN3_Port, IN3_Channel, OUTPUT);
      e0:	83 e0       	ldi	r24, 0x03	; 3
      e2:	65 e0       	ldi	r22, 0x05	; 5
      e4:	41 e0       	ldi	r20, 0x01	; 1
      e6:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Dio_CONFIGChannel>
	Dio_CONFIGChannel(IN4_Port, IN4_Channel, OUTPUT);
      ea:	83 e0       	ldi	r24, 0x03	; 3
      ec:	67 e0       	ldi	r22, 0x07	; 7
      ee:	41 e0       	ldi	r20, 0x01	; 1
      f0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Dio_CONFIGChannel>
}
      f4:	cf 91       	pop	r28
      f6:	df 91       	pop	r29
      f8:	08 95       	ret

000000fa <Motors_Forward>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : void
* \Return value:   : None
*******************************************************************************/
void Motors_Forward(void){
      fa:	df 93       	push	r29
      fc:	cf 93       	push	r28
      fe:	cd b7       	in	r28, 0x3d	; 61
     100:	de b7       	in	r29, 0x3e	; 62
	Dio_WRITEChannel(ENA_Port, ENA_Channel, STD_HIGH);
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	60 e0       	ldi	r22, 0x00	; 0
     106:	41 e0       	ldi	r20, 0x01	; 1
     108:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>
	Dio_WRITEChannel(IN1_Port, IN1_Channel, STD_HIGH);
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	63 e0       	ldi	r22, 0x03	; 3
     110:	41 e0       	ldi	r20, 0x01	; 1
     112:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>
	Dio_WRITEChannel(IN2_Port, IN2_Channel, STD_LOW);
     116:	83 e0       	ldi	r24, 0x03	; 3
     118:	64 e0       	ldi	r22, 0x04	; 4
     11a:	40 e0       	ldi	r20, 0x00	; 0
     11c:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>

	Dio_WRITEChannel(ENB_Port, ENB_Channel, STD_HIGH);
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	61 e0       	ldi	r22, 0x01	; 1
     124:	41 e0       	ldi	r20, 0x01	; 1
     126:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>
	Dio_WRITEChannel(IN3_Port, IN3_Channel, STD_HIGH);
     12a:	83 e0       	ldi	r24, 0x03	; 3
     12c:	65 e0       	ldi	r22, 0x05	; 5
     12e:	41 e0       	ldi	r20, 0x01	; 1
     130:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>
	Dio_WRITEChannel(IN4_Port, IN4_Channel, STD_LOW);
     134:	83 e0       	ldi	r24, 0x03	; 3
     136:	67 e0       	ldi	r22, 0x07	; 7
     138:	40 e0       	ldi	r20, 0x00	; 0
     13a:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>


}
     13e:	cf 91       	pop	r28
     140:	df 91       	pop	r29
     142:	08 95       	ret

00000144 <Motors_Backward>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : void
* \Return value:   : None
*******************************************************************************/
void Motors_Backward(void){
     144:	df 93       	push	r29
     146:	cf 93       	push	r28
     148:	cd b7       	in	r28, 0x3d	; 61
     14a:	de b7       	in	r29, 0x3e	; 62
	Dio_WRITEChannel(ENA_Port, ENA_Channel, STD_HIGH);
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	41 e0       	ldi	r20, 0x01	; 1
     152:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>
	Dio_WRITEChannel(IN1_Port, IN1_Channel, STD_LOW);
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	63 e0       	ldi	r22, 0x03	; 3
     15a:	40 e0       	ldi	r20, 0x00	; 0
     15c:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>
	Dio_WRITEChannel(IN2_Port, IN2_Channel, STD_HIGH);
     160:	83 e0       	ldi	r24, 0x03	; 3
     162:	64 e0       	ldi	r22, 0x04	; 4
     164:	41 e0       	ldi	r20, 0x01	; 1
     166:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>

	Dio_WRITEChannel(ENB_Port, ENB_Channel, STD_HIGH);
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	61 e0       	ldi	r22, 0x01	; 1
     16e:	41 e0       	ldi	r20, 0x01	; 1
     170:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>
	Dio_WRITEChannel(IN3_Port, IN3_Channel, STD_LOW);
     174:	83 e0       	ldi	r24, 0x03	; 3
     176:	65 e0       	ldi	r22, 0x05	; 5
     178:	40 e0       	ldi	r20, 0x00	; 0
     17a:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>
	Dio_WRITEChannel(IN4_Port, IN4_Channel, STD_HIGH);
     17e:	83 e0       	ldi	r24, 0x03	; 3
     180:	67 e0       	ldi	r22, 0x07	; 7
     182:	41 e0       	ldi	r20, 0x01	; 1
     184:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>

}
     188:	cf 91       	pop	r28
     18a:	df 91       	pop	r29
     18c:	08 95       	ret

0000018e <Motors_Stop>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : void
* \Return value:   : None
*******************************************************************************/
void Motors_Stop(void){
     18e:	df 93       	push	r29
     190:	cf 93       	push	r28
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
	Dio_WRITEChannel(ENA_Port, ENA_Channel, STD_HIGH);
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	60 e0       	ldi	r22, 0x00	; 0
     19a:	41 e0       	ldi	r20, 0x01	; 1
     19c:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>
	Dio_WRITEChannel(IN1_Port, IN1_Channel, STD_HIGH);
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	63 e0       	ldi	r22, 0x03	; 3
     1a4:	41 e0       	ldi	r20, 0x01	; 1
     1a6:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>
	Dio_WRITEChannel(IN2_Port, IN2_Channel, STD_HIGH);
     1aa:	83 e0       	ldi	r24, 0x03	; 3
     1ac:	64 e0       	ldi	r22, 0x04	; 4
     1ae:	41 e0       	ldi	r20, 0x01	; 1
     1b0:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>

	Dio_WRITEChannel(ENB_Port, ENB_Channel, STD_HIGH);
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	61 e0       	ldi	r22, 0x01	; 1
     1b8:	41 e0       	ldi	r20, 0x01	; 1
     1ba:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>
	Dio_WRITEChannel(IN3_Port, IN3_Channel, STD_HIGH);
     1be:	83 e0       	ldi	r24, 0x03	; 3
     1c0:	65 e0       	ldi	r22, 0x05	; 5
     1c2:	41 e0       	ldi	r20, 0x01	; 1
     1c4:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>
	Dio_WRITEChannel(IN4_Port, IN4_Channel, STD_HIGH);
     1c8:	83 e0       	ldi	r24, 0x03	; 3
     1ca:	67 e0       	ldi	r22, 0x07	; 7
     1cc:	41 e0       	ldi	r20, 0x01	; 1
     1ce:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>

}
     1d2:	cf 91       	pop	r28
     1d4:	df 91       	pop	r29
     1d6:	08 95       	ret

000001d8 <Led_TurnON>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : LedID
* \Return value:   : None
*******************************************************************************/
void Led_TurnON(LED_ID LedID){
     1d8:	df 93       	push	r29
     1da:	cf 93       	push	r28
     1dc:	0f 92       	push	r0
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62
     1e2:	89 83       	std	Y+1, r24	; 0x01
	if(LedID==LED0){
     1e4:	89 81       	ldd	r24, Y+1	; 0x01
     1e6:	88 23       	and	r24, r24
     1e8:	29 f4       	brne	.+10     	; 0x1f4 <Led_TurnON+0x1c>
		Dio_WRITEChannel(Led0_Port, Led0_Channel, STD_HIGH);
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	60 e0       	ldi	r22, 0x00	; 0
     1ee:	41 e0       	ldi	r20, 0x01	; 1
     1f0:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>
	}
	if(LedID==LED1){
     1f4:	89 81       	ldd	r24, Y+1	; 0x01
     1f6:	81 30       	cpi	r24, 0x01	; 1
     1f8:	29 f4       	brne	.+10     	; 0x204 <Led_TurnON+0x2c>
		Dio_WRITEChannel(Led1_Port, Led1_Channel, STD_HIGH);
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	41 e0       	ldi	r20, 0x01	; 1
     200:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>
	}
}
     204:	0f 90       	pop	r0
     206:	cf 91       	pop	r28
     208:	df 91       	pop	r29
     20a:	08 95       	ret

0000020c <Led_TurnOFF>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : LedID
* \Return value:   : None
*******************************************************************************/
void Led_TurnOFF(LED_ID LedID){
     20c:	df 93       	push	r29
     20e:	cf 93       	push	r28
     210:	0f 92       	push	r0
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	89 83       	std	Y+1, r24	; 0x01
	if(LedID==LED0){
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	88 23       	and	r24, r24
     21c:	29 f4       	brne	.+10     	; 0x228 <Led_TurnOFF+0x1c>
		Dio_WRITEChannel(Led0_Port, Led0_Channel, STD_LOW);
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	60 e0       	ldi	r22, 0x00	; 0
     222:	40 e0       	ldi	r20, 0x00	; 0
     224:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>
	}
	if(LedID==LED1){
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	81 30       	cpi	r24, 0x01	; 1
     22c:	29 f4       	brne	.+10     	; 0x238 <Led_TurnOFF+0x2c>
		Dio_WRITEChannel(Led1_Port, Led1_Channel, STD_LOW);
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	40 e0       	ldi	r20, 0x00	; 0
     234:	0e 94 d7 05 	call	0xbae	; 0xbae <Dio_WRITEChannel>
	}
}
     238:	0f 90       	pop	r0
     23a:	cf 91       	pop	r28
     23c:	df 91       	pop	r29
     23e:	08 95       	ret

00000240 <Led_Toggle>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : LedID
* \Return value:   : None
*******************************************************************************/
void Led_Toggle(LED_ID LedID){
     240:	df 93       	push	r29
     242:	cf 93       	push	r28
     244:	0f 92       	push	r0
     246:	cd b7       	in	r28, 0x3d	; 61
     248:	de b7       	in	r29, 0x3e	; 62
     24a:	89 83       	std	Y+1, r24	; 0x01
	if(LedID==LED0){
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	88 23       	and	r24, r24
     250:	21 f4       	brne	.+8      	; 0x25a <Led_Toggle+0x1a>
		Dio_TOGGLEChannel(Led0_Port, Led0_Channel);
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	0e 94 ba 06 	call	0xd74	; 0xd74 <Dio_TOGGLEChannel>
	}
	if(LedID==LED1){
     25a:	89 81       	ldd	r24, Y+1	; 0x01
     25c:	81 30       	cpi	r24, 0x01	; 1
     25e:	21 f4       	brne	.+8      	; 0x268 <Led_Toggle+0x28>
		Dio_TOGGLEChannel(Led1_Port, Led1_Channel);
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	60 e0       	ldi	r22, 0x00	; 0
     264:	0e 94 ba 06 	call	0xd74	; 0xd74 <Dio_TOGGLEChannel>
	}
}
     268:	0f 90       	pop	r0
     26a:	cf 91       	pop	r28
     26c:	df 91       	pop	r29
     26e:	08 95       	ret

00000270 <Led_Init>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : LedID
* \Return value:   : None
*******************************************************************************/
void Led_Init(void){
     270:	df 93       	push	r29
     272:	cf 93       	push	r28
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
	Dio_CONFIGChannel(Led0_Port, Led0_Channel, OUTPUT);
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	41 e0       	ldi	r20, 0x01	; 1
     27e:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Dio_CONFIGChannel>
	Dio_CONFIGChannel(Led1_Port, Led1_Channel, OUTPUT);
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	41 e0       	ldi	r20, 0x01	; 1
     288:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Dio_CONFIGChannel>

}
     28c:	cf 91       	pop	r28
     28e:	df 91       	pop	r29
     290:	08 95       	ret

00000292 <Button_Read>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : ButtonID
* \Return value:   : Button_Status
*******************************************************************************/
Button_Status Button_Read(BUTTON_ID ButtonID){
     292:	df 93       	push	r29
     294:	cf 93       	push	r28
     296:	00 d0       	rcall	.+0      	; 0x298 <Button_Read+0x6>
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	8a 83       	std	Y+2, r24	; 0x02
	Button_Status status= NOT_PRESSED;
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	89 83       	std	Y+1, r24	; 0x01
	if(ButtonID==BUTTON0){
     2a2:	8a 81       	ldd	r24, Y+2	; 0x02
     2a4:	88 23       	and	r24, r24
     2a6:	39 f4       	brne	.+14     	; 0x2b6 <Button_Read+0x24>
		if(Dio_ReadChannel(Button0_Port, Button0_Channel)==STD_HIGH){
     2a8:	82 e0       	ldi	r24, 0x02	; 2
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	0e 94 37 07 	call	0xe6e	; 0xe6e <Dio_ReadChannel>
     2b0:	81 30       	cpi	r24, 0x01	; 1
     2b2:	09 f4       	brne	.+2      	; 0x2b6 <Button_Read+0x24>
			status = PRESSED;
     2b4:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return status;
     2b6:	89 81       	ldd	r24, Y+1	; 0x01
}
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	cf 91       	pop	r28
     2be:	df 91       	pop	r29
     2c0:	08 95       	ret

000002c2 <Button_Init>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : void
* \Return value:   : None
*******************************************************************************/
void Button_Init(void){
     2c2:	df 93       	push	r29
     2c4:	cf 93       	push	r28
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
	Dio_CONFIGChannel(Button0_Port, Button0_Channel, INPUT);
     2ca:	82 e0       	ldi	r24, 0x02	; 2
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	40 e0       	ldi	r20, 0x00	; 0
     2d0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Dio_CONFIGChannel>
}
     2d4:	cf 91       	pop	r28
     2d6:	df 91       	pop	r29
     2d8:	08 95       	ret

000002da <UART_Init>:
* \Return value:   : void
*
*******************************************************************************/


void UART_Init(Uart_Mode uart_mode, u16 baud_rate, Uart_Interrupt_Mode interrupt_mode, Uart_Data_Bit data_size, Uart_Stop_Bit stop_bit, Uart_Parity_Mode parity_mode, Uart_Device_Mode device_mode){
     2da:	cf 92       	push	r12
     2dc:	ef 92       	push	r14
     2de:	0f 93       	push	r16
     2e0:	df 93       	push	r29
     2e2:	cf 93       	push	r28
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
     2e8:	60 97       	sbiw	r28, 0x10	; 16
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	cd bf       	out	0x3d, r28	; 61
     2f4:	89 83       	std	Y+1, r24	; 0x01
     2f6:	7b 83       	std	Y+3, r23	; 0x03
     2f8:	6a 83       	std	Y+2, r22	; 0x02
     2fa:	4c 83       	std	Y+4, r20	; 0x04
     2fc:	2d 83       	std	Y+5, r18	; 0x05
     2fe:	0e 83       	std	Y+6, r16	; 0x06
     300:	ef 82       	std	Y+7, r14	; 0x07
     302:	c8 86       	std	Y+8, r12	; 0x08
	/* Set baud rate */
	USART_BAUD_RATE_REGISTER_H = (unsigned char)(baud_rate>>8);
     304:	e0 e4       	ldi	r30, 0x40	; 64
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	8a 81       	ldd	r24, Y+2	; 0x02
     30a:	9b 81       	ldd	r25, Y+3	; 0x03
     30c:	89 2f       	mov	r24, r25
     30e:	99 27       	eor	r25, r25
     310:	80 83       	st	Z, r24
	USART_BAUD_RATE_REGISTER_L = (unsigned char)baud_rate;
     312:	e9 e2       	ldi	r30, 0x29	; 41
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	8a 81       	ldd	r24, Y+2	; 0x02
     318:	80 83       	st	Z, r24

	/* Enable receiver and transmitter */
	switch(device_mode){
     31a:	88 85       	ldd	r24, Y+8	; 0x08
     31c:	28 2f       	mov	r18, r24
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	38 8b       	std	Y+16, r19	; 0x10
     322:	2f 87       	std	Y+15, r18	; 0x0f
     324:	8f 85       	ldd	r24, Y+15	; 0x0f
     326:	98 89       	ldd	r25, Y+16	; 0x10
     328:	81 30       	cpi	r24, 0x01	; 1
     32a:	91 05       	cpc	r25, r1
     32c:	89 f0       	breq	.+34     	; 0x350 <UART_Init+0x76>
     32e:	2f 85       	ldd	r18, Y+15	; 0x0f
     330:	38 89       	ldd	r19, Y+16	; 0x10
     332:	22 30       	cpi	r18, 0x02	; 2
     334:	31 05       	cpc	r19, r1
     336:	a1 f0       	breq	.+40     	; 0x360 <UART_Init+0x86>
     338:	8f 85       	ldd	r24, Y+15	; 0x0f
     33a:	98 89       	ldd	r25, Y+16	; 0x10
     33c:	00 97       	sbiw	r24, 0x00	; 0
     33e:	f1 f4       	brne	.+60     	; 0x37c <UART_Init+0xa2>
		case UART_RECEIVE:
			SET_BIT(USART_CONTROL_STATUS_REG_B,RXEN);
     340:	aa e2       	ldi	r26, 0x2A	; 42
     342:	b0 e0       	ldi	r27, 0x00	; 0
     344:	ea e2       	ldi	r30, 0x2A	; 42
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	80 81       	ld	r24, Z
     34a:	80 61       	ori	r24, 0x10	; 16
     34c:	8c 93       	st	X, r24
     34e:	16 c0       	rjmp	.+44     	; 0x37c <UART_Init+0xa2>
			break;
		case UART_TRANSMIT:
			SET_BIT(USART_CONTROL_STATUS_REG_B,TXEN);
     350:	aa e2       	ldi	r26, 0x2A	; 42
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	ea e2       	ldi	r30, 0x2A	; 42
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	80 81       	ld	r24, Z
     35a:	88 60       	ori	r24, 0x08	; 8
     35c:	8c 93       	st	X, r24
     35e:	0e c0       	rjmp	.+28     	; 0x37c <UART_Init+0xa2>
			break;
		case UART_TRANSCIEVE:
			SET_BIT(USART_CONTROL_STATUS_REG_B,TXEN);
     360:	aa e2       	ldi	r26, 0x2A	; 42
     362:	b0 e0       	ldi	r27, 0x00	; 0
     364:	ea e2       	ldi	r30, 0x2A	; 42
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	80 81       	ld	r24, Z
     36a:	88 60       	ori	r24, 0x08	; 8
     36c:	8c 93       	st	X, r24
			SET_BIT(USART_CONTROL_STATUS_REG_B,RXEN);
     36e:	aa e2       	ldi	r26, 0x2A	; 42
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	ea e2       	ldi	r30, 0x2A	; 42
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	80 61       	ori	r24, 0x10	; 16
     37a:	8c 93       	st	X, r24
			break;
	}


	/* Set frame formar data, stop bit, parity bits */
	SET_BIT(USART_CONTROL_STATUS_REG_C,URSEL);
     37c:	a0 e4       	ldi	r26, 0x40	; 64
     37e:	b0 e0       	ldi	r27, 0x00	; 0
     380:	e0 e4       	ldi	r30, 0x40	; 64
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	80 81       	ld	r24, Z
     386:	80 68       	ori	r24, 0x80	; 128
     388:	8c 93       	st	X, r24

	switch(data_size){
     38a:	8d 81       	ldd	r24, Y+5	; 0x05
     38c:	28 2f       	mov	r18, r24
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	3e 87       	std	Y+14, r19	; 0x0e
     392:	2d 87       	std	Y+13, r18	; 0x0d
     394:	8d 85       	ldd	r24, Y+13	; 0x0d
     396:	9e 85       	ldd	r25, Y+14	; 0x0e
     398:	81 30       	cpi	r24, 0x01	; 1
     39a:	91 05       	cpc	r25, r1
     39c:	21 f1       	breq	.+72     	; 0x3e6 <UART_Init+0x10c>
     39e:	2d 85       	ldd	r18, Y+13	; 0x0d
     3a0:	3e 85       	ldd	r19, Y+14	; 0x0e
     3a2:	22 30       	cpi	r18, 0x02	; 2
     3a4:	31 05       	cpc	r19, r1
     3a6:	2c f4       	brge	.+10     	; 0x3b2 <UART_Init+0xd8>
     3a8:	8d 85       	ldd	r24, Y+13	; 0x0d
     3aa:	9e 85       	ldd	r25, Y+14	; 0x0e
     3ac:	00 97       	sbiw	r24, 0x00	; 0
     3ae:	61 f0       	breq	.+24     	; 0x3c8 <UART_Init+0xee>
     3b0:	46 c0       	rjmp	.+140    	; 0x43e <UART_Init+0x164>
     3b2:	2d 85       	ldd	r18, Y+13	; 0x0d
     3b4:	3e 85       	ldd	r19, Y+14	; 0x0e
     3b6:	22 30       	cpi	r18, 0x02	; 2
     3b8:	31 05       	cpc	r19, r1
     3ba:	21 f1       	breq	.+72     	; 0x404 <UART_Init+0x12a>
     3bc:	8d 85       	ldd	r24, Y+13	; 0x0d
     3be:	9e 85       	ldd	r25, Y+14	; 0x0e
     3c0:	83 30       	cpi	r24, 0x03	; 3
     3c2:	91 05       	cpc	r25, r1
     3c4:	71 f1       	breq	.+92     	; 0x422 <UART_Init+0x148>
     3c6:	3b c0       	rjmp	.+118    	; 0x43e <UART_Init+0x164>
		case UART_5_BIT_DATA:
			CLEAR_BIT(USART_CONTROL_STATUS_REG_C,UCSZ0);
     3c8:	a0 e4       	ldi	r26, 0x40	; 64
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	e0 e4       	ldi	r30, 0x40	; 64
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	80 81       	ld	r24, Z
     3d2:	8d 7f       	andi	r24, 0xFD	; 253
     3d4:	8c 93       	st	X, r24
			CLEAR_BIT(USART_CONTROL_STATUS_REG_C,UCSZ1);
     3d6:	a0 e4       	ldi	r26, 0x40	; 64
     3d8:	b0 e0       	ldi	r27, 0x00	; 0
     3da:	e0 e4       	ldi	r30, 0x40	; 64
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	80 81       	ld	r24, Z
     3e0:	8b 7f       	andi	r24, 0xFB	; 251
     3e2:	8c 93       	st	X, r24
     3e4:	2c c0       	rjmp	.+88     	; 0x43e <UART_Init+0x164>
			break;
		case UART_6_BIT_DATA:
			SET_BIT(USART_CONTROL_STATUS_REG_C,UCSZ0);
     3e6:	a0 e4       	ldi	r26, 0x40	; 64
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	e0 e4       	ldi	r30, 0x40	; 64
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	82 60       	ori	r24, 0x02	; 2
     3f2:	8c 93       	st	X, r24
			CLEAR_BIT(USART_CONTROL_STATUS_REG_C,UCSZ1);
     3f4:	a0 e4       	ldi	r26, 0x40	; 64
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	e0 e4       	ldi	r30, 0x40	; 64
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	80 81       	ld	r24, Z
     3fe:	8b 7f       	andi	r24, 0xFB	; 251
     400:	8c 93       	st	X, r24
     402:	1d c0       	rjmp	.+58     	; 0x43e <UART_Init+0x164>
			break;
		case UART_7_BIT_DATA:
			CLEAR_BIT(USART_CONTROL_STATUS_REG_C,UCSZ0);
     404:	a0 e4       	ldi	r26, 0x40	; 64
     406:	b0 e0       	ldi	r27, 0x00	; 0
     408:	e0 e4       	ldi	r30, 0x40	; 64
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	8d 7f       	andi	r24, 0xFD	; 253
     410:	8c 93       	st	X, r24
			SET_BIT(USART_CONTROL_STATUS_REG_C,UCSZ1);
     412:	a0 e4       	ldi	r26, 0x40	; 64
     414:	b0 e0       	ldi	r27, 0x00	; 0
     416:	e0 e4       	ldi	r30, 0x40	; 64
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	80 81       	ld	r24, Z
     41c:	84 60       	ori	r24, 0x04	; 4
     41e:	8c 93       	st	X, r24
     420:	0e c0       	rjmp	.+28     	; 0x43e <UART_Init+0x164>
			break;
		case UART_8_BIT_DATA:
			SET_BIT(USART_CONTROL_STATUS_REG_C,UCSZ0);
     422:	a0 e4       	ldi	r26, 0x40	; 64
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	e0 e4       	ldi	r30, 0x40	; 64
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	80 81       	ld	r24, Z
     42c:	82 60       	ori	r24, 0x02	; 2
     42e:	8c 93       	st	X, r24
			SET_BIT(USART_CONTROL_STATUS_REG_C,UCSZ1);
     430:	a0 e4       	ldi	r26, 0x40	; 64
     432:	b0 e0       	ldi	r27, 0x00	; 0
     434:	e0 e4       	ldi	r30, 0x40	; 64
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
     43a:	84 60       	ori	r24, 0x04	; 4
     43c:	8c 93       	st	X, r24
			break;
	}

	switch(stop_bit){
     43e:	8e 81       	ldd	r24, Y+6	; 0x06
     440:	28 2f       	mov	r18, r24
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	3c 87       	std	Y+12, r19	; 0x0c
     446:	2b 87       	std	Y+11, r18	; 0x0b
     448:	8b 85       	ldd	r24, Y+11	; 0x0b
     44a:	9c 85       	ldd	r25, Y+12	; 0x0c
     44c:	00 97       	sbiw	r24, 0x00	; 0
     44e:	31 f0       	breq	.+12     	; 0x45c <UART_Init+0x182>
     450:	2b 85       	ldd	r18, Y+11	; 0x0b
     452:	3c 85       	ldd	r19, Y+12	; 0x0c
     454:	21 30       	cpi	r18, 0x01	; 1
     456:	31 05       	cpc	r19, r1
     458:	49 f0       	breq	.+18     	; 0x46c <UART_Init+0x192>
     45a:	0f c0       	rjmp	.+30     	; 0x47a <UART_Init+0x1a0>
		case UART_1_STOP_BIT:
			CLEAR_BIT(USART_CONTROL_STATUS_REG_C,USBS);
     45c:	a0 e4       	ldi	r26, 0x40	; 64
     45e:	b0 e0       	ldi	r27, 0x00	; 0
     460:	e0 e4       	ldi	r30, 0x40	; 64
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	80 81       	ld	r24, Z
     466:	87 7f       	andi	r24, 0xF7	; 247
     468:	8c 93       	st	X, r24
     46a:	07 c0       	rjmp	.+14     	; 0x47a <UART_Init+0x1a0>
			break;
		case UART_2_STOP_BIT:
			SET_BIT(USART_CONTROL_STATUS_REG_C,USBS);
     46c:	a0 e4       	ldi	r26, 0x40	; 64
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	e0 e4       	ldi	r30, 0x40	; 64
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	88 60       	ori	r24, 0x08	; 8
     478:	8c 93       	st	X, r24
			break;
	}

	switch(parity_mode){
     47a:	8f 81       	ldd	r24, Y+7	; 0x07
     47c:	28 2f       	mov	r18, r24
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	3a 87       	std	Y+10, r19	; 0x0a
     482:	29 87       	std	Y+9, r18	; 0x09
     484:	89 85       	ldd	r24, Y+9	; 0x09
     486:	9a 85       	ldd	r25, Y+10	; 0x0a
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	91 05       	cpc	r25, r1
     48c:	c1 f0       	breq	.+48     	; 0x4be <UART_Init+0x1e4>
     48e:	29 85       	ldd	r18, Y+9	; 0x09
     490:	3a 85       	ldd	r19, Y+10	; 0x0a
     492:	22 30       	cpi	r18, 0x02	; 2
     494:	31 05       	cpc	r19, r1
     496:	11 f1       	breq	.+68     	; 0x4dc <UART_Init+0x202>
     498:	89 85       	ldd	r24, Y+9	; 0x09
     49a:	9a 85       	ldd	r25, Y+10	; 0x0a
     49c:	00 97       	sbiw	r24, 0x00	; 0
     49e:	61 f5       	brne	.+88     	; 0x4f8 <UART_Init+0x21e>
		case UART_NO_PARITY:
			CLEAR_BIT(USART_CONTROL_STATUS_REG_C,UPM0);
     4a0:	a0 e4       	ldi	r26, 0x40	; 64
     4a2:	b0 e0       	ldi	r27, 0x00	; 0
     4a4:	e0 e4       	ldi	r30, 0x40	; 64
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	80 81       	ld	r24, Z
     4aa:	8f 7e       	andi	r24, 0xEF	; 239
     4ac:	8c 93       	st	X, r24
			CLEAR_BIT(USART_CONTROL_STATUS_REG_C,UPM1);
     4ae:	a0 e4       	ldi	r26, 0x40	; 64
     4b0:	b0 e0       	ldi	r27, 0x00	; 0
     4b2:	e0 e4       	ldi	r30, 0x40	; 64
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	80 81       	ld	r24, Z
     4b8:	8f 7d       	andi	r24, 0xDF	; 223
     4ba:	8c 93       	st	X, r24
     4bc:	1d c0       	rjmp	.+58     	; 0x4f8 <UART_Init+0x21e>
			break;
		case UART_EVEN_PARITY:
			CLEAR_BIT(USART_CONTROL_STATUS_REG_C,UPM0);
     4be:	a0 e4       	ldi	r26, 0x40	; 64
     4c0:	b0 e0       	ldi	r27, 0x00	; 0
     4c2:	e0 e4       	ldi	r30, 0x40	; 64
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	80 81       	ld	r24, Z
     4c8:	8f 7e       	andi	r24, 0xEF	; 239
     4ca:	8c 93       	st	X, r24
			SET_BIT(USART_CONTROL_STATUS_REG_C,UPM1);
     4cc:	a0 e4       	ldi	r26, 0x40	; 64
     4ce:	b0 e0       	ldi	r27, 0x00	; 0
     4d0:	e0 e4       	ldi	r30, 0x40	; 64
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	80 81       	ld	r24, Z
     4d6:	80 62       	ori	r24, 0x20	; 32
     4d8:	8c 93       	st	X, r24
     4da:	0e c0       	rjmp	.+28     	; 0x4f8 <UART_Init+0x21e>
			break;
		case UART_ODD_PARITY:
			SET_BIT(USART_CONTROL_STATUS_REG_C,UPM0);
     4dc:	a0 e4       	ldi	r26, 0x40	; 64
     4de:	b0 e0       	ldi	r27, 0x00	; 0
     4e0:	e0 e4       	ldi	r30, 0x40	; 64
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	80 81       	ld	r24, Z
     4e6:	80 61       	ori	r24, 0x10	; 16
     4e8:	8c 93       	st	X, r24
			SET_BIT(USART_CONTROL_STATUS_REG_C,UPM1);
     4ea:	a0 e4       	ldi	r26, 0x40	; 64
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	e0 e4       	ldi	r30, 0x40	; 64
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	80 81       	ld	r24, Z
     4f4:	80 62       	ori	r24, 0x20	; 32
     4f6:	8c 93       	st	X, r24
			break;
	}


	/* Choose between using polling mode or interrupt*/
	switch(interrupt_mode){
     4f8:	8c 81       	ldd	r24, Y+4	; 0x04
     4fa:	88 2f       	mov	r24, r24
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	81 30       	cpi	r24, 0x01	; 1
     500:	91 05       	cpc	r25, r1
     502:	a9 f4       	brne	.+42     	; 0x52e <UART_Init+0x254>
		case INTERRUPT_ON:
			SET_BIT(STATUS_REG,GLOBAL_INT_EN);
     504:	af e5       	ldi	r26, 0x5F	; 95
     506:	b0 e0       	ldi	r27, 0x00	; 0
     508:	ef e5       	ldi	r30, 0x5F	; 95
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	80 81       	ld	r24, Z
     50e:	80 68       	ori	r24, 0x80	; 128
     510:	8c 93       	st	X, r24
			SET_BIT(USART_CONTROL_STATUS_REG_B,TXCIE);
     512:	aa e2       	ldi	r26, 0x2A	; 42
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ea e2       	ldi	r30, 0x2A	; 42
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	80 81       	ld	r24, Z
     51c:	80 64       	ori	r24, 0x40	; 64
     51e:	8c 93       	st	X, r24
			SET_BIT(USART_CONTROL_STATUS_REG_B,RXCIE);
     520:	aa e2       	ldi	r26, 0x2A	; 42
     522:	b0 e0       	ldi	r27, 0x00	; 0
     524:	ea e2       	ldi	r30, 0x2A	; 42
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	80 81       	ld	r24, Z
     52a:	80 68       	ori	r24, 0x80	; 128
     52c:	8c 93       	st	X, r24
			break;
		case INTERRUPT_OFF:
			break;
	}

	if(uart_mode == SYNC){
     52e:	89 81       	ldd	r24, Y+1	; 0x01
     530:	88 23       	and	r24, r24
     532:	41 f4       	brne	.+16     	; 0x544 <UART_Init+0x26a>
		SET_BIT(USART_CONTROL_STATUS_REG_C,UMSEL);
     534:	a0 e4       	ldi	r26, 0x40	; 64
     536:	b0 e0       	ldi	r27, 0x00	; 0
     538:	e0 e4       	ldi	r30, 0x40	; 64
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	80 81       	ld	r24, Z
     53e:	80 64       	ori	r24, 0x40	; 64
     540:	8c 93       	st	X, r24
     542:	0a c0       	rjmp	.+20     	; 0x558 <UART_Init+0x27e>
	}
	else if(uart_mode == ASYNC){
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	81 30       	cpi	r24, 0x01	; 1
     548:	39 f4       	brne	.+14     	; 0x558 <UART_Init+0x27e>
		CLEAR_BIT(USART_CONTROL_STATUS_REG_C,UMSEL);
     54a:	a0 e4       	ldi	r26, 0x40	; 64
     54c:	b0 e0       	ldi	r27, 0x00	; 0
     54e:	e0 e4       	ldi	r30, 0x40	; 64
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	80 81       	ld	r24, Z
     554:	8f 7b       	andi	r24, 0xBF	; 191
     556:	8c 93       	st	X, r24

	}



}
     558:	60 96       	adiw	r28, 0x10	; 16
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	de bf       	out	0x3e, r29	; 62
     560:	0f be       	out	0x3f, r0	; 63
     562:	cd bf       	out	0x3d, r28	; 61
     564:	cf 91       	pop	r28
     566:	df 91       	pop	r29
     568:	0f 91       	pop	r16
     56a:	ef 90       	pop	r14
     56c:	cf 90       	pop	r12
     56e:	08 95       	ret

00000570 <UART_TransmitChr>:
* \Parameters (in) : data
* \Return value:   : void
*
*******************************************************************************/

void UART_TransmitChr(u8 data){
     570:	df 93       	push	r29
     572:	cf 93       	push	r28
     574:	0f 92       	push	r0
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
     57a:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for empty transmit buffer */
	while (! CHECK_BIT(USART_CONTROL_STATUS_REG_A,UDRE))
     57c:	eb e2       	ldi	r30, 0x2B	; 43
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	88 2f       	mov	r24, r24
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	80 72       	andi	r24, 0x20	; 32
     588:	90 70       	andi	r25, 0x00	; 0
     58a:	00 97       	sbiw	r24, 0x00	; 0
     58c:	b9 f3       	breq	.-18     	; 0x57c <UART_TransmitChr+0xc>
	;
	/* Put data into buffer, sends the data */
	USART_DATA_REG = data;
     58e:	ec e2       	ldi	r30, 0x2C	; 44
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	89 81       	ldd	r24, Y+1	; 0x01
     594:	80 83       	st	Z, r24

}
     596:	0f 90       	pop	r0
     598:	cf 91       	pop	r28
     59a:	df 91       	pop	r29
     59c:	08 95       	ret

0000059e <UART_TransmitStr>:
* \Return value:   : void
*
*******************************************************************************/

void UART_TransmitStr(u8 *str)
{
     59e:	df 93       	push	r29
     5a0:	cf 93       	push	r28
     5a2:	00 d0       	rcall	.+0      	; 0x5a4 <UART_TransmitStr+0x6>
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	9a 83       	std	Y+2, r25	; 0x02
     5aa:	89 83       	std	Y+1, r24	; 0x01
     5ac:	0a c0       	rjmp	.+20     	; 0x5c2 <UART_TransmitStr+0x24>
	/* Wait for empty transmit buffer */
	while (*str != '\0')
	{
		UART_TransmitChr(*str);
     5ae:	e9 81       	ldd	r30, Y+1	; 0x01
     5b0:	fa 81       	ldd	r31, Y+2	; 0x02
     5b2:	80 81       	ld	r24, Z
     5b4:	0e 94 b8 02 	call	0x570	; 0x570 <UART_TransmitChr>
		str++;
     5b8:	89 81       	ldd	r24, Y+1	; 0x01
     5ba:	9a 81       	ldd	r25, Y+2	; 0x02
     5bc:	01 96       	adiw	r24, 0x01	; 1
     5be:	9a 83       	std	Y+2, r25	; 0x02
     5c0:	89 83       	std	Y+1, r24	; 0x01
*******************************************************************************/

void UART_TransmitStr(u8 *str)
{
	/* Wait for empty transmit buffer */
	while (*str != '\0')
     5c2:	e9 81       	ldd	r30, Y+1	; 0x01
     5c4:	fa 81       	ldd	r31, Y+2	; 0x02
     5c6:	80 81       	ld	r24, Z
     5c8:	88 23       	and	r24, r24
     5ca:	89 f7       	brne	.-30     	; 0x5ae <UART_TransmitStr+0x10>
	{
		UART_TransmitChr(*str);
		str++;
	}
}
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	cf 91       	pop	r28
     5d2:	df 91       	pop	r29
     5d4:	08 95       	ret

000005d6 <UART_ReceiveChr>:
* \Parameters (in) : void
* \Return value:   : u8
*
*******************************************************************************/

u8 UART_ReceiveChr(void){
     5d6:	df 93       	push	r29
     5d8:	cf 93       	push	r28
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while (! CHECK_BIT(USART_CONTROL_STATUS_REG_A,RXC))
     5de:	eb e2       	ldi	r30, 0x2B	; 43
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	88 23       	and	r24, r24
     5e6:	dc f7       	brge	.-10     	; 0x5de <UART_ReceiveChr+0x8>
	;
	/* Get and return received data from buffer */
	return USART_DATA_REG;
     5e8:	ec e2       	ldi	r30, 0x2C	; 44
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	80 81       	ld	r24, Z

}
     5ee:	cf 91       	pop	r28
     5f0:	df 91       	pop	r29
     5f2:	08 95       	ret

000005f4 <SPI_vInitMaster>:
#include <avr/io.h>
#include "Spi.h"
#include "Std_Types.h"

void SPI_vInitMaster (void)
{
     5f4:	df 93       	push	r29
     5f6:	cf 93       	push	r28
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
	DDRB |=(1<<SPI_MOSI) |(1<<SPI_SS)|(1<<SPI_SCK);//Set the port B mosi(master out slave in ) ,port B ss(slave select),sck(spi clock)  pins as output
     5fc:	a7 e3       	ldi	r26, 0x37	; 55
     5fe:	b0 e0       	ldi	r27, 0x00	; 0
     600:	e7 e3       	ldi	r30, 0x37	; 55
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	80 81       	ld	r24, Z
     606:	80 6b       	ori	r24, 0xB0	; 176
     608:	8c 93       	st	X, r24
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//Enable the SPI,master mode ,Set the clock speed to F/16
     60a:	ad e2       	ldi	r26, 0x2D	; 45
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	ed e2       	ldi	r30, 0x2D	; 45
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	80 81       	ld	r24, Z
     614:	81 65       	ori	r24, 0x51	; 81
     616:	8c 93       	st	X, r24
}
     618:	cf 91       	pop	r28
     61a:	df 91       	pop	r29
     61c:	08 95       	ret

0000061e <SPI_vInitSlave>:

void SPI_vInitSlave (void)
{
     61e:	df 93       	push	r29
     620:	cf 93       	push	r28
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
     626:	a7 e3       	ldi	r26, 0x37	; 55
     628:	b0 e0       	ldi	r27, 0x00	; 0
     62a:	e7 e3       	ldi	r30, 0x37	; 55
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	80 81       	ld	r24, Z
     630:	80 64       	ori	r24, 0x40	; 64
     632:	8c 93       	st	X, r24
	SPCR |= (1<<SPE);//Enable the SPI
     634:	ad e2       	ldi	r26, 0x2D	; 45
     636:	b0 e0       	ldi	r27, 0x00	; 0
     638:	ed e2       	ldi	r30, 0x2D	; 45
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	80 64       	ori	r24, 0x40	; 64
     640:	8c 93       	st	X, r24
}
     642:	cf 91       	pop	r28
     644:	df 91       	pop	r29
     646:	08 95       	ret

00000648 <SPI_ui8TransmitRecieve>:

u8 SPI_ui8TransmitRecieve (u8 data)
{
     648:	df 93       	push	r29
     64a:	cf 93       	push	r28
     64c:	0f 92       	push	r0
     64e:	cd b7       	in	r28, 0x3d	; 61
     650:	de b7       	in	r29, 0x3e	; 62
     652:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;//move the given data to SPI Data register
     654:	ef e2       	ldi	r30, 0x2F	; 47
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	80 83       	st	Z, r24

	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
     65c:	ee e2       	ldi	r30, 0x2E	; 46
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 81       	ld	r24, Z
     662:	88 1f       	adc	r24, r24
     664:	88 27       	eor	r24, r24
     666:	88 1f       	adc	r24, r24
     668:	88 2f       	mov	r24, r24
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	90 70       	andi	r25, 0x00	; 0
     66e:	00 97       	sbiw	r24, 0x00	; 0
     670:	a9 f3       	breq	.-22     	; 0x65c <SPI_ui8TransmitRecieve+0x14>
	;									//SPI flag is set to one if the transmission is done

	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
     672:	ef e2       	ldi	r30, 0x2F	; 47
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	80 81       	ld	r24, Z
}
     678:	0f 90       	pop	r0
     67a:	cf 91       	pop	r28
     67c:	df 91       	pop	r29
     67e:	08 95       	ret

00000680 <Global_Interrupt_En>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : void
* \Return value:   : None
*******************************************************************************/
void Global_Interrupt_En(void){
     680:	df 93       	push	r29
     682:	cf 93       	push	r28
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(STATUS_REG,GLOBAL_INT_EN);
     688:	af e5       	ldi	r26, 0x5F	; 95
     68a:	b0 e0       	ldi	r27, 0x00	; 0
     68c:	ef e5       	ldi	r30, 0x5F	; 95
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	80 81       	ld	r24, Z
     692:	80 68       	ori	r24, 0x80	; 128
     694:	8c 93       	st	X, r24
}
     696:	cf 91       	pop	r28
     698:	df 91       	pop	r29
     69a:	08 95       	ret

0000069c <Global_Interrupt_Dis>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : void
* \Return value:   : None
*******************************************************************************/
void Global_Interrupt_Dis(void){
     69c:	df 93       	push	r29
     69e:	cf 93       	push	r28
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(STATUS_REG,GLOBAL_INT_EN);
     6a4:	af e5       	ldi	r26, 0x5F	; 95
     6a6:	b0 e0       	ldi	r27, 0x00	; 0
     6a8:	ef e5       	ldi	r30, 0x5F	; 95
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	80 81       	ld	r24, Z
     6ae:	8f 77       	andi	r24, 0x7F	; 127
     6b0:	8c 93       	st	X, r24
}
     6b2:	cf 91       	pop	r28
     6b4:	df 91       	pop	r29
     6b6:	08 95       	ret

000006b8 <Ext_Interrupt_Enable>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : interruptID
* \Return value:   : None
*******************************************************************************/
void Ext_Interrupt_Enable(Ext_InterruptID interruptID){
     6b8:	df 93       	push	r29
     6ba:	cf 93       	push	r28
     6bc:	00 d0       	rcall	.+0      	; 0x6be <Ext_Interrupt_Enable+0x6>
     6be:	0f 92       	push	r0
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
     6c4:	89 83       	std	Y+1, r24	; 0x01
	switch(interruptID){
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	28 2f       	mov	r18, r24
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	3b 83       	std	Y+3, r19	; 0x03
     6ce:	2a 83       	std	Y+2, r18	; 0x02
     6d0:	8a 81       	ldd	r24, Y+2	; 0x02
     6d2:	9b 81       	ldd	r25, Y+3	; 0x03
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	91 05       	cpc	r25, r1
     6d8:	89 f0       	breq	.+34     	; 0x6fc <Ext_Interrupt_Enable+0x44>
     6da:	2a 81       	ldd	r18, Y+2	; 0x02
     6dc:	3b 81       	ldd	r19, Y+3	; 0x03
     6de:	22 30       	cpi	r18, 0x02	; 2
     6e0:	31 05       	cpc	r19, r1
     6e2:	a1 f0       	breq	.+40     	; 0x70c <Ext_Interrupt_Enable+0x54>
     6e4:	8a 81       	ldd	r24, Y+2	; 0x02
     6e6:	9b 81       	ldd	r25, Y+3	; 0x03
     6e8:	00 97       	sbiw	r24, 0x00	; 0
     6ea:	b9 f4       	brne	.+46     	; 0x71a <Ext_Interrupt_Enable+0x62>
	case INTERRUPT_0:
		SET_BIT(GENERAL_INTERRUPT_CONTROL_REG,INTERRUPT0);
     6ec:	ab e5       	ldi	r26, 0x5B	; 91
     6ee:	b0 e0       	ldi	r27, 0x00	; 0
     6f0:	eb e5       	ldi	r30, 0x5B	; 91
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	80 81       	ld	r24, Z
     6f6:	80 64       	ori	r24, 0x40	; 64
     6f8:	8c 93       	st	X, r24
     6fa:	0f c0       	rjmp	.+30     	; 0x71a <Ext_Interrupt_Enable+0x62>
		break;
	case INTERRUPT_1:
		SET_BIT(GENERAL_INTERRUPT_CONTROL_REG,INTERRUPT1);
     6fc:	ab e5       	ldi	r26, 0x5B	; 91
     6fe:	b0 e0       	ldi	r27, 0x00	; 0
     700:	eb e5       	ldi	r30, 0x5B	; 91
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	80 81       	ld	r24, Z
     706:	80 68       	ori	r24, 0x80	; 128
     708:	8c 93       	st	X, r24
     70a:	07 c0       	rjmp	.+14     	; 0x71a <Ext_Interrupt_Enable+0x62>
		break;
	case INTERRUPT_2:
		SET_BIT(GENERAL_INTERRUPT_CONTROL_REG,INTERRUPT2);
     70c:	ab e5       	ldi	r26, 0x5B	; 91
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	eb e5       	ldi	r30, 0x5B	; 91
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	80 81       	ld	r24, Z
     716:	80 62       	ori	r24, 0x20	; 32
     718:	8c 93       	st	X, r24
		break;
	}
}
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	cf 91       	pop	r28
     722:	df 91       	pop	r29
     724:	08 95       	ret

00000726 <Ext_Interrupt_Disable>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : interruptID
* \Return value:   : None
*******************************************************************************/
void Ext_Interrupt_Disable(Ext_InterruptID interruptID){
     726:	df 93       	push	r29
     728:	cf 93       	push	r28
     72a:	00 d0       	rcall	.+0      	; 0x72c <Ext_Interrupt_Disable+0x6>
     72c:	0f 92       	push	r0
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	89 83       	std	Y+1, r24	; 0x01
	switch(interruptID){
     734:	89 81       	ldd	r24, Y+1	; 0x01
     736:	28 2f       	mov	r18, r24
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	3b 83       	std	Y+3, r19	; 0x03
     73c:	2a 83       	std	Y+2, r18	; 0x02
     73e:	8a 81       	ldd	r24, Y+2	; 0x02
     740:	9b 81       	ldd	r25, Y+3	; 0x03
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	91 05       	cpc	r25, r1
     746:	89 f0       	breq	.+34     	; 0x76a <Ext_Interrupt_Disable+0x44>
     748:	2a 81       	ldd	r18, Y+2	; 0x02
     74a:	3b 81       	ldd	r19, Y+3	; 0x03
     74c:	22 30       	cpi	r18, 0x02	; 2
     74e:	31 05       	cpc	r19, r1
     750:	a1 f0       	breq	.+40     	; 0x77a <Ext_Interrupt_Disable+0x54>
     752:	8a 81       	ldd	r24, Y+2	; 0x02
     754:	9b 81       	ldd	r25, Y+3	; 0x03
     756:	00 97       	sbiw	r24, 0x00	; 0
     758:	b9 f4       	brne	.+46     	; 0x788 <Ext_Interrupt_Disable+0x62>
	case INTERRUPT_0:
		CLEAR_BIT(GENERAL_INTERRUPT_CONTROL_REG,INTERRUPT0);
     75a:	ab e5       	ldi	r26, 0x5B	; 91
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	eb e5       	ldi	r30, 0x5B	; 91
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	80 81       	ld	r24, Z
     764:	8f 7b       	andi	r24, 0xBF	; 191
     766:	8c 93       	st	X, r24
     768:	0f c0       	rjmp	.+30     	; 0x788 <Ext_Interrupt_Disable+0x62>
		break;
	case INTERRUPT_1:
		CLEAR_BIT(GENERAL_INTERRUPT_CONTROL_REG,INTERRUPT1);
     76a:	ab e5       	ldi	r26, 0x5B	; 91
     76c:	b0 e0       	ldi	r27, 0x00	; 0
     76e:	eb e5       	ldi	r30, 0x5B	; 91
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	80 81       	ld	r24, Z
     774:	8f 77       	andi	r24, 0x7F	; 127
     776:	8c 93       	st	X, r24
     778:	07 c0       	rjmp	.+14     	; 0x788 <Ext_Interrupt_Disable+0x62>
		break;
	case INTERRUPT_2:
		CLEAR_BIT(GENERAL_INTERRUPT_CONTROL_REG,INTERRUPT2);
     77a:	ab e5       	ldi	r26, 0x5B	; 91
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	eb e5       	ldi	r30, 0x5B	; 91
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
     784:	8f 7d       	andi	r24, 0xDF	; 223
     786:	8c 93       	st	X, r24
		break;
	}
}
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	cf 91       	pop	r28
     790:	df 91       	pop	r29
     792:	08 95       	ret

00000794 <Ext_Interrupt_Config>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : interruptID mode
* \Return value:   : None
*******************************************************************************/

void Ext_Interrupt_Config(Ext_InterruptID interruptID,Ext_Interrupt_Mode mode){
     794:	df 93       	push	r29
     796:	cf 93       	push	r28
     798:	00 d0       	rcall	.+0      	; 0x79a <Ext_Interrupt_Config+0x6>
     79a:	00 d0       	rcall	.+0      	; 0x79c <Ext_Interrupt_Config+0x8>
     79c:	cd b7       	in	r28, 0x3d	; 61
     79e:	de b7       	in	r29, 0x3e	; 62
     7a0:	89 83       	std	Y+1, r24	; 0x01
     7a2:	6a 83       	std	Y+2, r22	; 0x02
	switch(interruptID){
     7a4:	89 81       	ldd	r24, Y+1	; 0x01
     7a6:	28 2f       	mov	r18, r24
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	3c 83       	std	Y+4, r19	; 0x04
     7ac:	2b 83       	std	Y+3, r18	; 0x03
     7ae:	8b 81       	ldd	r24, Y+3	; 0x03
     7b0:	9c 81       	ldd	r25, Y+4	; 0x04
     7b2:	81 30       	cpi	r24, 0x01	; 1
     7b4:	91 05       	cpc	r25, r1
     7b6:	09 f4       	brne	.+2      	; 0x7ba <Ext_Interrupt_Config+0x26>
     7b8:	54 c0       	rjmp	.+168    	; 0x862 <__stack+0x3>
     7ba:	2b 81       	ldd	r18, Y+3	; 0x03
     7bc:	3c 81       	ldd	r19, Y+4	; 0x04
     7be:	22 30       	cpi	r18, 0x02	; 2
     7c0:	31 05       	cpc	r19, r1
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <Ext_Interrupt_Config+0x32>
     7c4:	96 c0       	rjmp	.+300    	; 0x8f2 <__stack+0x93>
     7c6:	8b 81       	ldd	r24, Y+3	; 0x03
     7c8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ca:	00 97       	sbiw	r24, 0x00	; 0
     7cc:	09 f0       	breq	.+2      	; 0x7d0 <Ext_Interrupt_Config+0x3c>
     7ce:	a6 c0       	rjmp	.+332    	; 0x91c <__stack+0xbd>
			case INTERRUPT_0:
				if(mode==LOW_LEVEL){
     7d0:	8a 81       	ldd	r24, Y+2	; 0x02
     7d2:	83 30       	cpi	r24, 0x03	; 3
     7d4:	79 f4       	brne	.+30     	; 0x7f4 <Ext_Interrupt_Config+0x60>
					CLEAR_BIT(MCU_CONTROL_REG,ISC00);
     7d6:	a5 e5       	ldi	r26, 0x55	; 85
     7d8:	b0 e0       	ldi	r27, 0x00	; 0
     7da:	e5 e5       	ldi	r30, 0x55	; 85
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	80 81       	ld	r24, Z
     7e0:	8e 7f       	andi	r24, 0xFE	; 254
     7e2:	8c 93       	st	X, r24
					CLEAR_BIT(MCU_CONTROL_REG,ISC01);
     7e4:	a5 e5       	ldi	r26, 0x55	; 85
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e5 e5       	ldi	r30, 0x55	; 85
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	8d 7f       	andi	r24, 0xFD	; 253
     7f0:	8c 93       	st	X, r24
     7f2:	94 c0       	rjmp	.+296    	; 0x91c <__stack+0xbd>
				}
				else if(mode==FALLING_EDGE){
     7f4:	8a 81       	ldd	r24, Y+2	; 0x02
     7f6:	88 23       	and	r24, r24
     7f8:	79 f4       	brne	.+30     	; 0x818 <Ext_Interrupt_Config+0x84>
					CLEAR_BIT(MCU_CONTROL_REG,ISC00);
     7fa:	a5 e5       	ldi	r26, 0x55	; 85
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e5 e5       	ldi	r30, 0x55	; 85
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	80 81       	ld	r24, Z
     804:	8e 7f       	andi	r24, 0xFE	; 254
     806:	8c 93       	st	X, r24
					SET_BIT(MCU_CONTROL_REG,ISC01);
     808:	a5 e5       	ldi	r26, 0x55	; 85
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	e5 e5       	ldi	r30, 0x55	; 85
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	82 60       	ori	r24, 0x02	; 2
     814:	8c 93       	st	X, r24
     816:	82 c0       	rjmp	.+260    	; 0x91c <__stack+0xbd>
				}
				else if(mode==RISING_EDGE){
     818:	8a 81       	ldd	r24, Y+2	; 0x02
     81a:	82 30       	cpi	r24, 0x02	; 2
     81c:	79 f4       	brne	.+30     	; 0x83c <Ext_Interrupt_Config+0xa8>
					SET_BIT(MCU_CONTROL_REG,ISC00);
     81e:	a5 e5       	ldi	r26, 0x55	; 85
     820:	b0 e0       	ldi	r27, 0x00	; 0
     822:	e5 e5       	ldi	r30, 0x55	; 85
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	80 81       	ld	r24, Z
     828:	81 60       	ori	r24, 0x01	; 1
     82a:	8c 93       	st	X, r24
					SET_BIT(MCU_CONTROL_REG,ISC01);
     82c:	a5 e5       	ldi	r26, 0x55	; 85
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	e5 e5       	ldi	r30, 0x55	; 85
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	82 60       	ori	r24, 0x02	; 2
     838:	8c 93       	st	X, r24
     83a:	70 c0       	rjmp	.+224    	; 0x91c <__stack+0xbd>
				}
				else if(mode==ANY_CHANGE){
     83c:	8a 81       	ldd	r24, Y+2	; 0x02
     83e:	81 30       	cpi	r24, 0x01	; 1
     840:	09 f0       	breq	.+2      	; 0x844 <Ext_Interrupt_Config+0xb0>
     842:	6c c0       	rjmp	.+216    	; 0x91c <__stack+0xbd>
					SET_BIT(MCU_CONTROL_REG,ISC00);
     844:	a5 e5       	ldi	r26, 0x55	; 85
     846:	b0 e0       	ldi	r27, 0x00	; 0
     848:	e5 e5       	ldi	r30, 0x55	; 85
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	80 81       	ld	r24, Z
     84e:	81 60       	ori	r24, 0x01	; 1
     850:	8c 93       	st	X, r24
					CLEAR_BIT(MCU_CONTROL_REG,ISC01);
     852:	a5 e5       	ldi	r26, 0x55	; 85
     854:	b0 e0       	ldi	r27, 0x00	; 0
     856:	e5 e5       	ldi	r30, 0x55	; 85
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	80 81       	ld	r24, Z
     85c:	8d 7f       	andi	r24, 0xFD	; 253
     85e:	8c 93       	st	X, r24
     860:	5d c0       	rjmp	.+186    	; 0x91c <__stack+0xbd>
				}
				break;

			case INTERRUPT_1:
				if(mode==LOW_LEVEL){
     862:	8a 81       	ldd	r24, Y+2	; 0x02
     864:	83 30       	cpi	r24, 0x03	; 3
     866:	79 f4       	brne	.+30     	; 0x886 <__stack+0x27>
					CLEAR_BIT(MCU_CONTROL_REG,ISC10);
     868:	a5 e5       	ldi	r26, 0x55	; 85
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	e5 e5       	ldi	r30, 0x55	; 85
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	80 81       	ld	r24, Z
     872:	8b 7f       	andi	r24, 0xFB	; 251
     874:	8c 93       	st	X, r24
					CLEAR_BIT(MCU_CONTROL_REG,ISC11);
     876:	a5 e5       	ldi	r26, 0x55	; 85
     878:	b0 e0       	ldi	r27, 0x00	; 0
     87a:	e5 e5       	ldi	r30, 0x55	; 85
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	80 81       	ld	r24, Z
     880:	87 7f       	andi	r24, 0xF7	; 247
     882:	8c 93       	st	X, r24
     884:	4b c0       	rjmp	.+150    	; 0x91c <__stack+0xbd>
				}
				else if(mode==FALLING_EDGE){
     886:	8a 81       	ldd	r24, Y+2	; 0x02
     888:	88 23       	and	r24, r24
     88a:	79 f4       	brne	.+30     	; 0x8aa <__stack+0x4b>
					CLEAR_BIT(MCU_CONTROL_REG,ISC10);
     88c:	a5 e5       	ldi	r26, 0x55	; 85
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	e5 e5       	ldi	r30, 0x55	; 85
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	80 81       	ld	r24, Z
     896:	8b 7f       	andi	r24, 0xFB	; 251
     898:	8c 93       	st	X, r24
					SET_BIT(MCU_CONTROL_REG,ISC11);
     89a:	a5 e5       	ldi	r26, 0x55	; 85
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e5 e5       	ldi	r30, 0x55	; 85
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	80 81       	ld	r24, Z
     8a4:	88 60       	ori	r24, 0x08	; 8
     8a6:	8c 93       	st	X, r24
     8a8:	39 c0       	rjmp	.+114    	; 0x91c <__stack+0xbd>
				}
				else if(mode==RISING_EDGE){
     8aa:	8a 81       	ldd	r24, Y+2	; 0x02
     8ac:	82 30       	cpi	r24, 0x02	; 2
     8ae:	79 f4       	brne	.+30     	; 0x8ce <__stack+0x6f>
					SET_BIT(MCU_CONTROL_REG,ISC10);
     8b0:	a5 e5       	ldi	r26, 0x55	; 85
     8b2:	b0 e0       	ldi	r27, 0x00	; 0
     8b4:	e5 e5       	ldi	r30, 0x55	; 85
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	80 81       	ld	r24, Z
     8ba:	84 60       	ori	r24, 0x04	; 4
     8bc:	8c 93       	st	X, r24
					SET_BIT(MCU_CONTROL_REG,ISC11);
     8be:	a5 e5       	ldi	r26, 0x55	; 85
     8c0:	b0 e0       	ldi	r27, 0x00	; 0
     8c2:	e5 e5       	ldi	r30, 0x55	; 85
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	80 81       	ld	r24, Z
     8c8:	88 60       	ori	r24, 0x08	; 8
     8ca:	8c 93       	st	X, r24
     8cc:	27 c0       	rjmp	.+78     	; 0x91c <__stack+0xbd>
				}
				else if(mode==ANY_CHANGE){
     8ce:	8a 81       	ldd	r24, Y+2	; 0x02
     8d0:	81 30       	cpi	r24, 0x01	; 1
     8d2:	21 f5       	brne	.+72     	; 0x91c <__stack+0xbd>
					SET_BIT(MCU_CONTROL_REG,ISC10);
     8d4:	a5 e5       	ldi	r26, 0x55	; 85
     8d6:	b0 e0       	ldi	r27, 0x00	; 0
     8d8:	e5 e5       	ldi	r30, 0x55	; 85
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 81       	ld	r24, Z
     8de:	84 60       	ori	r24, 0x04	; 4
     8e0:	8c 93       	st	X, r24
					CLEAR_BIT(MCU_CONTROL_REG,ISC11);
     8e2:	a5 e5       	ldi	r26, 0x55	; 85
     8e4:	b0 e0       	ldi	r27, 0x00	; 0
     8e6:	e5 e5       	ldi	r30, 0x55	; 85
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	80 81       	ld	r24, Z
     8ec:	87 7f       	andi	r24, 0xF7	; 247
     8ee:	8c 93       	st	X, r24
     8f0:	15 c0       	rjmp	.+42     	; 0x91c <__stack+0xbd>
				}
				break;

			case INTERRUPT_2:
				if(mode==FALLING_EDGE){
     8f2:	8a 81       	ldd	r24, Y+2	; 0x02
     8f4:	88 23       	and	r24, r24
     8f6:	41 f4       	brne	.+16     	; 0x908 <__stack+0xa9>
					CLEAR_BIT(MCU_CONTROL_REG,ISC2);
     8f8:	a5 e5       	ldi	r26, 0x55	; 85
     8fa:	b0 e0       	ldi	r27, 0x00	; 0
     8fc:	e5 e5       	ldi	r30, 0x55	; 85
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	80 81       	ld	r24, Z
     902:	8f 7b       	andi	r24, 0xBF	; 191
     904:	8c 93       	st	X, r24
     906:	0a c0       	rjmp	.+20     	; 0x91c <__stack+0xbd>
				}
				else if(mode==RISING_EDGE){
     908:	8a 81       	ldd	r24, Y+2	; 0x02
     90a:	82 30       	cpi	r24, 0x02	; 2
     90c:	39 f4       	brne	.+14     	; 0x91c <__stack+0xbd>
					SET_BIT(MCU_CONTROL_REG,ISC2);
     90e:	a5 e5       	ldi	r26, 0x55	; 85
     910:	b0 e0       	ldi	r27, 0x00	; 0
     912:	e5 e5       	ldi	r30, 0x55	; 85
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	80 81       	ld	r24, Z
     918:	80 64       	ori	r24, 0x40	; 64
     91a:	8c 93       	st	X, r24
				break;
			}



}
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	cf 91       	pop	r28
     926:	df 91       	pop	r29
     928:	08 95       	ret

0000092a <EEPROM_Write>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : address data
* \Return value:   : None
*******************************************************************************/

void EEPROM_Write(u16 address, u8 data){
     92a:	df 93       	push	r29
     92c:	cf 93       	push	r28
     92e:	00 d0       	rcall	.+0      	; 0x930 <EEPROM_Write+0x6>
     930:	0f 92       	push	r0
     932:	cd b7       	in	r28, 0x3d	; 61
     934:	de b7       	in	r29, 0x3e	; 62
     936:	9a 83       	std	Y+2, r25	; 0x02
     938:	89 83       	std	Y+1, r24	; 0x01
     93a:	6b 83       	std	Y+3, r22	; 0x03

	/* Wait for completion of previous write */
	while(CHECK_BIT(EEPROM_CONTROL_REG,EEWE))
     93c:	ec e3       	ldi	r30, 0x3C	; 60
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	80 81       	ld	r24, Z
     942:	88 2f       	mov	r24, r24
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	82 70       	andi	r24, 0x02	; 2
     948:	90 70       	andi	r25, 0x00	; 0
     94a:	00 97       	sbiw	r24, 0x00	; 0
     94c:	b9 f7       	brne	.-18     	; 0x93c <EEPROM_Write+0x12>
	;
	/* Set up address and data registers */
	EEPROM_ADDRESS_REG_L = address;
     94e:	ee e3       	ldi	r30, 0x3E	; 62
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	89 81       	ldd	r24, Y+1	; 0x01
     954:	80 83       	st	Z, r24
	EEPROM_ADDRESS_REG_H = address>>8;
     956:	ef e3       	ldi	r30, 0x3F	; 63
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	89 81       	ldd	r24, Y+1	; 0x01
     95c:	9a 81       	ldd	r25, Y+2	; 0x02
     95e:	89 2f       	mov	r24, r25
     960:	99 27       	eor	r25, r25
     962:	80 83       	st	Z, r24

	EEPROM_DATA_REG = data;
     964:	ed e3       	ldi	r30, 0x3D	; 61
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	8b 81       	ldd	r24, Y+3	; 0x03
     96a:	80 83       	st	Z, r24
	/* Write logical one to EEMWE */
	SET_BIT(EEPROM_CONTROL_REG,EEMWE);
     96c:	ac e3       	ldi	r26, 0x3C	; 60
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	ec e3       	ldi	r30, 0x3C	; 60
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	80 81       	ld	r24, Z
     976:	84 60       	ori	r24, 0x04	; 4
     978:	8c 93       	st	X, r24
	/* Start eeprom write by setting EEWE */
	SET_BIT(EEPROM_CONTROL_REG,EEWE);
     97a:	ac e3       	ldi	r26, 0x3C	; 60
     97c:	b0 e0       	ldi	r27, 0x00	; 0
     97e:	ec e3       	ldi	r30, 0x3C	; 60
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	80 81       	ld	r24, Z
     984:	82 60       	ori	r24, 0x02	; 2
     986:	8c 93       	st	X, r24

}
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
     98e:	cf 91       	pop	r28
     990:	df 91       	pop	r29
     992:	08 95       	ret

00000994 <EEPROM_Read>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : address
* \Return value:   : None
*******************************************************************************/
u8 EEPROM_Read(u16 address){
     994:	df 93       	push	r29
     996:	cf 93       	push	r28
     998:	00 d0       	rcall	.+0      	; 0x99a <EEPROM_Read+0x6>
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
     99e:	9a 83       	std	Y+2, r25	; 0x02
     9a0:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for completion of previous write */
	while(CHECK_BIT(EEPROM_CONTROL_REG,EEWE))
     9a2:	ec e3       	ldi	r30, 0x3C	; 60
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	80 81       	ld	r24, Z
     9a8:	88 2f       	mov	r24, r24
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	82 70       	andi	r24, 0x02	; 2
     9ae:	90 70       	andi	r25, 0x00	; 0
     9b0:	00 97       	sbiw	r24, 0x00	; 0
     9b2:	b9 f7       	brne	.-18     	; 0x9a2 <EEPROM_Read+0xe>
		;
	/* Set up address register */
	EEPROM_ADDRESS_REG_L = address;
     9b4:	ee e3       	ldi	r30, 0x3E	; 62
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	89 81       	ldd	r24, Y+1	; 0x01
     9ba:	80 83       	st	Z, r24
	EEPROM_ADDRESS_REG_H = address>>8;
     9bc:	ef e3       	ldi	r30, 0x3F	; 63
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	89 81       	ldd	r24, Y+1	; 0x01
     9c2:	9a 81       	ldd	r25, Y+2	; 0x02
     9c4:	89 2f       	mov	r24, r25
     9c6:	99 27       	eor	r25, r25
     9c8:	80 83       	st	Z, r24
	/* Start eeprom read by writing EERE */
	SET_BIT(EEPROM_CONTROL_REG,EERE);
     9ca:	ac e3       	ldi	r26, 0x3C	; 60
     9cc:	b0 e0       	ldi	r27, 0x00	; 0
     9ce:	ec e3       	ldi	r30, 0x3C	; 60
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	81 60       	ori	r24, 0x01	; 1
     9d6:	8c 93       	st	X, r24
	/* Return data from data register */
	return EEPROM_DATA_REG;
     9d8:	ed e3       	ldi	r30, 0x3D	; 61
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	80 81       	ld	r24, Z

}
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	cf 91       	pop	r28
     9e4:	df 91       	pop	r29
     9e6:	08 95       	ret

000009e8 <Dio_CONFIGChannel>:
* \Sync\Async      : Synchronous
* \Reentrancy      : Non Reentrant
* \Parameters (in) : portID channelID ChannelDir
* \Return value:   : None
*******************************************************************************/
void Dio_CONFIGChannel(DIO_PortID portID, DIO_ChannelID channelID, DIO_DirectionType ChannelDir){
     9e8:	df 93       	push	r29
     9ea:	cf 93       	push	r28
     9ec:	00 d0       	rcall	.+0      	; 0x9ee <Dio_CONFIGChannel+0x6>
     9ee:	00 d0       	rcall	.+0      	; 0x9f0 <Dio_CONFIGChannel+0x8>
     9f0:	0f 92       	push	r0
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
     9f6:	89 83       	std	Y+1, r24	; 0x01
     9f8:	6a 83       	std	Y+2, r22	; 0x02
     9fa:	4b 83       	std	Y+3, r20	; 0x03
	switch(portID){
     9fc:	89 81       	ldd	r24, Y+1	; 0x01
     9fe:	28 2f       	mov	r18, r24
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	3d 83       	std	Y+5, r19	; 0x05
     a04:	2c 83       	std	Y+4, r18	; 0x04
     a06:	8c 81       	ldd	r24, Y+4	; 0x04
     a08:	9d 81       	ldd	r25, Y+5	; 0x05
     a0a:	81 30       	cpi	r24, 0x01	; 1
     a0c:	91 05       	cpc	r25, r1
     a0e:	09 f4       	brne	.+2      	; 0xa12 <Dio_CONFIGChannel+0x2a>
     a10:	43 c0       	rjmp	.+134    	; 0xa98 <Dio_CONFIGChannel+0xb0>
     a12:	2c 81       	ldd	r18, Y+4	; 0x04
     a14:	3d 81       	ldd	r19, Y+5	; 0x05
     a16:	22 30       	cpi	r18, 0x02	; 2
     a18:	31 05       	cpc	r19, r1
     a1a:	2c f4       	brge	.+10     	; 0xa26 <Dio_CONFIGChannel+0x3e>
     a1c:	8c 81       	ldd	r24, Y+4	; 0x04
     a1e:	9d 81       	ldd	r25, Y+5	; 0x05
     a20:	00 97       	sbiw	r24, 0x00	; 0
     a22:	71 f0       	breq	.+28     	; 0xa40 <Dio_CONFIGChannel+0x58>
     a24:	bc c0       	rjmp	.+376    	; 0xb9e <Dio_CONFIGChannel+0x1b6>
     a26:	2c 81       	ldd	r18, Y+4	; 0x04
     a28:	3d 81       	ldd	r19, Y+5	; 0x05
     a2a:	22 30       	cpi	r18, 0x02	; 2
     a2c:	31 05       	cpc	r19, r1
     a2e:	09 f4       	brne	.+2      	; 0xa32 <Dio_CONFIGChannel+0x4a>
     a30:	5f c0       	rjmp	.+190    	; 0xaf0 <Dio_CONFIGChannel+0x108>
     a32:	8c 81       	ldd	r24, Y+4	; 0x04
     a34:	9d 81       	ldd	r25, Y+5	; 0x05
     a36:	83 30       	cpi	r24, 0x03	; 3
     a38:	91 05       	cpc	r25, r1
     a3a:	09 f4       	brne	.+2      	; 0xa3e <Dio_CONFIGChannel+0x56>
     a3c:	85 c0       	rjmp	.+266    	; 0xb48 <Dio_CONFIGChannel+0x160>
     a3e:	af c0       	rjmp	.+350    	; 0xb9e <Dio_CONFIGChannel+0x1b6>
		case DIO_PORTA:
			if(ChannelDir==OUTPUT){
     a40:	8b 81       	ldd	r24, Y+3	; 0x03
     a42:	81 30       	cpi	r24, 0x01	; 1
     a44:	a1 f4       	brne	.+40     	; 0xa6e <Dio_CONFIGChannel+0x86>
				SET_BIT(DIO_PORTA_DDR,channelID);
     a46:	aa e3       	ldi	r26, 0x3A	; 58
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	ea e3       	ldi	r30, 0x3A	; 58
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 81       	ld	r24, Z
     a50:	48 2f       	mov	r20, r24
     a52:	8a 81       	ldd	r24, Y+2	; 0x02
     a54:	28 2f       	mov	r18, r24
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	02 2e       	mov	r0, r18
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <Dio_CONFIGChannel+0x7c>
     a60:	88 0f       	add	r24, r24
     a62:	99 1f       	adc	r25, r25
     a64:	0a 94       	dec	r0
     a66:	e2 f7       	brpl	.-8      	; 0xa60 <Dio_CONFIGChannel+0x78>
     a68:	84 2b       	or	r24, r20
     a6a:	8c 93       	st	X, r24
     a6c:	98 c0       	rjmp	.+304    	; 0xb9e <Dio_CONFIGChannel+0x1b6>
			}
			else{
				CLEAR_BIT(DIO_PORTA_DDR,channelID);
     a6e:	aa e3       	ldi	r26, 0x3A	; 58
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ea e3       	ldi	r30, 0x3A	; 58
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	48 2f       	mov	r20, r24
     a7a:	8a 81       	ldd	r24, Y+2	; 0x02
     a7c:	28 2f       	mov	r18, r24
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	02 2e       	mov	r0, r18
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <Dio_CONFIGChannel+0xa4>
     a88:	88 0f       	add	r24, r24
     a8a:	99 1f       	adc	r25, r25
     a8c:	0a 94       	dec	r0
     a8e:	e2 f7       	brpl	.-8      	; 0xa88 <Dio_CONFIGChannel+0xa0>
     a90:	80 95       	com	r24
     a92:	84 23       	and	r24, r20
     a94:	8c 93       	st	X, r24
     a96:	83 c0       	rjmp	.+262    	; 0xb9e <Dio_CONFIGChannel+0x1b6>
			}
			break;
		case DIO_PORTB:
			if(ChannelDir==OUTPUT){
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	81 30       	cpi	r24, 0x01	; 1
     a9c:	a1 f4       	brne	.+40     	; 0xac6 <Dio_CONFIGChannel+0xde>
				SET_BIT(DIO_PORTB_DDR,channelID);
     a9e:	a7 e3       	ldi	r26, 0x37	; 55
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	e7 e3       	ldi	r30, 0x37	; 55
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	80 81       	ld	r24, Z
     aa8:	48 2f       	mov	r20, r24
     aaa:	8a 81       	ldd	r24, Y+2	; 0x02
     aac:	28 2f       	mov	r18, r24
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	02 2e       	mov	r0, r18
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <Dio_CONFIGChannel+0xd4>
     ab8:	88 0f       	add	r24, r24
     aba:	99 1f       	adc	r25, r25
     abc:	0a 94       	dec	r0
     abe:	e2 f7       	brpl	.-8      	; 0xab8 <Dio_CONFIGChannel+0xd0>
     ac0:	84 2b       	or	r24, r20
     ac2:	8c 93       	st	X, r24
     ac4:	6c c0       	rjmp	.+216    	; 0xb9e <Dio_CONFIGChannel+0x1b6>
			}
			else{
				CLEAR_BIT(DIO_PORTB_DDR,channelID);
     ac6:	a7 e3       	ldi	r26, 0x37	; 55
     ac8:	b0 e0       	ldi	r27, 0x00	; 0
     aca:	e7 e3       	ldi	r30, 0x37	; 55
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	80 81       	ld	r24, Z
     ad0:	48 2f       	mov	r20, r24
     ad2:	8a 81       	ldd	r24, Y+2	; 0x02
     ad4:	28 2f       	mov	r18, r24
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	02 2e       	mov	r0, r18
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <Dio_CONFIGChannel+0xfc>
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	0a 94       	dec	r0
     ae6:	e2 f7       	brpl	.-8      	; 0xae0 <Dio_CONFIGChannel+0xf8>
     ae8:	80 95       	com	r24
     aea:	84 23       	and	r24, r20
     aec:	8c 93       	st	X, r24
     aee:	57 c0       	rjmp	.+174    	; 0xb9e <Dio_CONFIGChannel+0x1b6>
			}
			break;
		case DIO_PORTC:
			if(ChannelDir==OUTPUT){
     af0:	8b 81       	ldd	r24, Y+3	; 0x03
     af2:	81 30       	cpi	r24, 0x01	; 1
     af4:	a1 f4       	brne	.+40     	; 0xb1e <Dio_CONFIGChannel+0x136>
				SET_BIT(DIO_PORTC_DDR,channelID);
     af6:	a4 e3       	ldi	r26, 0x34	; 52
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	e4 e3       	ldi	r30, 0x34	; 52
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	80 81       	ld	r24, Z
     b00:	48 2f       	mov	r20, r24
     b02:	8a 81       	ldd	r24, Y+2	; 0x02
     b04:	28 2f       	mov	r18, r24
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	02 2e       	mov	r0, r18
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <Dio_CONFIGChannel+0x12c>
     b10:	88 0f       	add	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	0a 94       	dec	r0
     b16:	e2 f7       	brpl	.-8      	; 0xb10 <Dio_CONFIGChannel+0x128>
     b18:	84 2b       	or	r24, r20
     b1a:	8c 93       	st	X, r24
     b1c:	40 c0       	rjmp	.+128    	; 0xb9e <Dio_CONFIGChannel+0x1b6>
			}
			else{
				CLEAR_BIT(DIO_PORTC_DDR,channelID);
     b1e:	a4 e3       	ldi	r26, 0x34	; 52
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	e4 e3       	ldi	r30, 0x34	; 52
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	80 81       	ld	r24, Z
     b28:	48 2f       	mov	r20, r24
     b2a:	8a 81       	ldd	r24, Y+2	; 0x02
     b2c:	28 2f       	mov	r18, r24
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	02 2e       	mov	r0, r18
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <Dio_CONFIGChannel+0x154>
     b38:	88 0f       	add	r24, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	0a 94       	dec	r0
     b3e:	e2 f7       	brpl	.-8      	; 0xb38 <Dio_CONFIGChannel+0x150>
     b40:	80 95       	com	r24
     b42:	84 23       	and	r24, r20
     b44:	8c 93       	st	X, r24
     b46:	2b c0       	rjmp	.+86     	; 0xb9e <Dio_CONFIGChannel+0x1b6>
			}
			break;
		case DIO_PORTD:
			if(ChannelDir==OUTPUT){
     b48:	8b 81       	ldd	r24, Y+3	; 0x03
     b4a:	81 30       	cpi	r24, 0x01	; 1
     b4c:	a1 f4       	brne	.+40     	; 0xb76 <Dio_CONFIGChannel+0x18e>
				SET_BIT(DIO_PORTD_DDR,channelID);
     b4e:	a1 e3       	ldi	r26, 0x31	; 49
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e3       	ldi	r30, 0x31	; 49
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	48 2f       	mov	r20, r24
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	02 2e       	mov	r0, r18
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <Dio_CONFIGChannel+0x184>
     b68:	88 0f       	add	r24, r24
     b6a:	99 1f       	adc	r25, r25
     b6c:	0a 94       	dec	r0
     b6e:	e2 f7       	brpl	.-8      	; 0xb68 <Dio_CONFIGChannel+0x180>
     b70:	84 2b       	or	r24, r20
     b72:	8c 93       	st	X, r24
     b74:	14 c0       	rjmp	.+40     	; 0xb9e <Dio_CONFIGChannel+0x1b6>
			}
			else{
				CLEAR_BIT(DIO_PORTD_DDR,channelID);
     b76:	a1 e3       	ldi	r26, 0x31	; 49
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e1 e3       	ldi	r30, 0x31	; 49
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	48 2f       	mov	r20, r24
     b82:	8a 81       	ldd	r24, Y+2	; 0x02
     b84:	28 2f       	mov	r18, r24
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	02 2e       	mov	r0, r18
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <Dio_CONFIGChannel+0x1ac>
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	0a 94       	dec	r0
     b96:	e2 f7       	brpl	.-8      	; 0xb90 <Dio_CONFIGChannel+0x1a8>
     b98:	80 95       	com	r24
     b9a:	84 23       	and	r24, r20
     b9c:	8c 93       	st	X, r24
			}
			break;
	}

}
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	cf 91       	pop	r28
     baa:	df 91       	pop	r29
     bac:	08 95       	ret

00000bae <Dio_WRITEChannel>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : portID channelID channelLevel
* \Return value:   : None
*******************************************************************************/

void Dio_WRITEChannel(DIO_PortID portID, DIO_ChannelID channelID, DIO_LevelType channelLevel){
     bae:	df 93       	push	r29
     bb0:	cf 93       	push	r28
     bb2:	00 d0       	rcall	.+0      	; 0xbb4 <Dio_WRITEChannel+0x6>
     bb4:	00 d0       	rcall	.+0      	; 0xbb6 <Dio_WRITEChannel+0x8>
     bb6:	0f 92       	push	r0
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	89 83       	std	Y+1, r24	; 0x01
     bbe:	6a 83       	std	Y+2, r22	; 0x02
     bc0:	4b 83       	std	Y+3, r20	; 0x03
	switch(portID){
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	3d 83       	std	Y+5, r19	; 0x05
     bca:	2c 83       	std	Y+4, r18	; 0x04
     bcc:	8c 81       	ldd	r24, Y+4	; 0x04
     bce:	9d 81       	ldd	r25, Y+5	; 0x05
     bd0:	81 30       	cpi	r24, 0x01	; 1
     bd2:	91 05       	cpc	r25, r1
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <Dio_WRITEChannel+0x2a>
     bd6:	43 c0       	rjmp	.+134    	; 0xc5e <Dio_WRITEChannel+0xb0>
     bd8:	2c 81       	ldd	r18, Y+4	; 0x04
     bda:	3d 81       	ldd	r19, Y+5	; 0x05
     bdc:	22 30       	cpi	r18, 0x02	; 2
     bde:	31 05       	cpc	r19, r1
     be0:	2c f4       	brge	.+10     	; 0xbec <Dio_WRITEChannel+0x3e>
     be2:	8c 81       	ldd	r24, Y+4	; 0x04
     be4:	9d 81       	ldd	r25, Y+5	; 0x05
     be6:	00 97       	sbiw	r24, 0x00	; 0
     be8:	71 f0       	breq	.+28     	; 0xc06 <Dio_WRITEChannel+0x58>
     bea:	bc c0       	rjmp	.+376    	; 0xd64 <Dio_WRITEChannel+0x1b6>
     bec:	2c 81       	ldd	r18, Y+4	; 0x04
     bee:	3d 81       	ldd	r19, Y+5	; 0x05
     bf0:	22 30       	cpi	r18, 0x02	; 2
     bf2:	31 05       	cpc	r19, r1
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <Dio_WRITEChannel+0x4a>
     bf6:	5f c0       	rjmp	.+190    	; 0xcb6 <Dio_WRITEChannel+0x108>
     bf8:	8c 81       	ldd	r24, Y+4	; 0x04
     bfa:	9d 81       	ldd	r25, Y+5	; 0x05
     bfc:	83 30       	cpi	r24, 0x03	; 3
     bfe:	91 05       	cpc	r25, r1
     c00:	09 f4       	brne	.+2      	; 0xc04 <Dio_WRITEChannel+0x56>
     c02:	85 c0       	rjmp	.+266    	; 0xd0e <Dio_WRITEChannel+0x160>
     c04:	af c0       	rjmp	.+350    	; 0xd64 <Dio_WRITEChannel+0x1b6>
		case DIO_PORTA:
			if(channelLevel==STD_HIGH){
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <Dio_WRITEChannel+0x86>
				SET_BIT(DIO_PORTA_DATA_OUT,channelID);
     c0c:	ab e3       	ldi	r26, 0x3B	; 59
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	eb e3       	ldi	r30, 0x3B	; 59
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <Dio_WRITEChannel+0x7c>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <Dio_WRITEChannel+0x78>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	98 c0       	rjmp	.+304    	; 0xd64 <Dio_WRITEChannel+0x1b6>
			}
			else{
				CLEAR_BIT(DIO_PORTA_DATA_OUT,channelID);
     c34:	ab e3       	ldi	r26, 0x3B	; 59
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	eb e3       	ldi	r30, 0x3B	; 59
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <Dio_WRITEChannel+0xa4>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <Dio_WRITEChannel+0xa0>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	83 c0       	rjmp	.+262    	; 0xd64 <Dio_WRITEChannel+0x1b6>
			}
			break;
		case DIO_PORTB:
			if(channelLevel==STD_HIGH){
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <Dio_WRITEChannel+0xde>
				SET_BIT(DIO_PORTB_DATA_OUT,channelID);
     c64:	a8 e3       	ldi	r26, 0x38	; 56
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e8 e3       	ldi	r30, 0x38	; 56
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <Dio_WRITEChannel+0xd4>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <Dio_WRITEChannel+0xd0>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	6c c0       	rjmp	.+216    	; 0xd64 <Dio_WRITEChannel+0x1b6>
			}
			else{
				CLEAR_BIT(DIO_PORTB_DATA_OUT,channelID);
     c8c:	a8 e3       	ldi	r26, 0x38	; 56
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e8 e3       	ldi	r30, 0x38	; 56
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <Dio_WRITEChannel+0xfc>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <Dio_WRITEChannel+0xf8>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	57 c0       	rjmp	.+174    	; 0xd64 <Dio_WRITEChannel+0x1b6>
			}
			break;
		case DIO_PORTC:
			if(channelLevel==STD_HIGH){
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <Dio_WRITEChannel+0x136>
				SET_BIT(DIO_PORTC_DATA_OUT,channelID);
     cbc:	a5 e3       	ldi	r26, 0x35	; 53
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e5 e3       	ldi	r30, 0x35	; 53
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <Dio_WRITEChannel+0x12c>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <Dio_WRITEChannel+0x128>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	40 c0       	rjmp	.+128    	; 0xd64 <Dio_WRITEChannel+0x1b6>
			}
			else{
				CLEAR_BIT(DIO_PORTC_DATA_OUT,channelID);
     ce4:	a5 e3       	ldi	r26, 0x35	; 53
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e5 e3       	ldi	r30, 0x35	; 53
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <Dio_WRITEChannel+0x154>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <Dio_WRITEChannel+0x150>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
     d0c:	2b c0       	rjmp	.+86     	; 0xd64 <Dio_WRITEChannel+0x1b6>
			}
			break;
		case DIO_PORTD:
			if(channelLevel==STD_HIGH){
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	a1 f4       	brne	.+40     	; 0xd3c <Dio_WRITEChannel+0x18e>
				SET_BIT(DIO_PORTD_DATA_OUT,channelID);
     d14:	a2 e3       	ldi	r26, 0x32	; 50
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e2 e3       	ldi	r30, 0x32	; 50
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	48 2f       	mov	r20, r24
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	02 2e       	mov	r0, r18
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <Dio_WRITEChannel+0x184>
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	0a 94       	dec	r0
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <Dio_WRITEChannel+0x180>
     d36:	84 2b       	or	r24, r20
     d38:	8c 93       	st	X, r24
     d3a:	14 c0       	rjmp	.+40     	; 0xd64 <Dio_WRITEChannel+0x1b6>
			}
			else{
				CLEAR_BIT(DIO_PORTD_DATA_OUT,channelID);
     d3c:	a2 e3       	ldi	r26, 0x32	; 50
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e2 e3       	ldi	r30, 0x32	; 50
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	48 2f       	mov	r20, r24
     d48:	8a 81       	ldd	r24, Y+2	; 0x02
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	02 2e       	mov	r0, r18
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <Dio_WRITEChannel+0x1ac>
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	0a 94       	dec	r0
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <Dio_WRITEChannel+0x1a8>
     d5e:	80 95       	com	r24
     d60:	84 23       	and	r24, r20
     d62:	8c 93       	st	X, r24
			}
			break;
	}

}
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <Dio_TOGGLEChannel>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : portID channelID
* \Return value:   : None
*******************************************************************************/

void Dio_TOGGLEChannel(DIO_PortID portID, DIO_ChannelID channelID){
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	00 d0       	rcall	.+0      	; 0xd7a <Dio_TOGGLEChannel+0x6>
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <Dio_TOGGLEChannel+0x8>
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	89 83       	std	Y+1, r24	; 0x01
     d82:	6a 83       	std	Y+2, r22	; 0x02
	switch(portID){
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	3c 83       	std	Y+4, r19	; 0x04
     d8c:	2b 83       	std	Y+3, r18	; 0x03
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	9c 81       	ldd	r25, Y+4	; 0x04
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	91 05       	cpc	r25, r1
     d96:	49 f1       	breq	.+82     	; 0xdea <Dio_TOGGLEChannel+0x76>
     d98:	2b 81       	ldd	r18, Y+3	; 0x03
     d9a:	3c 81       	ldd	r19, Y+4	; 0x04
     d9c:	22 30       	cpi	r18, 0x02	; 2
     d9e:	31 05       	cpc	r19, r1
     da0:	2c f4       	brge	.+10     	; 0xdac <Dio_TOGGLEChannel+0x38>
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	9c 81       	ldd	r25, Y+4	; 0x04
     da6:	00 97       	sbiw	r24, 0x00	; 0
     da8:	61 f0       	breq	.+24     	; 0xdc2 <Dio_TOGGLEChannel+0x4e>
     daa:	5a c0       	rjmp	.+180    	; 0xe60 <Dio_TOGGLEChannel+0xec>
     dac:	2b 81       	ldd	r18, Y+3	; 0x03
     dae:	3c 81       	ldd	r19, Y+4	; 0x04
     db0:	22 30       	cpi	r18, 0x02	; 2
     db2:	31 05       	cpc	r19, r1
     db4:	71 f1       	breq	.+92     	; 0xe12 <Dio_TOGGLEChannel+0x9e>
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	9c 81       	ldd	r25, Y+4	; 0x04
     dba:	83 30       	cpi	r24, 0x03	; 3
     dbc:	91 05       	cpc	r25, r1
     dbe:	e9 f1       	breq	.+122    	; 0xe3a <Dio_TOGGLEChannel+0xc6>
     dc0:	4f c0       	rjmp	.+158    	; 0xe60 <Dio_TOGGLEChannel+0xec>
		case DIO_PORTA:
			FLIP_BIT(DIO_PORTA_DATA_OUT,channelID);
     dc2:	ab e3       	ldi	r26, 0x3B	; 59
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	eb e3       	ldi	r30, 0x3B	; 59
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	48 2f       	mov	r20, r24
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 2e       	mov	r0, r18
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <Dio_TOGGLEChannel+0x6c>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	0a 94       	dec	r0
     de2:	e2 f7       	brpl	.-8      	; 0xddc <Dio_TOGGLEChannel+0x68>
     de4:	84 27       	eor	r24, r20
     de6:	8c 93       	st	X, r24
     de8:	3b c0       	rjmp	.+118    	; 0xe60 <Dio_TOGGLEChannel+0xec>
			break;
		case DIO_PORTB:
			FLIP_BIT(DIO_PORTB_DATA_OUT,channelID);
     dea:	a8 e3       	ldi	r26, 0x38	; 56
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e8 e3       	ldi	r30, 0x38	; 56
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <Dio_TOGGLEChannel+0x94>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <Dio_TOGGLEChannel+0x90>
     e0c:	84 27       	eor	r24, r20
     e0e:	8c 93       	st	X, r24
     e10:	27 c0       	rjmp	.+78     	; 0xe60 <Dio_TOGGLEChannel+0xec>
			break;
		case DIO_PORTC:
			FLIP_BIT(DIO_PORTC_DATA_OUT,channelID);
     e12:	a5 e3       	ldi	r26, 0x35	; 53
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e5 e3       	ldi	r30, 0x35	; 53
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	48 2f       	mov	r20, r24
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 2e       	mov	r0, r18
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <Dio_TOGGLEChannel+0xbc>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <Dio_TOGGLEChannel+0xb8>
     e34:	84 27       	eor	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	13 c0       	rjmp	.+38     	; 0xe60 <Dio_TOGGLEChannel+0xec>
			break;
		case DIO_PORTD:
			FLIP_BIT(DIO_PORTD_DATA_OUT,channelID);
     e3a:	a2 e3       	ldi	r26, 0x32	; 50
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e2 e3       	ldi	r30, 0x32	; 50
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <Dio_TOGGLEChannel+0xe4>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <Dio_TOGGLEChannel+0xe0>
     e5c:	84 27       	eor	r24, r20
     e5e:	8c 93       	st	X, r24
			break;
		}


}
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <Dio_ReadChannel>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : portID channelID
* \Return value:   : DIO_LevelType
*******************************************************************************/

DIO_LevelType Dio_ReadChannel(DIO_PortID portID, DIO_ChannelID channelID){
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	00 d0       	rcall	.+0      	; 0xe74 <Dio_ReadChannel+0x6>
     e74:	00 d0       	rcall	.+0      	; 0xe76 <Dio_ReadChannel+0x8>
     e76:	00 d0       	rcall	.+0      	; 0xe78 <Dio_ReadChannel+0xa>
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	89 83       	std	Y+1, r24	; 0x01
     e7e:	6a 83       	std	Y+2, r22	; 0x02
	switch(portID){
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	3d 83       	std	Y+5, r19	; 0x05
     e88:	2c 83       	std	Y+4, r18	; 0x04
     e8a:	4c 81       	ldd	r20, Y+4	; 0x04
     e8c:	5d 81       	ldd	r21, Y+5	; 0x05
     e8e:	41 30       	cpi	r20, 0x01	; 1
     e90:	51 05       	cpc	r21, r1
     e92:	79 f1       	breq	.+94     	; 0xef2 <Dio_ReadChannel+0x84>
     e94:	8c 81       	ldd	r24, Y+4	; 0x04
     e96:	9d 81       	ldd	r25, Y+5	; 0x05
     e98:	82 30       	cpi	r24, 0x02	; 2
     e9a:	91 05       	cpc	r25, r1
     e9c:	34 f4       	brge	.+12     	; 0xeaa <Dio_ReadChannel+0x3c>
     e9e:	2c 81       	ldd	r18, Y+4	; 0x04
     ea0:	3d 81       	ldd	r19, Y+5	; 0x05
     ea2:	21 15       	cp	r18, r1
     ea4:	31 05       	cpc	r19, r1
     ea6:	69 f0       	breq	.+26     	; 0xec2 <Dio_ReadChannel+0x54>
     ea8:	6c c0       	rjmp	.+216    	; 0xf82 <Dio_ReadChannel+0x114>
     eaa:	4c 81       	ldd	r20, Y+4	; 0x04
     eac:	5d 81       	ldd	r21, Y+5	; 0x05
     eae:	42 30       	cpi	r20, 0x02	; 2
     eb0:	51 05       	cpc	r21, r1
     eb2:	b9 f1       	breq	.+110    	; 0xf22 <Dio_ReadChannel+0xb4>
     eb4:	8c 81       	ldd	r24, Y+4	; 0x04
     eb6:	9d 81       	ldd	r25, Y+5	; 0x05
     eb8:	83 30       	cpi	r24, 0x03	; 3
     eba:	91 05       	cpc	r25, r1
     ebc:	09 f4       	brne	.+2      	; 0xec0 <Dio_ReadChannel+0x52>
     ebe:	49 c0       	rjmp	.+146    	; 0xf52 <Dio_ReadChannel+0xe4>
     ec0:	60 c0       	rjmp	.+192    	; 0xf82 <Dio_ReadChannel+0x114>
		case DIO_PORTA:
			if(CHECK_BIT(DIO_PORTA_DATA_IN,channelID)){
     ec2:	e9 e3       	ldi	r30, 0x39	; 57
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	88 2f       	mov	r24, r24
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	a9 01       	movw	r20, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <Dio_ReadChannel+0x6c>
     ed6:	55 95       	asr	r21
     ed8:	47 95       	ror	r20
     eda:	8a 95       	dec	r24
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <Dio_ReadChannel+0x68>
     ede:	ca 01       	movw	r24, r20
     ee0:	81 70       	andi	r24, 0x01	; 1
     ee2:	90 70       	andi	r25, 0x00	; 0
     ee4:	88 23       	and	r24, r24
     ee6:	19 f0       	breq	.+6      	; 0xeee <Dio_ReadChannel+0x80>
				return STD_HIGH;
     ee8:	51 e0       	ldi	r21, 0x01	; 1
     eea:	5b 83       	std	Y+3, r21	; 0x03
     eec:	4b c0       	rjmp	.+150    	; 0xf84 <Dio_ReadChannel+0x116>
			}
			else{
				return STD_LOW;
     eee:	1b 82       	std	Y+3, r1	; 0x03
     ef0:	49 c0       	rjmp	.+146    	; 0xf84 <Dio_ReadChannel+0x116>
			}
			break;
		case DIO_PORTB:
			if(CHECK_BIT(DIO_PORTB_DATA_IN,channelID)){
     ef2:	e6 e3       	ldi	r30, 0x36	; 54
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	88 2f       	mov	r24, r24
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	a9 01       	movw	r20, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <Dio_ReadChannel+0x9c>
     f06:	55 95       	asr	r21
     f08:	47 95       	ror	r20
     f0a:	8a 95       	dec	r24
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <Dio_ReadChannel+0x98>
     f0e:	ca 01       	movw	r24, r20
     f10:	81 70       	andi	r24, 0x01	; 1
     f12:	90 70       	andi	r25, 0x00	; 0
     f14:	88 23       	and	r24, r24
     f16:	19 f0       	breq	.+6      	; 0xf1e <Dio_ReadChannel+0xb0>
				return STD_HIGH;
     f18:	51 e0       	ldi	r21, 0x01	; 1
     f1a:	5b 83       	std	Y+3, r21	; 0x03
     f1c:	33 c0       	rjmp	.+102    	; 0xf84 <Dio_ReadChannel+0x116>
			}
			else{
				return STD_LOW;
     f1e:	1b 82       	std	Y+3, r1	; 0x03
     f20:	31 c0       	rjmp	.+98     	; 0xf84 <Dio_ReadChannel+0x116>
			}
			break;
		case DIO_PORTC:
			if(CHECK_BIT(DIO_PORTC_DATA_IN,channelID)){
     f22:	e3 e3       	ldi	r30, 0x33	; 51
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	88 2f       	mov	r24, r24
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	a9 01       	movw	r20, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <Dio_ReadChannel+0xcc>
     f36:	55 95       	asr	r21
     f38:	47 95       	ror	r20
     f3a:	8a 95       	dec	r24
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <Dio_ReadChannel+0xc8>
     f3e:	ca 01       	movw	r24, r20
     f40:	81 70       	andi	r24, 0x01	; 1
     f42:	90 70       	andi	r25, 0x00	; 0
     f44:	88 23       	and	r24, r24
     f46:	19 f0       	breq	.+6      	; 0xf4e <Dio_ReadChannel+0xe0>
				return STD_HIGH;
     f48:	51 e0       	ldi	r21, 0x01	; 1
     f4a:	5b 83       	std	Y+3, r21	; 0x03
     f4c:	1b c0       	rjmp	.+54     	; 0xf84 <Dio_ReadChannel+0x116>
			}
			else{
				return STD_LOW;
     f4e:	1b 82       	std	Y+3, r1	; 0x03
     f50:	19 c0       	rjmp	.+50     	; 0xf84 <Dio_ReadChannel+0x116>
			}
			break;
		case DIO_PORTD:
			if(CHECK_BIT(DIO_PORTD_DATA_IN,channelID)){
     f52:	e0 e3       	ldi	r30, 0x30	; 48
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a9 01       	movw	r20, r18
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <Dio_ReadChannel+0xfc>
     f66:	55 95       	asr	r21
     f68:	47 95       	ror	r20
     f6a:	8a 95       	dec	r24
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <Dio_ReadChannel+0xf8>
     f6e:	ca 01       	movw	r24, r20
     f70:	81 70       	andi	r24, 0x01	; 1
     f72:	90 70       	andi	r25, 0x00	; 0
     f74:	88 23       	and	r24, r24
     f76:	19 f0       	breq	.+6      	; 0xf7e <Dio_ReadChannel+0x110>
				return STD_HIGH;
     f78:	51 e0       	ldi	r21, 0x01	; 1
     f7a:	5b 83       	std	Y+3, r21	; 0x03
     f7c:	03 c0       	rjmp	.+6      	; 0xf84 <Dio_ReadChannel+0x116>
			}
			else{
				return STD_LOW;
     f7e:	1b 82       	std	Y+3, r1	; 0x03
     f80:	01 c0       	rjmp	.+2      	; 0xf84 <Dio_ReadChannel+0x116>
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <Dio_ReadChannel+0x11a>
			}
			break;
		}

}
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	8e 83       	std	Y+6, r24	; 0x06
     f88:	8e 81       	ldd	r24, Y+6	; 0x06
     f8a:	26 96       	adiw	r28, 0x06	; 6
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <Dio_CONFIGChannelGroup>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : portID mask ChannelDir
* \Return value:   : DIO_LevelType
*******************************************************************************/

void Dio_CONFIGChannelGroup(DIO_PortID portID, u8 mask, DIO_DirectionType ChannelDir){
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <Dio_CONFIGChannelGroup+0x6>
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <Dio_CONFIGChannelGroup+0x8>
     fa4:	0f 92       	push	r0
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	6a 83       	std	Y+2, r22	; 0x02
     fae:	4b 83       	std	Y+3, r20	; 0x03
	switch(portID){
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	3d 83       	std	Y+5, r19	; 0x05
     fb8:	2c 83       	std	Y+4, r18	; 0x04
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	9d 81       	ldd	r25, Y+5	; 0x05
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	91 05       	cpc	r25, r1
     fc2:	69 f1       	breq	.+90     	; 0x101e <Dio_CONFIGChannelGroup+0x82>
     fc4:	2c 81       	ldd	r18, Y+4	; 0x04
     fc6:	3d 81       	ldd	r19, Y+5	; 0x05
     fc8:	22 30       	cpi	r18, 0x02	; 2
     fca:	31 05       	cpc	r19, r1
     fcc:	2c f4       	brge	.+10     	; 0xfd8 <Dio_CONFIGChannelGroup+0x3c>
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	9d 81       	ldd	r25, Y+5	; 0x05
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	69 f0       	breq	.+26     	; 0xff0 <Dio_CONFIGChannelGroup+0x54>
     fd6:	67 c0       	rjmp	.+206    	; 0x10a6 <Dio_CONFIGChannelGroup+0x10a>
     fd8:	2c 81       	ldd	r18, Y+4	; 0x04
     fda:	3d 81       	ldd	r19, Y+5	; 0x05
     fdc:	22 30       	cpi	r18, 0x02	; 2
     fde:	31 05       	cpc	r19, r1
     fe0:	a9 f1       	breq	.+106    	; 0x104c <Dio_CONFIGChannelGroup+0xb0>
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	9d 81       	ldd	r25, Y+5	; 0x05
     fe6:	83 30       	cpi	r24, 0x03	; 3
     fe8:	91 05       	cpc	r25, r1
     fea:	09 f4       	brne	.+2      	; 0xfee <Dio_CONFIGChannelGroup+0x52>
     fec:	46 c0       	rjmp	.+140    	; 0x107a <Dio_CONFIGChannelGroup+0xde>
     fee:	5b c0       	rjmp	.+182    	; 0x10a6 <Dio_CONFIGChannelGroup+0x10a>
		case DIO_PORTA:
			if(ChannelDir==INPUT){
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	88 23       	and	r24, r24
     ff4:	59 f4       	brne	.+22     	; 0x100c <Dio_CONFIGChannelGroup+0x70>
				DIO_PORTA_DDR &= ~(mask);
     ff6:	aa e3       	ldi	r26, 0x3A	; 58
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	ea e3       	ldi	r30, 0x3A	; 58
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	98 2f       	mov	r25, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	80 95       	com	r24
    1006:	89 23       	and	r24, r25
    1008:	8c 93       	st	X, r24
    100a:	4d c0       	rjmp	.+154    	; 0x10a6 <Dio_CONFIGChannelGroup+0x10a>
			}
			else{
				DIO_PORTA_DDR |= mask;
    100c:	aa e3       	ldi	r26, 0x3A	; 58
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	ea e3       	ldi	r30, 0x3A	; 58
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	90 81       	ld	r25, Z
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	89 2b       	or	r24, r25
    101a:	8c 93       	st	X, r24
    101c:	44 c0       	rjmp	.+136    	; 0x10a6 <Dio_CONFIGChannelGroup+0x10a>
			}
			break;
		case DIO_PORTB:
			if(ChannelDir==INPUT){
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	88 23       	and	r24, r24
    1022:	59 f4       	brne	.+22     	; 0x103a <Dio_CONFIGChannelGroup+0x9e>
				DIO_PORTB_DDR &= ~(mask);
    1024:	a7 e3       	ldi	r26, 0x37	; 55
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e7 e3       	ldi	r30, 0x37	; 55
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	98 2f       	mov	r25, r24
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	80 95       	com	r24
    1034:	89 23       	and	r24, r25
    1036:	8c 93       	st	X, r24
    1038:	36 c0       	rjmp	.+108    	; 0x10a6 <Dio_CONFIGChannelGroup+0x10a>
			}
			else{
				DIO_PORTB_DDR |= mask;
    103a:	a7 e3       	ldi	r26, 0x37	; 55
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e7 e3       	ldi	r30, 0x37	; 55
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	90 81       	ld	r25, Z
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	89 2b       	or	r24, r25
    1048:	8c 93       	st	X, r24
    104a:	2d c0       	rjmp	.+90     	; 0x10a6 <Dio_CONFIGChannelGroup+0x10a>
			}
			break;
		case DIO_PORTC:
			if(ChannelDir==INPUT){
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	88 23       	and	r24, r24
    1050:	59 f4       	brne	.+22     	; 0x1068 <Dio_CONFIGChannelGroup+0xcc>
				DIO_PORTC_DDR &= ~(mask);
    1052:	a4 e3       	ldi	r26, 0x34	; 52
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e4 e3       	ldi	r30, 0x34	; 52
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	98 2f       	mov	r25, r24
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	80 95       	com	r24
    1062:	89 23       	and	r24, r25
    1064:	8c 93       	st	X, r24
    1066:	1f c0       	rjmp	.+62     	; 0x10a6 <Dio_CONFIGChannelGroup+0x10a>
			}
			else{
				DIO_PORTC_DDR |= mask;
    1068:	a4 e3       	ldi	r26, 0x34	; 52
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e4 e3       	ldi	r30, 0x34	; 52
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	90 81       	ld	r25, Z
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	89 2b       	or	r24, r25
    1076:	8c 93       	st	X, r24
    1078:	16 c0       	rjmp	.+44     	; 0x10a6 <Dio_CONFIGChannelGroup+0x10a>
			}
			break;
		case DIO_PORTD:
			if(ChannelDir==INPUT){
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	88 23       	and	r24, r24
    107e:	59 f4       	brne	.+22     	; 0x1096 <Dio_CONFIGChannelGroup+0xfa>
				DIO_PORTD_DDR &= ~(mask);
    1080:	a1 e3       	ldi	r26, 0x31	; 49
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e1 e3       	ldi	r30, 0x31	; 49
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	98 2f       	mov	r25, r24
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	80 95       	com	r24
    1090:	89 23       	and	r24, r25
    1092:	8c 93       	st	X, r24
    1094:	08 c0       	rjmp	.+16     	; 0x10a6 <Dio_CONFIGChannelGroup+0x10a>
			}
			else{
				DIO_PORTD_DDR |= mask;
    1096:	a1 e3       	ldi	r26, 0x31	; 49
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	90 81       	ld	r25, Z
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	89 2b       	or	r24, r25
    10a4:	8c 93       	st	X, r24
			}
			break;
		}

}
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <Dio_WRITEChannelGroup>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : portID mask position data
* \Return value:   : DIO_LevelType
*******************************************************************************/

void Dio_WRITEChannelGroup(DIO_PortID portID, u8 mask, u8 position, u8 data){
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <Dio_WRITEChannelGroup+0x6>
    10bc:	00 d0       	rcall	.+0      	; 0x10be <Dio_WRITEChannelGroup+0x8>
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <Dio_WRITEChannelGroup+0xa>
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	6a 83       	std	Y+2, r22	; 0x02
    10c8:	4b 83       	std	Y+3, r20	; 0x03
    10ca:	2c 83       	std	Y+4, r18	; 0x04
	switch(portID){
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	3e 83       	std	Y+6, r19	; 0x06
    10d4:	2d 83       	std	Y+5, r18	; 0x05
    10d6:	6d 81       	ldd	r22, Y+5	; 0x05
    10d8:	7e 81       	ldd	r23, Y+6	; 0x06
    10da:	61 30       	cpi	r22, 0x01	; 1
    10dc:	71 05       	cpc	r23, r1
    10de:	c1 f1       	breq	.+112    	; 0x1150 <Dio_WRITEChannelGroup+0x9a>
    10e0:	8d 81       	ldd	r24, Y+5	; 0x05
    10e2:	9e 81       	ldd	r25, Y+6	; 0x06
    10e4:	82 30       	cpi	r24, 0x02	; 2
    10e6:	91 05       	cpc	r25, r1
    10e8:	34 f4       	brge	.+12     	; 0x10f6 <Dio_WRITEChannelGroup+0x40>
    10ea:	2d 81       	ldd	r18, Y+5	; 0x05
    10ec:	3e 81       	ldd	r19, Y+6	; 0x06
    10ee:	21 15       	cp	r18, r1
    10f0:	31 05       	cpc	r19, r1
    10f2:	71 f0       	breq	.+28     	; 0x1110 <Dio_WRITEChannelGroup+0x5a>
    10f4:	8c c0       	rjmp	.+280    	; 0x120e <Dio_WRITEChannelGroup+0x158>
    10f6:	6d 81       	ldd	r22, Y+5	; 0x05
    10f8:	7e 81       	ldd	r23, Y+6	; 0x06
    10fa:	62 30       	cpi	r22, 0x02	; 2
    10fc:	71 05       	cpc	r23, r1
    10fe:	09 f4       	brne	.+2      	; 0x1102 <Dio_WRITEChannelGroup+0x4c>
    1100:	47 c0       	rjmp	.+142    	; 0x1190 <Dio_WRITEChannelGroup+0xda>
    1102:	8d 81       	ldd	r24, Y+5	; 0x05
    1104:	9e 81       	ldd	r25, Y+6	; 0x06
    1106:	83 30       	cpi	r24, 0x03	; 3
    1108:	91 05       	cpc	r25, r1
    110a:	09 f4       	brne	.+2      	; 0x110e <Dio_WRITEChannelGroup+0x58>
    110c:	61 c0       	rjmp	.+194    	; 0x11d0 <Dio_WRITEChannelGroup+0x11a>
    110e:	7f c0       	rjmp	.+254    	; 0x120e <Dio_WRITEChannelGroup+0x158>
		case DIO_PORTA:
			DIO_PORTA_DDR &= ~(mask);
    1110:	aa e3       	ldi	r26, 0x3A	; 58
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	ea e3       	ldi	r30, 0x3A	; 58
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	98 2f       	mov	r25, r24
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 95       	com	r24
    1120:	89 23       	and	r24, r25
    1122:	8c 93       	st	X, r24
			DIO_PORTA_DDR |= data<<position;
    1124:	aa e3       	ldi	r26, 0x3A	; 58
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	ea e3       	ldi	r30, 0x3A	; 58
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	48 2f       	mov	r20, r24
    1130:	8c 81       	ldd	r24, Y+4	; 0x04
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	88 2f       	mov	r24, r24
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	b9 01       	movw	r22, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <Dio_WRITEChannelGroup+0x8e>
    1140:	66 0f       	add	r22, r22
    1142:	77 1f       	adc	r23, r23
    1144:	8a 95       	dec	r24
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <Dio_WRITEChannelGroup+0x8a>
    1148:	cb 01       	movw	r24, r22
    114a:	84 2b       	or	r24, r20
    114c:	8c 93       	st	X, r24
    114e:	5f c0       	rjmp	.+190    	; 0x120e <Dio_WRITEChannelGroup+0x158>
			break;
		case DIO_PORTB:
			DIO_PORTB_DDR &= ~(mask);
    1150:	a7 e3       	ldi	r26, 0x37	; 55
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e7 e3       	ldi	r30, 0x37	; 55
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	98 2f       	mov	r25, r24
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	80 95       	com	r24
    1160:	89 23       	and	r24, r25
    1162:	8c 93       	st	X, r24
			DIO_PORTB_DDR |= data<<position;
    1164:	a7 e3       	ldi	r26, 0x37	; 55
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e7 e3       	ldi	r30, 0x37	; 55
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	88 2f       	mov	r24, r24
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	b9 01       	movw	r22, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <Dio_WRITEChannelGroup+0xce>
    1180:	66 0f       	add	r22, r22
    1182:	77 1f       	adc	r23, r23
    1184:	8a 95       	dec	r24
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <Dio_WRITEChannelGroup+0xca>
    1188:	cb 01       	movw	r24, r22
    118a:	84 2b       	or	r24, r20
    118c:	8c 93       	st	X, r24
    118e:	3f c0       	rjmp	.+126    	; 0x120e <Dio_WRITEChannelGroup+0x158>
			break;
		case DIO_PORTC:
			DIO_PORTC_DDR &= ~(mask);
    1190:	a4 e3       	ldi	r26, 0x34	; 52
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e4 e3       	ldi	r30, 0x34	; 52
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	98 2f       	mov	r25, r24
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	80 95       	com	r24
    11a0:	89 23       	and	r24, r25
    11a2:	8c 93       	st	X, r24
			DIO_PORTC_DDR |= data<<position;
    11a4:	a4 e3       	ldi	r26, 0x34	; 52
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e4 e3       	ldi	r30, 0x34	; 52
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	48 2f       	mov	r20, r24
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	b9 01       	movw	r22, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <Dio_WRITEChannelGroup+0x10e>
    11c0:	66 0f       	add	r22, r22
    11c2:	77 1f       	adc	r23, r23
    11c4:	8a 95       	dec	r24
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <Dio_WRITEChannelGroup+0x10a>
    11c8:	cb 01       	movw	r24, r22
    11ca:	84 2b       	or	r24, r20
    11cc:	8c 93       	st	X, r24
    11ce:	1f c0       	rjmp	.+62     	; 0x120e <Dio_WRITEChannelGroup+0x158>
			break;
		case DIO_PORTD:
			DIO_PORTD_DDR &= ~(mask);
    11d0:	a1 e3       	ldi	r26, 0x31	; 49
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e1 e3       	ldi	r30, 0x31	; 49
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	98 2f       	mov	r25, r24
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	80 95       	com	r24
    11e0:	89 23       	and	r24, r25
    11e2:	8c 93       	st	X, r24
			DIO_PORTD_DDR |= data<<position;
    11e4:	a1 e3       	ldi	r26, 0x31	; 49
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e1 e3       	ldi	r30, 0x31	; 49
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	8c 81       	ldd	r24, Y+4	; 0x04
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	88 2f       	mov	r24, r24
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	b9 01       	movw	r22, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <Dio_WRITEChannelGroup+0x14e>
    1200:	66 0f       	add	r22, r22
    1202:	77 1f       	adc	r23, r23
    1204:	8a 95       	dec	r24
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <Dio_WRITEChannelGroup+0x14a>
    1208:	cb 01       	movw	r24, r22
    120a:	84 2b       	or	r24, r20
    120c:	8c 93       	st	X, r24
			break;
		}
}
    120e:	26 96       	adiw	r28, 0x06	; 6
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <_exit>:
    1220:	f8 94       	cli

00001222 <__stop_program>:
    1222:	ff cf       	rjmp	.-2      	; 0x1222 <__stop_program>
